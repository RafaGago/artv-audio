name: CMake

on:
  push:
    branches: [ci]
  pull_request:
    branches: [ci]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VST3_TARGETS: MixMaxTrix_VST3
  LV2_TARGETS: MixMaxTrix_LV2

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        os: ["ubuntu-latest"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Ccache
        uses: hendrikmuhs/ccache-action@v1

      - name: Install Deps
        run: |
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main" | sudo tee -a /etc/apt/sources.list
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt update
          sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libjack-jackd2-dev lv2-dev clang-14 clang-tools-14 lld-14

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Versions
        run: |
          cmake --version

      # Build Windows first. It has more likelyhood to fail.
      - name: Get Windows SDK
        run: ./build/xwin.sh

      - name: Configure Windows
        # Not using ninja. I don't remember the reason but it wasn't really running parallel builds
        # ccache seems to not play well on this Windows build. Not using it unfortunately.
        run: |
          cmake -B ${{github.workspace}}/build-windows -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLINK_TIME_OPTIMIZATION=On  -DBUILD_LV2=Off -DCMAKE_TOOLCHAIN_FILE=build/clang-cl-xwin-x86_64.toolchain.cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
          cmake -B ${{github.workspace}}/build-windows-zen3 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLINK_TIME_OPTIMIZATION=On  -DBUILD_LV2=Off -DZEN3_BUILD=Off -DCMAKE_TOOLCHAIN_FILE=build/clang-cl-xwin-x86_64.toolchain.cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

      - name: Build Windows
        run: |
          cmake --build ${{github.workspace}}/build-windows --config ${{env.BUILD_TYPE}} --parallel --target ${{env.VST3_TARGETS}}
          cmake --build ${{github.workspace}}/build-windows-zen3 --config ${{env.BUILD_TYPE}} --parallel --target ${{env.VST3_TARGETS}}

      - name: Configure Linux
        # Not using ninja. I don't remember the reason but it wasn't really running parallel builds
        run: |
          CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 cmake -B ${{github.workspace}}/build-linux -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLINK_TIME_OPTIMIZATION=On -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DBUILD_LV2=On -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

      - name: Build Linux
        run: |
          cmake --build ${{github.workspace}}/build-linux --config ${{env.BUILD_TYPE}} --parallel --target ${{env.VST3_TARGETS}} ${{env.LV2_TARGETS}}

      - name: Strip and create symbol files Linux
        run: |
          cd build-linux/MixMaxTrix_artefacts/Release/VST3/MixMaxTrix.vst3/Contents/x86_64-linux/
          objcopy --only-keep-debug MixMaxTrix.so MixMaxTrix.vst3.syms
          strip --strip-debug --strip-unneeded MixMaxTrix.so
          cd -
          if cd "build-linux/MixMaxTrix_artefacts/Release/LV2/MixMaxTrix.lv2"; then
            objcopy --only-keep-debug MixMaxTrix.so MixMaxTrix.lv2.syms
            strip --strip-debug --strip-unneeded MixMaxTrix.so
          fi
          cd -
      - name: Test
        working-directory: ${{github.workspace}}/build-linux
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      # LV2 Linux
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-linux-${{github.sha}}-x64-lv2
          path: |
            ${{github.workspace}}/build-linux/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/LV2/MixMaxTrix*.lv2/**
            !**/*.syms

      # Symbols LV2 Linux
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-linux-${{github.sha}}-x64-lv2-debug-symbols
          path: |
            ${{github.workspace}}/build-linux/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/LV2/MixMaxTrix*.lv2/**/*.syms

      # VST3 Linux
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-linux-${{github.sha}}-x64-vst3
          path: |
            ${{github.workspace}}/build-linux/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix*.vst3/**
            !**/*.syms

      # Symbols VST3 Linux
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-linux-${{github.sha}}-x64-vst3-debug-symbols
          path: |
            ${{github.workspace}}/build-linux/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix*.vst3/**/*.syms

      # VST3 Windows
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-windows-${{github.sha}}-x64-vst3
          path: |
            ${{github.workspace}}/build-windows/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix*.vst3/**
            !**/*.pdb

      # Symbols VST3 Windows
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-windows-${{github.sha}}-x64-debug-symbols
          path: |
            ${{github.workspace}}/build-windows/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix*.vst3/**/*.pdb

      # VST3 Windows Zen3
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-windows-${{github.sha}}-zen3-vst3
          path: |
            ${{github.workspace}}/build-windows-zen3/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix*.vst3/**
            !**/*.pdb

      # Symbols Windows Zen3
      - uses: actions/upload-artifact@v2
        with:
          name: mix-maxtrix-windows-${{github.sha}}-zen3-debug-symbols
          path: |
            ${{github.workspace}}/build-windows-zen3/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix*.vst3/**/*.pdb
