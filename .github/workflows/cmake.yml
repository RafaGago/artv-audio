name: CMake

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VST3_TARGETS: MixMaxTrix_VST3
  LV2_TARGETS: MixMaxTrix_LV2

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        os: ["ubuntu-latest", "windows-latest"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Ccache
        if: runner.os == 'Linux'
        uses: hendrikmuhs/ccache-action@v1

      - name: Install Juce Deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libjack-jackd2-dev lv2-dev

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Ninja Windows
        if: runner.os == 'Windows'
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure Linux
        if: runner.os == 'Linux'
        # Not using ninja. I don't remember the reason but it wasn't really running parallel builds
        # Using clang because on vanilla Ubuntu 20.04 it compiles this codebase faster.
        run: CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLINK_TIME_OPTIMIZATION=On -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DBUILD_LV2=On

      - name: Configure Windows
        if: runner.os == 'Windows'
        # MSVC doesn't compile neither Dishtro (on Dragonfly) nor the parameter definition macros.
        # Disthro is doing variable length arrays, which isn't standard, but the parameter definition macros should probably
        # compile as they are. Anyways, I'd be using clang-cl anyways...
        shell: cmd
        run: |
          cmake --version
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLINK_TIME_OPTIMIZATION=On -G "Ninja" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl

      - name: Build Linux
        if: runner.os == 'Linux'
        run: |
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel --target ${{env.VST3_TARGETS}} ${{env.LV2_TARGETS}}

      - name: Build Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel --target ${{env.VST3_TARGETS}}

      - name: Strip
        if: runner.os == 'Linux'
        # TODO: strip LV2
        run: |
          strip --strip-unneeded build/MixMaxTrix_artefacts/Release/VST3/MixMaxTrix.vst3/Contents/x86_64-linux/MixMaxTrix.so

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      # LV2 Linux
      - uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: mix-maxtrix-linux-lv2-latest
          path: ${{github.workspace}}/build/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/LV2/MixMaxTrix.lv2

      # VST3 Linux
      - uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: mix-maxtrix-linux-vst3-latest
          path: ${{github.workspace}}/build/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix.vst3

      # VST3 Windows
      - uses: actions/upload-artifact@v2
        if: runner.os == 'Windows'
        with:
          name: mix-maxtrix-windows-vst3-latest
          path: ${{github.workspace}}/build/MixMaxTrix_artefacts/${{env.BUILD_TYPE}}/VST3/MixMaxTrix.vst3
