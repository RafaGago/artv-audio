import _core.jsfx-inc

@init

// returns 8 values on the "dst_ptr" array. "src_ptr" has to contain 8 values.
function hadamard_8 (y_ptr, x_ptr)
    local (x01, x23, x45, x67, x0123, x4567, i) global()(
    // y0 + + + + + + + +
    // y4 + + + + - - - -
    // y2 + + - - + + - -
    // y6 + + - - - - + +

    x01 = x_ptr[0] + x_ptr[1];
    x23 = x_ptr[2] + x_ptr[3];
    x45 = x_ptr[4] + x_ptr[5];
    x67 = x_ptr[6] + x_ptr[7];

    x0123 = x01 + x23;
    x4567 = x45 + x67;
    y_ptr[0] = x0123 + x4567;
    y_ptr[4] = x0123 - x4567;
    x0123 = x01 - x23;
    x4567 = x45 - x67;
    y_ptr[2] = x0123 + x4567;
    y_ptr[6] = x0123 - x4567;

    // y1 + - + - + - + -
    // y5 + - + - - + - +
    // y3 + - - + + - - +
    // y7 + - - + - + + -

    x01 = x_ptr[0] - x_ptr[1];
    x23 = x_ptr[2] - x_ptr[3];
    x45 = x_ptr[4] - x_ptr[5];
    x67 = x_ptr[6] - x_ptr[7];

    x0123 = x01 + x23;
    x4567 = x45 + x67;
    y_ptr[1] = x0123 + x4567;
    y_ptr[5] = x0123 - x4567;
    x0123 = x01 - x23;
    x4567 = x45 - x67;
    y_ptr[3] = x0123 + x4567;
    y_ptr[7] = x0123 - x4567;

    i = 0;
    loop(8,
        y_ptr[i] *= 0.35355339059327373; // 1/sqrt(8)
        i += 1;
    );
);


function hadamard_4 (y_ptr, x_ptr) local (x01, x23) global()(
    // ++++
    // +-+-
    // ++--
    // +--+
    x01 = (x_ptr[0] + x_ptr[1]) * 0.5;
    x23 = (x_ptr[2] + x_ptr[3]) * 0.5;
    y_ptr[0] = x01 + x23;
    y_ptr[2] = x01 - x23;
    x01 -= x_ptr[1];
    x23 -= x_ptr[3];
    y_ptr[1] = x01 + x23;
    y_ptr[3] = x01 - x23;
);

// returns "size "values on the "y_ptr" array. "x_ptr" array has to contain
// "size" values. "size" has to be a power of 2.
function householder (y_ptr, x_ptr, size) local (i, factor) global() (
    factor = range_get_sum (x_ptr, size) * 2 / size;
    i = 0;
    loop(size,
        y_ptr[i] = x_ptr[i] - factor;
        i += 1;
    );
);

// conference matrix by t.Rochebois
function rochebois_4 (y_ptr, x_ptr) local (i) global()(
    y_ptr[0] = x_ptr[1] + x_ptr[2] + x_ptr[3];
    y_ptr[1] = x_ptr[0] + x_ptr[2] - x_ptr[3];
    y_ptr[2] = x_ptr[0] - x_ptr[1] + x_ptr[3];
    y_ptr[3] = x_ptr[0] + x_ptr[1] - x_ptr[2];

    i = 0;
    loop (4,
        y_ptr[i] *= 0.5773502691896258; // 1 / sqrt(3)
        i += 1;
    );
);

// conference matrix by t.Rochebois
function rochebois_8 (y_ptr, x_ptr) local (t, t2, i) global()(
    t = x_ptr[3] + x_ptr[4] + x_ptr[5] + x_ptr[6] + x_ptr[7];

    y_ptr[0] = t - (x_ptr[4] * 2) + x_ptr[2] - x_ptr[1];
    y_ptr[1] = t - (x_ptr[5] * 2) + x_ptr[0] - x_ptr[2];
    y_ptr[2] = t - (x_ptr[6] * 2) + x_ptr[1] - x_ptr[0];

    t2 = -x_ptr[0] - x_ptr[1] - x_ptr[2] - x_ptr[3];
    y_ptr[3] = (t - (x_ptr[7] * 2) + t2);

    y_ptr[4] = t2 + (x_ptr[0] * 2) + x_ptr[5] - x_ptr[6] + x_ptr[7];
    y_ptr[5] = t2 + (x_ptr[1] * 2) - x_ptr[4] + x_ptr[6] + x_ptr[7];
    y_ptr[6] = t2 + (x_ptr[2] * 2) + x_ptr[4] - x_ptr[5] + x_ptr[7];
    y_ptr[7] = t2 + (x_ptr[3] * 2) - x_ptr[4] - x_ptr[5] - x_ptr[6];

    i = 0;
    loop (8,
        y_ptr[i] *= 0.3779644730092272; // 1 / sqrt(7)
        i += 1;
    );
);

// TODO: different angles for each butterfly?
// w1 (weight1) is usually cos(angle)
// w2 (weight1) is usually sin(angle)
// The weights can be anything, but "w1^2 + w2^2 = 1" has to hold.

function rot_matrix_4 (y_ptr, x_ptr, w1, w2)
  local(y1, y2, y3, y4) global()(

    // reminder, this starts from two butterflies (first drawing), it is then
    // combined together (so copy paste of the 4 x 2x2 matrices with the
    // upper-left one negated) using the same scheme.
    //
    //     1 2             3 4
    // --------        --------
    // 1 | + -         3 | + -
    // 2 | + +         4 | + +

    //     1 2 3 4
    // ------------
    // 1 | + - - +
    // 2 | + + - -
    // 3 | + - + -
    // 4 | + + + +

  y1 = w1 * x_ptr[0] - w2 * x_ptr[1];
  y2 = w2 * x_ptr[0] + w1 * x_ptr[1];

  y3 = w1 * x_ptr[2] - w2 * x_ptr[3];
  y4 = w2 * x_ptr[2] + w1 * x_ptr[3];

  y_ptr[0] = w1 * y1 - w2 * y3;
  y_ptr[1] = w1 * y2 - w2 * y4;
  y_ptr[2] = w2 * y1 + w1 * y3;
  y_ptr[3] = w2 * y2 + w1 * y4;
);

// w1 (weight1) is usually cos(angle)
// w2 (weight1) is usually sin(angle)
// The weights can be anything, but "w1^2 + w2^2 = 1" has to hold.
function rot_matrix_8 (y_ptr, x_ptr, w1a, w2a, w1b, w2b)
  local(y1, y2, y3, y4, y5, y6, y7, y8) global()(

  rot_matrix_4 (y_ptr, x_ptr, w1a, w2a);
  rot_matrix_4 (y_ptr + 4, x_ptr + 4, w1b, w2b);

    //     1 2 3 4
    // ------------
    // 1 | + - - +
    // 2 | + + - -
    // 3 | + - + -
    // 4 | + + + +

    //     5 6 7 8
    // ------------
    // 5 | + - - +
    // 6 | + + - -
    // 7 | + - + -
    // 8 | + + + +

    //     1 2 3 4 5 6 7 8
    // ---------------------
    // 1 | + - - + - + + -
    // 2 | + + - - - - + +
    // 3 | + - + - - + - +
    // 4 | + + + + - - - -
    // 5 | + - - + + - - +
    // 6 | + + - - + + - -
    // 7 | + - + - + - + -
    // 8 | + + + + + + + +

  y1 = y_ptr[0];
  y2 = y_ptr[1];
  y3 = y_ptr[2];
  y4 = y_ptr[3];
  y5 = y_ptr[4];
  y6 = y_ptr[5];
  y7 = y_ptr[6];
  y8 = y_ptr[7];

  y_ptr[0] = w1a * y1 - w2a * y5;
  y_ptr[1] = w1a * y2 - w2a * y6;
  y_ptr[2] = w1b * y3 - w2b * y7;
  y_ptr[3] = w1b * y4 - w2b * y8;
  y_ptr[4] = w2a * y1 + w1a * y5;
  y_ptr[5] = w2a * y2 + w1a * y6;
  y_ptr[6] = w2b * y3 + w1b * y7;
  y_ptr[7] = w2b * y4 + w1b * y8;
);

function rot_matrix_8 (y_ptr, x_ptr, w1, w2) global()(
  rot_matrix_8 (y_ptr, x_ptr, w1, w2, w1, w2);
);

// w1 (weight1) is usually cos(angle)
// w2 (weight1) is usually sin(angle)
// The weights can be anything, but "w1^2 + w2^2 = 1" has to hold.
function rot_matrix_16 (y_ptr, x_ptr, w1a, w2a, w1b, w2b, w1c, w2c, w1d, w2d)
  local(
    y1, y2, y3, y4, y5, y6, y7, y8, y9, ya, yb, yc, yd, ye, yf, yg)
  global()(

  rot_matrix_8 (y_ptr, x_ptr, w1a, w2a, w1b, w2b);
  rot_matrix_8 (y_ptr + 8, x_ptr + 8, w1c, w2c, w1d, w2d);

    //     1 2 3 4 5 6 7 8
    // ---------------------
    // 1 | + - - + - + + -
    // 2 | + + - - - - + +
    // 3 | + - + - - + - +
    // 4 | + + + + - - - -
    // 5 | + - - + + - - +
    // 6 | + + - - + + - -
    // 7 | + - + - + - + -
    // 8 | + + + + + + + +

    //      9 0 1 2 3 4 5 6
    // ---------------------
    // 9  | + - - + - + + -
    // 10 | + + - - - - + +
    // 11 | + - + - - + - +
    // 12 | + + + + - - - -
    // 13 | + - - + + - - +
    // 14 | + + - - + + - -
    // 15 | + - + - + - + -
    // 16 | + + + + + + + +

    //      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
    //    ---------------------------------
    //  1 | + - - + - + + - - + + - + - - +
    //  2 | + + - - - - + + - - + + + + - -
    //  3 | + - + - - + - + - + - + + - + -
    //  4 | + + + + - - - - - - - - + + + +
    //  5 | + - - + + - - + - + + - - + + -
    //  6 | + + - - + + - - - - + + - - + +
    //  7 | + - + - + - + - - + - + - + - +
    //  8 | + + + + + + + + - - - - - - - -
    //  9 | + - - + - + + - + - - + - + + -
    // 10 | + + - - - - + + + + - - - - + +
    // 11 | + - + - - + - + + - + - - + - +
    // 12 | + + + + - - - - + + + + - - - -
    // 13 | + - - + + - - + + - - + + - - +
    // 14 | + + - - + + - - + + - - + + - -
    // 15 | + - + - + - + - + - + - + - + -
    // 16 | + + + + + + + + + + + + + + + +

  y1 = y_ptr[0];
  y2 = y_ptr[1];
  y3 = y_ptr[2];
  y4 = y_ptr[3];
  y5 = y_ptr[4];
  y6 = y_ptr[5];
  y7 = y_ptr[6];
  y8 = y_ptr[7];
  y9 = y_ptr[8];
  ya = y_ptr[9];
  yb = y_ptr[10];
  yc = y_ptr[11];
  yd = y_ptr[12];
  ye = y_ptr[13];
  yf = y_ptr[14];
  yg = y_ptr[15];

  y_ptr[0]  = w1a * y1 - w2a * y9;
  y_ptr[1]  = w1a * y2 - w2a * ya;
  y_ptr[2]  = w1b * y3 - w2b * yb;
  y_ptr[3]  = w1b * y4 - w2b * yc;
  y_ptr[4]  = w1c * y5 - w2c * yd;
  y_ptr[5]  = w1c * y6 - w2c * ye;
  y_ptr[6]  = w1d * y7 - w2d * yf;
  y_ptr[7]  = w1d * y8 - w2d * yg;
  y_ptr[8]  = w2a * y1 + w1a * y9;
  y_ptr[9]  = w2a * y2 + w1a * ya;
  y_ptr[10] = w2b * y3 + w1b * yb;
  y_ptr[11] = w2b * y4 + w1b * yc;
  y_ptr[12] = w2c * y5 + w1c * yd;
  y_ptr[13] = w2c * y6 + w1c * ye;
  y_ptr[14] = w2d * y7 + w1d * yf;
  y_ptr[15] = w2d * y8 + w1d * yg;
);

function rot_matrix_16 (y_ptr, x_ptr, w1, w2)(
  rot_matrix_16 (y_ptr, x_ptr, w1, w2, w1, w2, w1, w2, w1, w2);
);

function skew_hadamard_4 (y_ptr, x_ptr)
  local(x1, x2, x3, x4, i)
  global() (
  // https://www.rangevoting.org/SkewHad.html
  //     1 2 3 4
  // ------------
  // 1 | + + + +
  // 2 | - + + -
  // 3 | - - + +
  // 4 | - + - +

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];

  y_ptr[0] = +x1 +x2 +x3 +x4;
  y_ptr[1] = -x1 +x2 +x3 -x4;
  y_ptr[2] = -x1 -x2 +x3 +x4;
  y_ptr[3] = -x1 +x2 -x3 +x4;

  i = 0;
  loop(4,
      y_ptr[i] *= 0.5; // 1/sqrt(4)
      i += 1;
  );
);

function skew_hadamard_8 (y_ptr, x_ptr)
  local(x1, x2, x3, x4, x5, x6, x7, x8, i)
  global() (
  // https://www.rangevoting.org/SkewHad.html
  //     1 2 3 4 5 6 7 8
  // ---------------------
  // 1 | + + + + + + + +
  // 2 | - + + + - + - -
  // 3 | - - + + + - + -
  // 4 | - - - + + + - +
  // 5 | - + - - + + + -
  // 6 | - - + - - + + +
  // 7 | - + - + - - + +
  // 8 | - + + - + - - +

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];

  y_ptr[0] = +x1 +x2 +x3 +x4 +x5 +x6 +x7 +x8;
  y_ptr[1] = -x1 +x2 +x3 +x4 -x5 +x6 -x7 -x8;
  y_ptr[2] = -x1 -x2 +x3 +x4 +x5 -x6 +x7 -x8;
  y_ptr[3] = -x1 -x2 -x3 +x4 +x5 +x6 -x7 +x8;
  y_ptr[4] = -x1 +x2 -x3 -x4 +x5 +x6 +x7 -x8;
  y_ptr[5] = -x1 -x2 +x3 -x4 -x5 +x6 +x7 +x8;
  y_ptr[6] = -x1 +x2 -x3 +x4 -x5 -x6 +x7 +x8;
  y_ptr[7] = -x1 +x2 +x3 -x4 +x5 -x6 -x7 +x8;

  i = 0;
  loop(8,
      y_ptr[i] *= 0.35355339059327373; // 1/sqrt(8)
      i += 1;
  );
);

function skew_hadamard_12 (y_ptr, x_ptr)
  local(x1, x2, x3, x4, x5, x6, x7, x8, x9, xa, xb, xc, i)
  global() (

  // By using "misc/python/sym_skew_hadamard.py"
  // method on: https://www.rangevoting.org/SkewHad.html
  //      1 2 3 4 5 6 7 8 9 0 1 2
  //    -------------------------
  //  1 | + + + + + + + + + + + +
  //  2 | - + + - + + + - - - + -
  //  3 | - - + + - + + + - - - +
  //  4 | - + - + + - + + + - - -
  //  5 | - - + - + + - + + + - -
  //  6 | - - - + - + + - + + + -
  //  7 | - - - - + - + + - + + +
  //  8 | - + - - - + - + + - + +
  //  9 | - + + - - - + - + + - +
  // 10 | - + + + - - - + - + + -
  // 11 | - - + + + - - - + - + +
  // 12 | - + - + + + - - - + - +

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];
  x9 = x_ptr[8];
  xa = x_ptr[9];
  xb = x_ptr[10];
  xc = x_ptr[11];

  y_ptr[0]  = +x1 +x2 +x3 +x4 +x5 +x6 +x7 +x8 +x9 +xa +xb +xc;
  y_ptr[1]  = -x1 +x2 +x3 -x4 +x5 +x6 +x7 -x8 -x9 -xa +xb -xc;
  y_ptr[2]  = -x1 -x2 +x3 +x4 -x5 +x6 +x7 +x8 -x9 -xa -xb +xc;
  y_ptr[3]  = -x1 +x2 -x3 +x4 +x5 -x6 +x7 +x8 +x9 -xa -xb -xc;
  y_ptr[4]  = -x1 -x2 +x3 -x4 +x5 +x6 -x7 +x8 +x9 +xa -xb -xc;
  y_ptr[5]  = -x1 -x2 -x3 +x4 -x5 +x6 +x7 -x8 +x9 +xa +xb -xc;
  y_ptr[6]  = -x1 -x2 -x3 -x4 +x5 -x6 +x7 +x8 -x9 +xa +xb +xc;
  y_ptr[7]  = -x1 +x2 -x3 -x4 -x5 +x6 -x7 +x8 +x9 -xa +xb +xc;
  y_ptr[8]  = -x1 +x2 +x3 -x4 -x5 -x6 +x7 -x8 +x9 +xa -xb +xc;
  y_ptr[9]  = -x1 +x2 +x3 +x4 -x5 -x6 -x7 +x8 -x9 +xa +xb -xc;
  y_ptr[10] = -x1 -x2 +x3 +x4 +x5 -x6 -x7 -x8 +x9 -xa +xb +xc;
  y_ptr[11] = -x1 +x2 -x3 +x4 +x5 +x6 -x7 -x8 -x9 +xa -xb +xc;

  i = 0;
  loop(12,
      y_ptr[i] *= 0.2886751345948129; // 1/sqrt(12)
      i += 1;
  );
);

// Broken? has weird feedback behavior
function skew_hadamard_16 (y_ptr, x_ptr)
  local (x1, x2, x3, x4, x5, x6, x7, x8, x9, xa, xb, xc, xd, xe, xf, xg, i)
  global() (

  // https://www.rangevoting.org/SkewHad.html
  //      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
  //    ---------------------------------
  //  1 | + + + + + + + + + + + + + + + + // 0 -
  //  2 | - + + + - + - - + - - + - + + + // 7 -
  //  3 | - - + + + - + - + - + - + + + - // 7 -
  //  4 | - - - + + + - + + + - + + + - - // 7 -
  //  5 | - + - - + + + - + - + + + - - + // 7 -
  //  6 | - - + - - + + + + + + + - - + - // 7 -
  //  7 | - + - + - - + + + + + - - + - + // 7 -
  //  8 | - + + - + - - + + + - - + - + + // 7 -
  //  9 | - - - - - - - - + + + + + + + + // 8 -
  // 10 | - + + - + - - - - + + + - + - - // 9 -
  // 11 | - + - + - - - + - - + + + - + - // 9 -
  // 12 | - - + - - - + + - - - + + + - + // 9 -
  // 13 | - + - - - + + - - + - - + + + - // 9 -
  // 14 | - - - - + + - + - - + - - + + + // 9 -
  // 15 | - - - + + - + - - + - + - - + + // 9 -
  // 16 | - - + + - + - - - + + - + - - + // 9 -

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];
  x9 = x_ptr[8];
  xa = x_ptr[9];
  xb = x_ptr[10];
  xc = x_ptr[11];
  xd = x_ptr[12];
  xe = x_ptr[13];
  xf = x_ptr[14];
  xg = x_ptr[15];

  y_ptr[0]  = +x1 +x2 +x3 +x4 +x5 +x6 +x7 +x8 +x9 +xa +xb +xc +xd +xe +xf +xg;
  y_ptr[1]  = -x1 +x2 +x3 +x4 -x5 +x6 -x7 -x8 +x9 -xa -xb +xc -xd +xe +xf +xg;
  y_ptr[2]  = -x1 -x2 +x3 +x4 +x5 -x6 +x7 -x8 +x9 -xa +xb -xc +xd +xe +xf -xg;
  y_ptr[3]  = -x1 -x2 -x3 +x4 +x5 +x6 -x7 +x8 +x9 +xa -xb +xc +xd +xe -xf -xg;
  y_ptr[4]  = -x1 +x2 -x3 -x4 +x5 +x6 +x7 -x8 +x9 -xa +xb +xc +xd -xe -xf +xg;
  y_ptr[5]  = -x1 -x2 +x3 -x4 -x5 +x6 +x7 +x8 +x9 +xa +xb +xc -xd -xe +xf -xg;
  y_ptr[6]  = -x1 +x2 -x3 +x4 -x5 -x6 +x7 +x8 +x9 +xa +xb -xc -xd +xe -xf +xg;
  y_ptr[7]  = -x1 +x2 +x3 -x4 +x5 -x6 -x7 +x8 +x9 +xa -xb -xc +xd -xe +xf +xg;
  y_ptr[8]  = -x1 -x2 -x3 -x4 -x5 -x6 -x7 -x8 +x9 +xa +xb +xc +xd +xe +xf +xg;
  y_ptr[9]  = -x1 +x2 +x3 -x4 +x5 -x6 -x7 -x8 -x9 +xa +xb +xc -xd +xe -xf -xg;
  y_ptr[10] = -x1 +x2 -x3 +x4 -x5 -x6 -x7 +x8 -x9 -xa +xb +xc +xd -xe +xf -xg;
  y_ptr[11] = -x1 -x2 +x3 -x4 -x5 -x6 +x7 +x8 -x9 -xa -xb +xc +xd +xe -xf +xg;
  y_ptr[12] = -x1 +x2 -x3 -x4 -x5 +x6 +x7 -x8 -x9 +xa -xb -xc +xd +xe +xf -xg;
  y_ptr[13] = -x1 -x2 -x3 -x4 +x5 +x6 -x7 +x8 -x9 -xa +xb -xc -xd +xe +xf +xg;
  y_ptr[14] = -x1 -x2 -x3 +x4 +x5 -x6 +x7 -x8 -x9 +xa -xb +xc -xd -xe +xf +xg;
  y_ptr[15] = -x1 -x2 +x3 +x4 -x5 +x6 -x7 -x8 -x9 +xa +xb -xc +xd -xe -xf +xg;

  i = 0;
  loop(16,
      y_ptr[i] *= 0.25; // 1/sqrt(16)
      i += 1;
  );
);

function skew_hadamard_20 (y_ptr, x_ptr)
  local(
    x1,
    x2,
    x3,
    x4,
    x5,
    x6,
    x7,
    x8,
    x9,
    xa,
    xb,
    xc,
    xd,
    xe,
    xf,
    xg,
    xh,
    xi,
    xj,
    xk,
    i
  )
  global() (

  // By using "misc/python/sym_skew_hadamard.py"
  // method on: https://www.rangevoting.org/SkewHad.html
  //      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
  //    ------------------------------------------
  //  1 | + + + + + + + + + + + + + + + + + + + +
  //  2 | - + + - - + + + + - + - + - - - - + + -
  //  3 | - - + + - - + + + + - + - + - - - - + +
  //  4 | - + - + + - - + + + + - + - + - - - - +
  //  5 | - + + - + + - - + + + + - + - + - - - -
  //  6 | - - + + - + + - - + + + + - + - + - - -
  //  7 | - - - + + - + + - - + + + + - + - + - -
  //  8 | - - - - + + - + + - - + + + + - + - + -
  //  9 | - - - - - + + - + + - - + + + + - + - +
  // 10 | - + - - - - + + - + + - - + + + + - + -
  // 11 | - - + - - - - + + - + + - - + + + + - +
  // 12 | - + - + - - - - + + - + + - - + + + + -
  // 13 | - - + - + - - - - + + - + + - - + + + +
  // 14 | - + - + - + - - - - + + - + + - - + + +
  // 15 | - + + - + - + - - - - + + - + + - - + +
  // 16 | - + + + - + - + - - - - + + - + + - - +
  // 17 | - + + + + - + - + - - - - + + - + + - -
  // 18 | - - + + + + - + - + - - - - + + - + + -
  // 19 | - - - + + + + - + - + - - - - + + - + +
  // 20 | - + - - + + + + - + - + - - - - + + - +

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];
  x9 = x_ptr[8];
  xa = x_ptr[9];
  xb = x_ptr[10];
  xc = x_ptr[11];
  xd = x_ptr[12];
  xe = x_ptr[13];
  xf = x_ptr[14];
  xg = x_ptr[15];
  xh = x_ptr[16];
  xi = x_ptr[17];
  xj = x_ptr[18];
  xk = x_ptr[19];

  y_ptr[0]  = +x1 +x2 +x3 +x4 +x5 +x6 +x7 +x8 +x9 +xa +xb +xc +xd +xe +xf +xg +xh +xi +xj +xk;
  y_ptr[1]  = -x1 +x2 +x3 -x4 -x5 +x6 +x7 +x8 +x9 -xa +xb -xc +xd -xe -xf -xg -xh +xi +xj -xk;
  y_ptr[2]  = -x1 -x2 +x3 +x4 -x5 -x6 +x7 +x8 +x9 +xa -xb +xc -xd +xe -xf -xg -xh -xi +xj +xk;
  y_ptr[3]  = -x1 +x2 -x3 +x4 +x5 -x6 -x7 +x8 +x9 +xa +xb -xc +xd -xe +xf -xg -xh -xi -xj +xk;
  y_ptr[4]  = -x1 +x2 +x3 -x4 +x5 +x6 -x7 -x8 +x9 +xa +xb +xc -xd +xe -xf +xg -xh -xi -xj -xk;
  y_ptr[5]  = -x1 -x2 +x3 +x4 -x5 +x6 +x7 -x8 -x9 +xa +xb +xc +xd -xe +xf -xg +xh -xi -xj -xk;
  y_ptr[6]  = -x1 -x2 -x3 +x4 +x5 -x6 +x7 +x8 -x9 -xa +xb +xc +xd +xe -xf +xg -xh +xi -xj -xk;
  y_ptr[7]  = -x1 -x2 -x3 -x4 +x5 +x6 -x7 +x8 +x9 -xa -xb +xc +xd +xe +xf -xg +xh -xi +xj -xk;
  y_ptr[8]  = -x1 -x2 -x3 -x4 -x5 +x6 +x7 -x8 +x9 +xa -xb -xc +xd +xe +xf +xg -xh +xi -xj +xk;
  y_ptr[9]  = -x1 +x2 -x3 -x4 -x5 -x6 +x7 +x8 -x9 +xa +xb -xc -xd +xe +xf +xg +xh -xi +xj -xk;
  y_ptr[10] = -x1 -x2 +x3 -x4 -x5 -x6 -x7 +x8 +x9 -xa +xb +xc -xd -xe +xf +xg +xh +xi -xj +xk;
  y_ptr[11] = -x1 +x2 -x3 +x4 -x5 -x6 -x7 -x8 +x9 +xa -xb +xc +xd -xe -xf +xg +xh +xi +xj -xk;
  y_ptr[12] = -x1 -x2 +x3 -x4 +x5 -x6 -x7 -x8 -x9 +xa +xb -xc +xd +xe -xf -xg +xh +xi +xj +xk;
  y_ptr[13] = -x1 +x2 -x3 +x4 -x5 +x6 -x7 -x8 -x9 -xa +xb +xc -xd +xe +xf -xg -xh +xi +xj +xk;
  y_ptr[14] = -x1 +x2 +x3 -x4 +x5 -x6 +x7 -x8 -x9 -xa -xb +xc +xd -xe +xf +xg -xh -xi +xj +xk;
  y_ptr[15] = -x1 +x2 +x3 +x4 -x5 +x6 -x7 +x8 -x9 -xa -xb -xc +xd +xe -xf +xg +xh -xi -xj +xk;
  y_ptr[16] = -x1 +x2 +x3 +x4 +x5 -x6 +x7 -x8 +x9 -xa -xb -xc -xd +xe +xf -xg +xh +xi -xj -xk;
  y_ptr[17] = -x1 -x2 +x3 +x4 +x5 +x6 -x7 +x8 -x9 +xa -xb -xc -xd -xe +xf +xg -xh +xi +xj -xk;
  y_ptr[18] = -x1 -x2 -x3 +x4 +x5 +x6 +x7 -x8 +x9 -xa +xb -xc -xd -xe -xf +xg +xh -xi +xj +xk;
  y_ptr[19] = -x1 +x2 -x3 -x4 +x5 +x6 +x7 +x8 -x9 +xa -xb +xc -xd -xe -xf -xg +xh +xi -xj +xk;

  i = 0;
  loop(20,
      y_ptr[i] *= 0.22360679774997896; // 1/sqrt(20)
      i += 1;
  );
);

function conference_4 (y_ptr, x_ptr)
  local(x1, x2, x3, x4, i)
  global() (
  // taking the skew hadamard and zeroing the diagonal (identity).
  //     1 2 3 4
  // ------------
  // 1 | 0 + + +
  // 2 | - 0 + -
  // 3 | - - 0 +
  // 4 | - + - 0

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];

  y_ptr[0] = +x2 +x3 +x4;
  y_ptr[1] = -x1 +x3 -x4;
  y_ptr[2] = -x1 -x2 +x4;
  y_ptr[3] = -x1 +x2 -x3;

  i = 0;
  loop(4,
      y_ptr[i] *= 0.5773502691896258; // 1/sqrt(3)
      i += 1;
  );
);

function conference_8 (y_ptr, x_ptr)
  local(x1, x2, x3, x4, x5, x6, x7, x8, i)
  global() (

  // taking the skew hadamard and zeroing the diagonal (identity).
  //     1 2 3 4 5 6 7 8
  // ---------------------
  // 1 | 0 + + + + + + +
  // 2 | - 0 + + - + - -
  // 3 | - - 0 + + - + -
  // 4 | - - - 0 + + - +
  // 5 | - + - - 0 + + -
  // 6 | - - + - - 0 + +
  // 7 | - + - + - - 0 +
  // 8 | - + + - + - - 0

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];

  y_ptr[0] = +x2 +x3 +x4 +x5 +x6 +x7 +x8;
  y_ptr[1] = -x1 +x3 +x4 -x5 +x6 -x7 -x8;
  y_ptr[2] = -x1 -x2 +x4 +x5 -x6 +x7 -x8;
  y_ptr[3] = -x1 -x2 -x3 +x5 +x6 -x7 +x8;
  y_ptr[4] = -x1 +x2 -x3 -x4 +x6 +x7 -x8;
  y_ptr[5] = -x1 -x2 +x3 -x4 -x5 +x7 +x8;
  y_ptr[6] = -x1 +x2 -x3 +x4 -x5 -x6 +x8;
  y_ptr[7] = -x1 +x2 +x3 -x4 +x5 -x6 -x7;

  i = 0;
  loop (8,
    y_ptr[i] *= 0.3779644730092272; // 1 / sqrt(7)
    i += 1;
  );
);

function conference_12 (y_ptr, x_ptr)
  local(x1, x2, x3, x4, x5, x6, x7, x8, x9, xa, xb, xc, i)
  global() (

  // taking the skew hadamard and zeroing the diagonal (identity).
  //      1 2 3 4 5 6 7 8 9 0 1 2
  //    -------------------------
  //  1 | 0 + + + + + + + + + + +
  //  2 | - 0 + - + + + - - - + -
  //  3 | - - 0 + - + + + - - - +
  //  4 | - + - 0 + - + + + - - -
  //  5 | - - + - 0 + - + + + - -
  //  6 | - - - + - 0 + - + + + -
  //  7 | - - - - + - 0 + - + + +
  //  8 | - + - - - + - 0 + - + +
  //  9 | - + + - - - + - 0 + - +
  // 10 | - + + + - - - + - 0 + -
  // 11 | - - + + + - - - + - 0 +
  // 12 | - + - + + + - - - + - 0

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];
  x9 = x_ptr[8];
  xa = x_ptr[9];
  xb = x_ptr[10];
  xc = x_ptr[11];

  y_ptr[0]  = +x2 +x3 +x4 +x5 +x6 +x7 +x8 +x9 +xa +xb +xc;
  y_ptr[1]  = -x1 +x3 -x4 +x5 +x6 +x7 -x8 -x9 -xa +xb -xc;
  y_ptr[2]  = -x1 -x2 +x4 -x5 +x6 +x7 +x8 -x9 -xa -xb +xc;
  y_ptr[3]  = -x1 +x2 -x3 +x5 -x6 +x7 +x8 +x9 -xa -xb -xc;
  y_ptr[4]  = -x1 -x2 +x3 -x4 +x6 -x7 +x8 +x9 +xa -xb -xc;
  y_ptr[5]  = -x1 -x2 -x3 +x4 -x5 +x7 -x8 +x9 +xa +xb -xc;
  y_ptr[6]  = -x1 -x2 -x3 -x4 +x5 -x6 +x8 -x9 +xa +xb +xc;
  y_ptr[7]  = -x1 +x2 -x3 -x4 -x5 +x6 -x7 +x9 -xa +xb +xc;
  y_ptr[8]  = -x1 +x2 +x3 -x4 -x5 -x6 +x7 -x8 +xa -xb +xc;
  y_ptr[9]  = -x1 +x2 +x3 +x4 -x5 -x6 -x7 +x8 -x9 +xb -xc;
  y_ptr[10] = -x1 -x2 +x3 +x4 +x5 -x6 -x7 -x8 +x9 -xa +xc;
  y_ptr[11] = -x1 +x2 -x3 +x4 +x5 +x6 -x7 -x8 -x9 +xa -xb;

  i = 0;
  loop(12,
      y_ptr[i] *= 0.30151134457776363; // 1/sqrt(11)
      i += 1;
  );
);

// Broken? has weird feedback behavior
function conference_16 (y_ptr, x_ptr)
  local (x1, x2, x3, x4, x5, x6, x7, x8, x9, xa, xb, xc, xd, xe, xf, xg, i)
  global() (

  // taking the skew hadamard and zeroing the diagonal (identity).
  //      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
  //    ---------------------------------
  //  1 | 0 + + + + + + + + + + + + + + +
  //  2 | - 0 + + - + - - + - - + - + + +
  //  3 | - - 0 + + - + - + - + - + + + -
  //  4 | - - - 0 + + - + + + - + + + - -
  //  5 | - + - - 0 + + - + - + + + - - +
  //  6 | - - + - - 0 + + + + + + - - + -
  //  7 | - + - + - - 0 + + + + - - + - +
  //  8 | - + + - + - - 0 + + - - + - + +
  //  9 | - - - - - - - - 0 + + + + + + +
  // 10 | - + + - + - - - - 0 + + - + - -
  // 11 | - + - + - - - + - - 0 + + - + -
  // 12 | - - + - - - + + - - - 0 + + - +
  // 13 | - + - - - + + - - + - - 0 + + -
  // 14 | - - - - + + - + - - + - - 0 + +
  // 15 | - - - + + - + - - + - + - - 0 +
  // 16 | - - + + - + - - - + + - + - - 0

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];
  x9 = x_ptr[8];
  xa = x_ptr[9];
  xb = x_ptr[10];
  xc = x_ptr[11];
  xd = x_ptr[12];
  xe = x_ptr[13];
  xf = x_ptr[14];
  xg = x_ptr[15];

  y_ptr[0]  = +x2 +x3 +x4 +x5 +x6 +x7 +x8 +x9 +xa +xb +xc +xd +xe +xf +xg;
  y_ptr[1]  = -x1 +x3 +x4 -x5 +x6 -x7 -x8 +x9 -xa -xb +xc -xd +xe +xf +xg;
  y_ptr[2]  = -x1 -x2 +x4 +x5 -x6 +x7 -x8 +x9 -xa +xb -xc +xd +xe +xf -xg;
  y_ptr[3]  = -x1 -x2 -x3 +x5 +x6 -x7 +x8 +x9 +xa -xb +xc +xd +xe -xf -xg;
  y_ptr[4]  = -x1 +x2 -x3 -x4 +x6 +x7 -x8 +x9 -xa +xb +xc +xd -xe -xf +xg;
  y_ptr[5]  = -x1 -x2 +x3 -x4 -x5 +x7 +x8 +x9 +xa +xb +xc -xd -xe +xf -xg;
  y_ptr[6]  = -x1 +x2 -x3 +x4 -x5 -x6 +x8 +x9 +xa +xb -xc -xd +xe -xf +xg;
  y_ptr[7]  = -x1 +x2 +x3 -x4 +x5 -x6 -x7 +x9 +xa -xb -xc +xd -xe +xf +xg;
  y_ptr[8]  = -x1 -x2 -x3 -x4 -x5 -x6 -x7 -x8 +xa +xb +xc +xd +xe +xf +xg;
  y_ptr[9]  = -x1 +x2 +x3 -x4 +x5 -x6 -x7 -x8 -x9 +xb +xc -xd +xe -xf -xg;
  y_ptr[10] = -x1 +x2 -x3 +x4 -x5 -x6 -x7 +x8 -x9 -xa +xc +xd -xe +xf -xg;
  y_ptr[11] = -x1 -x2 +x3 -x4 -x5 -x6 +x7 +x8 -x9 -xa -xb +xd +xe -xf +xg;
  y_ptr[12] = -x1 +x2 -x3 -x4 -x5 +x6 +x7 -x8 -x9 +xa -xb -xc +xe +xf -xg;
  y_ptr[13] = -x1 -x2 -x3 -x4 +x5 +x6 -x7 +x8 -x9 -xa +xb -xc -xd +xf +xg;
  y_ptr[14] = -x1 -x2 -x3 +x4 +x5 -x6 +x7 -x8 -x9 +xa -xb +xc -xd -xe +xg;
  y_ptr[15] = -x1 -x2 +x3 +x4 -x5 +x6 -x7 -x8 -x9 +xa +xb -xc +xd -xe -xf;

  i = 0;
  loop (16,
      y_ptr[i] *= 0.2581988897471611; // 1/sqrt(15)
      i += 1;
  );
);

function conference_20 (y_ptr, x_ptr)
    local(
    x1,
    x2,
    x3,
    x4,
    x5,
    x6,
    x7,
    x8,
    x9,
    xa,
    xb,
    xc,
    xd,
    xe,
    xf,
    xg,
    xh,
    xi,
    xj,
    xk,
    i
  )
  global() (

  // taking the skew hadamard and zeroing the diagonal (identity).
  //      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
  //    ------------------------------------------
  //  1 | 0 + + + + + + + + + + + + + + + + + + +
  //  2 | - 0 + - - + + + + - + - + - - - - + + -
  //  3 | - - 0 + - - + + + + - + - + - - - - + +
  //  4 | - + - 0 + - - + + + + - + - + - - - - +
  //  5 | - + + - 0 + - - + + + + - + - + - - - -
  //  6 | - - + + - 0 + - - + + + + - + - + - - -
  //  7 | - - - + + - 0 + - - + + + + - + - + - -
  //  8 | - - - - + + - 0 + - - + + + + - + - + -
  //  9 | - - - - - + + - 0 + - - + + + + - + - +
  // 10 | - + - - - - + + - 0 + - - + + + + - + -
  // 11 | - - + - - - - + + - 0 + - - + + + + - +
  // 12 | - + - + - - - - + + - 0 + - - + + + + -
  // 13 | - - + - + - - - - + + - 0 + - - + + + +
  // 14 | - + - + - + - - - - + + - 0 + - - + + +
  // 15 | - + + - + - + - - - - + + - 0 + - - + +
  // 16 | - + + + - + - + - - - - + + - 0 + - - +
  // 17 | - + + + + - + - + - - - - + + - 0 + - -
  // 18 | - - + + + + - + - + - - - - + + - 0 + -
  // 19 | - - - + + + + - + - + - - - - + + - 0 +
  // 20 | - + - - + + + + - + - + - - - - + + - 0

  x1 = x_ptr[0];
  x2 = x_ptr[1];
  x3 = x_ptr[2];
  x4 = x_ptr[3];
  x5 = x_ptr[4];
  x6 = x_ptr[5];
  x7 = x_ptr[6];
  x8 = x_ptr[7];
  x9 = x_ptr[8];
  xa = x_ptr[9];
  xb = x_ptr[10];
  xc = x_ptr[11];
  xd = x_ptr[12];
  xe = x_ptr[13];
  xf = x_ptr[14];
  xg = x_ptr[15];
  xh = x_ptr[16];
  xi = x_ptr[17];
  xj = x_ptr[18];
  xk = x_ptr[19];

  y_ptr[0]  = +x2 +x3 +x4 +x5 +x6 +x7 +x8 +x9 +xa +xb +xc +xd +xe +xf +xg +xh +xi +xj +xk;
  y_ptr[1]  = -x1 +x3 -x4 -x5 +x6 +x7 +x8 +x9 -xa +xb -xc +xd -xe -xf -xg -xh +xi +xj -xk;
  y_ptr[2]  = -x1 -x2 +x4 -x5 -x6 +x7 +x8 +x9 +xa -xb +xc -xd +xe -xf -xg -xh -xi +xj +xk;
  y_ptr[3]  = -x1 +x2 -x3 +x5 -x6 -x7 +x8 +x9 +xa +xb -xc +xd -xe +xf -xg -xh -xi -xj +xk;
  y_ptr[4]  = -x1 +x2 +x3 -x4 +x6 -x7 -x8 +x9 +xa +xb +xc -xd +xe -xf +xg -xh -xi -xj -xk;
  y_ptr[5]  = -x1 -x2 +x3 +x4 -x5 +x7 -x8 -x9 +xa +xb +xc +xd -xe +xf -xg +xh -xi -xj -xk;
  y_ptr[6]  = -x1 -x2 -x3 +x4 +x5 -x6 +x8 -x9 -xa +xb +xc +xd +xe -xf +xg -xh +xi -xj -xk;
  y_ptr[7]  = -x1 -x2 -x3 -x4 +x5 +x6 -x7 +x9 -xa -xb +xc +xd +xe +xf -xg +xh -xi +xj -xk;
  y_ptr[8]  = -x1 -x2 -x3 -x4 -x5 +x6 +x7 -x8 +xa -xb -xc +xd +xe +xf +xg -xh +xi -xj +xk;
  y_ptr[9]  = -x1 +x2 -x3 -x4 -x5 -x6 +x7 +x8 -x9 +xb -xc -xd +xe +xf +xg +xh -xi +xj -xk;
  y_ptr[10] = -x1 -x2 +x3 -x4 -x5 -x6 -x7 +x8 +x9 -xa +xc -xd -xe +xf +xg +xh +xi -xj +xk;
  y_ptr[11] = -x1 +x2 -x3 +x4 -x5 -x6 -x7 -x8 +x9 +xa -xb +xd -xe -xf +xg +xh +xi +xj -xk;
  y_ptr[12] = -x1 -x2 +x3 -x4 +x5 -x6 -x7 -x8 -x9 +xa +xb -xc +xe -xf -xg +xh +xi +xj +xk;
  y_ptr[13] = -x1 +x2 -x3 +x4 -x5 +x6 -x7 -x8 -x9 -xa +xb +xc -xd +xf -xg -xh +xi +xj +xk;
  y_ptr[14] = -x1 +x2 +x3 -x4 +x5 -x6 +x7 -x8 -x9 -xa -xb +xc +xd -xe +xg -xh -xi +xj +xk;
  y_ptr[15] = -x1 +x2 +x3 +x4 -x5 +x6 -x7 +x8 -x9 -xa -xb -xc +xd +xe -xf +xh -xi -xj +xk;
  y_ptr[16] = -x1 +x2 +x3 +x4 +x5 -x6 +x7 -x8 +x9 -xa -xb -xc -xd +xe +xf -xg +xi -xj -xk;
  y_ptr[17] = -x1 -x2 +x3 +x4 +x5 +x6 -x7 +x8 -x9 +xa -xb -xc -xd -xe +xf +xg -xh +xj -xk;
  y_ptr[18] = -x1 -x2 -x3 +x4 +x5 +x6 +x7 -x8 +x9 -xa +xb -xc -xd -xe -xf +xg +xh -xi +xk;
  y_ptr[19] = -x1 +x2 -x3 -x4 +x5 +x6 +x7 +x8 -x9 +xa -xb +xc -xd -xe -xf -xg +xh +xi -xj;

  i = 0;
  loop(20,
      y_ptr[i] *= 0.22941573387056174; // 1/sqrt(19)
      i += 1;
  );
);


function get_rt60_gain (rt60sec, delay_spls, srate) local (rate) global ()(
    rate = srate / delay_spls;
    // -6.907755278982137 = log(-60dB), log(pow(10,-60/20))
    exp (-6.907755278982137 * (delay_spls / (rt60sec * srate)));
);

function get_rt60_gain(
  dst_ptr, delays_spls_ptr, rt60sec, rnd_factor, n_channels, srate
  )
  local (i, rnd_max, rnd) (

    rnd_max = rt60sec * rnd_factor;
    i = 0;
    // subs
    loop (n_channels,
        rnd = rnd_table.ptr[10 + i] - 0.5; //-0.5 because the range is 0 to 1
        dst_ptr[i] = get_rt60_gain(
            rt60sec + rnd * rnd_max, delays_spls_ptr[i], srate
            );
        i += 1;
    );
);

function make_primes_table (dst*, minv, maxv)
  local (i, v, prime, n, n_guess)
  global() (
  // not winning a competition with these, but easy code for the intended range.

  // guesstimate of how many primes can happen. totally unnecessary as this is
  // single threaded and the memory pool is already preallocated, but still done
  // for when ported.
  minv |= 0;
  maxv |= 0;
  n_guess = maxv - minv;
  n_guess = ceil (n_guess / 2); // even numbers
  n_guess = ceil (n_guess * 2 / 3); // divisible by three
  dst.array_init (n_guess);
  n = 0;
  v = minv;
  while (v < maxv) (
    prime = 1;
    i = 2;
    while (i <= (v / 2) && (prime == 1))(
      prime = (v % i) != 0;
      i += 1;
    );
    (prime == 1) ? (
      dst.ptr[n] = v;
      n += 1;
    );
    v += 1;
  );
  // return back unused memory, report correct size
  dst.array_size_drop_to (n);
);

function get_delay_length_samples (dst_ptr, n_delays, splsmin, splsmax)
  global ()
  local (dist, i, ok) global (primes*)(

  make_primes_table (this.tmp_primes, splsmin, splsmax);

  ok = this.tmp_primes.size >= n_delays;
  ok ? (
    dist = (this.tmp_primes.size / (n_delays - 1)) | 0;
    i = 0;
    loop(n_delays,
      dst_ptr[i] = this.tmp_primes.ptr[i * dist];
      i += 1;
    );
  );
  // free the memory.
  this.tmp_primes.array_size_drop_to (0);
  ok;
);


// https://ccrma.stanford.edu/~jos/pasp/Prime_Power_Delay_Line.html
// This has prime_idx to get an offset to the primes list and a rounding
// factor to allow imperfections.
function get_delay_length_samples(
  dst_ptr, n_delays, pathmin, pathmax, prime_idx, rounding_factor, srate
  )
  local (dmin, dmax, i, v, primes_offs, ok, ln_ratio)
  global (primes*)(

  dmin = srate * pathmin * (1 / 343); // 343 = C = soundspeed
  dmax = srate * pathmax * (1 / 343);

  ok = get_delay_length_samples (dst_ptr, n_delays, dmin, dmax);
  ok = 0;
  (ok == 0) ? (
    primes_offs = 12;
    i = 0;
    ln_ratio = log (dmax / dmin);
    loop (n_delays,
      v = dmin * exp ((i / (n_delays - 1)) * ln_ratio);
      v = (log (v) / log (primes.ptr[prime_idx + i]) * rounding_factor) + 0.5;
      v |= 0; // to integer
      v /= rounding_factor;
      dst_ptr[i] = pow (primes.ptr[prime_idx + i], v);
      i += 1;
    );
  );
);

function to_prime (array_ptr, array_size) global() local (maxv, minv, result, i, j) (
  maxv = range_get_max (array_ptr, array_size);
  minv = range_get_min (array_ptr, array_size);
  make_primes_table (this.tmp_primes, minv, maxv + 1);
  // this could be a more efficient search algorithm than linear, as of now this
  // function is only needed for small sizes at startup time.
  j = 0;
  loop (array_size,
    result = 0;
    i = 0;
    // the last element will be rounded backwards
    while (
      result = this.tmp_primes.ptr[i];
      i += 1;
      i < this.tmp_primes.size && result < array_ptr[j];
    );
    array_ptr[j] = result;
    j += 1;
  );
  // free the memory.
  this.tmp_primes.array_size_drop_to (0);
);

function to_prime (array*) global() (
  to_prime (array.ptr, array.size);
);

/*
TODO: Very broken!
//------------------------------------------------------------------------------
function get_delay_length_samples (dst_ptr, n_delays, pathmin, pathmax)
  local (
    dmin,
    dmax,
    ratio,
    ratio_min,
    ratio_max,
    ratio_curr,
    notfound,
    i,
    prime_offset,
    scale
    )(

    dmin = srate * pathmin * (1 / 343); // 343 = C = soundspeed
    dmax = srate * pathmax * (1 / 343);

    ratio = dmax / dmin;
    ratio_min = ratio * 0.90;
    ratio_max = ratio * 1.10;


    notfound = 1;
    i = n_delays - 1;
    // scan for prime numbers which having a similar ratio
    while (i < primes.size && notfound) (
        ratio_curr = primes[i] / primes[i - n_delays - 1];
        notfound = ratio_curr >= ratio_min && ratio_curr <= ratio_max ? 0 : 1;
        i += 1;
    );

    (i != primes.size) ? (
        prime_offset = i - n_delays - 1;
    ) : (
        // this will we mostly wrong for n_delays = 2, as the maximum ratio is
        // 3/2, but the range increases for regular delay line widths, like e.g
        // for 8 the maximum range is more acceptable.

        // the ratio was too small, setting to the biggest ratio available: the
        // first prime numbers.
        prime_offset = ratio > ratio_curr ? 0 : i - n_delays - 1;
    );

    // DEBUG
    _rat = ratio;
    _ratc = ratio_curr;

    // setting the smallest value as reference, could be the biggest...
    scale = dmin / primes[i];

    i = 0;
    loop (n_delays,
       dst_ptr[i] = primes.ptr[prime_offset + i] * scale;
       i += 1;
    );
);
//------------------------------------------------------------------------------
*/
