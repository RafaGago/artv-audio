desc:FIR test

slider1:freq=10000<5000,24000,1>Freq
slider2:taps=129<4,1024,1>taps
slider3:att=-90<0,300,1>Att
slider4:minphase=0<0,1,1{Off,On}>Minphase

import _core.jsfx-inc
import _fir.jsfx-inc

@init

OVERSAMPLE_RATIO = 2;

outs.array_init (2);
tmp.array_init (OVERSAMPLE_RATIO * 8);

SRC_TAPS_BRANCH = 32;
SRC_CUTOFF = 7600;
SRC_KAISER_ATT_DB = 140;

src.ratio = (srate / 22050) | 0;
src.ratio_mask = src.ratio - 1;

get_kaiser_lp_kernel(
  src.kernel,
  SRC_CUTOFF,
  srate,
  src.ratio * taps,
  SRC_KAISER_ATT_DB,
  0,
  minphase
  );

src.down.fir_2ch_decimator_init (src.kernel, src.ratio);
src.up.fir_2ch_interpolator_init (src.kernel, src.ratio);

src.ins.array_init (src.ratio * 2); // interleaved ins
src.outs.array_init (src.ratio * 2); // interleaved outs
src.spls.array_init (2);

src.ins.array_clear();
src.outs.array_clear();
src.spls.array_clear();

// hack to not consume extra memory, normally these filters have fixed
// parameters and are intialized on @init (setting)

realloc_memtop = _memtop_ptr;

@slider

_memtop_ptr = realloc_memtop;

// actual reset

frac = taps % 2 == 0 ? 0.5 : 0.;
get_kaiser_lp_kernel (kernel, freq, srate, taps, att, frac, minphase);
lp.fir_2ch_init (kernel);

group_delay_base = get_group_delay (kernel, 700 / srate);
group_delay_base_corr = group_delay_base | 0;

frac = taps % 2 == 0 ? 1 / pow (2, OVERSAMPLE_RATIO * 4) : 0.;
//frac = taps % 2 == 0 ? -0.5 : 0.;
get_kaiser_lp_kernel(
    os_kernel, freq, srate * OVERSAMPLE_RATIO, taps, att, frac, minphase
    );

group_delay_os = get_group_delay (kernel, 700 / srate);
group_delay_os_corr = (group_delay_os + 0.5) | 0;

decimator.fir_2ch_decimator_init (os_kernel, OVERSAMPLE_RATIO);
interpolator.fir_2ch_interpolator_init (os_kernel, OVERSAMPLE_RATIO);

@sample
(0) ? (
  lp.fir_2ch_tick (outs.ptr, spl0, spl1);
);
(0) ? (
  interpolator.fir_2ch_interpolator_tick (tmp.ptr, spl0, spl1);
  decimator.fir_2ch_decimator_tick (outs.ptr, tmp.ptr);
  spl0 = outs.ptr[0];
  spl1 = outs.ptr[1];
);

(1) ? (
  src.pos = spl_counter & src.ratio_mask;

  src.ins.ptr[src.pos * 2] = spl0;
  src.ins.ptr[src.pos * 2 + 1] = spl1;

  spl0 = src.outs.ptr[src.pos * 2];
  spl1 = src.outs.ptr[src.pos * 2 + 1];

  src.pos == src.ratio_mask ? ( // enough samples to proceed downsampling and running an iteration

    src.down.fir_2ch_decimator_tick (src.spls.ptr, src.ins.ptr);
    l = src.spls.ptr[0];
    r = src.spls.ptr[1];
    src.up.fir_2ch_interpolator_tick (src.outs.ptr, l, r);
 );
);

spl_counter += 1;
