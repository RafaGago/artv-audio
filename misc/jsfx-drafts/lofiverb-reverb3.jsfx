slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:damp=0.3<0,1,0.01> Damping
slider7:hp=0<0,1,0.01> HP

slider9:stereo=1<-1,1, 0.01> Stereo

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<0, 30, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

// ratios starting point
// http://www.voxangelica.net/transfer/magic%20numbers%20for%20reverb%20design%203b.pdf
//
// Not really used, but at least this script provides set of primes to do manual
// tuning work.
//
// #!/usr/bin/env python
// from math import *
// import sympy as sp
//
// def print_delay(v):
//   print (f'// {v}[{sp.prevprime (v)},{sp.nextprime (v)}]')
//
// def get_start_times(del_spls, n_ap):
//   def f(x):
//     return 1 / (x + 1 - log(2))
//   print_delay(del_spls)
//   for i in range (n_ap):
//     print_delay (del_spls * f (i + 1))
//
// def get_start_times2(del_spls, n_ap):
//   print_delay(del_spls)
//   print_delay(del_spls / 2)
//   for i in range (n_ap):
//     idx = int(i / 2) + 1
//     if (i % 2) == 0:
//       print_delay (del_spls * (2 / (1 + 2 * idx)))
//     else:
//       print_delay (del_spls * (4 / (3 + 2 * idx)))
//
// get_start_times2(12000, 102)

// golden ratio helper
// #!/usr/bin/env python
// from math import *
// import sympy as sp
//
// import argparse
//
// def get_args():
//     parser = argparse.ArgumentParser()
//     parser.add_argument("start", type=int, help='smallest in the series')
//     parser.add_argument("count", type=int, help='count in the series')
//     parser.add_argument("--nonprime", default=False, type=bool, help='maximum of features',)
//     opt = parser.parse_args()
//     return opt
//
// def golden_ratio_series(start, count, nonprime):
//   ret = []
//   curr = start
//   for _ in range (count):
//     append = curr;
//     if not nonprime:
//       append = [sp.prevprime (curr),sp.nextprime (curr)]
//
//     ret.append (append)
//     curr *= 1.61803398874989484820458683436563811772030917980576 # way over double...
//   return ret
//
// def main():
//     args = get_args()
//     print (golden_ratio_series(args.start, args.count, args.nonprime))
//
// if __name__ == "__main__":
//     main()

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

fdn1.array_init (16);
fdn2.array_init (16);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 2;
lfo.lfo_bank_init (n_lfos, 1);
lfo.ret.array_init (n_lfos);
lfo.lfo_bank_reset_phase (0);

er_lfo.lfo_bank_init (n_lfos, 1);
er_lfo.ret.array_init (n_lfos);
er_lfo.lfo_bank_reset_phase (0);

@slider

lfo.lfo_bank_reset_freq (0, 0.2 + mod * .3, k.src.srate);
er_lfo.lfo_bank_reset_freq (0, 0.2 + mod * 0.5, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

decay = decay_p * 0.75;

@sample

function do_diffusion_round(idx1, idx2) local() (
  easy_fdn_delay (
    fdn2,
    primes.ptr[idx1 + 0],
    primes.ptr[idx1 + 1],
    primes.ptr[idx1 + 2],
    primes.ptr[idx1 + 3],
    primes.ptr[idx1 + 4],
    primes.ptr[idx1 + 5],
    primes.ptr[idx1 + 6],
    primes.ptr[idx1 + 7],
    primes.ptr[idx1 + 8],
    primes.ptr[idx1 + 9],
    primes.ptr[idx1 + 10],
    primes.ptr[idx1 + 11],
    primes.ptr[idx1 + 12],
    primes.ptr[idx1 + 13],
    primes.ptr[idx1 + 14],
    primes.ptr[idx1 + 15]
    );
  hadamard_16 (fdn1.ptr, fdn2.ptr);

  easy_fdn_delay (
    fdn1,
    primes.ptr[idx2 + 15],
    primes.ptr[idx2 + 14],
    primes.ptr[idx2 + 13],
    primes.ptr[idx2 + 12],
    primes.ptr[idx2 + 11],
    primes.ptr[idx2 + 10],
    primes.ptr[idx2 + 9],
    primes.ptr[idx2 + 8],
    primes.ptr[idx2 + 7],
    primes.ptr[idx2 + 6],
    primes.ptr[idx2 + 5],
    primes.ptr[idx2 + 4],
    primes.ptr[idx2 + 3],
    primes.ptr[idx2 + 2],
    primes.ptr[idx2 + 1],
    primes.ptr[idx2 + 0]
    );
  hadamard_16 (fdn2.ptr, fdn1.ptr);
);


// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  m = (src.ins.ptr[0] + src.ins.ptr[1]) * 0.5;
  s = (src.ins.ptr[0] - src.ins.ptr[1]) * 0.5;

  er_lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);
  lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);

  // end of boilerplate, reverb algo
  fdn1.array_clear();
  fdn1.ptr[0] = m;
  fdn1.ptr[3] = s;

  i = 0;
  hadamard_16 (fdn2.ptr, fdn1.ptr);

  do_diffusion_round (12, 14);
  do_diffusion_round (15, 14);

  l = fdn2.ptr[2] * 0.25;
  r = fdn2.ptr[5] * 0.25;

  do_diffusion_round (14, 16);
  do_diffusion_round (27, 21);
  ch = fdn2.ptr[2] * character;
  do_diffusion_round (27, 6);

  l += fdn2.ptr[11] * 0.0625;
  r += fdn2.ptr[7] * 0.0625;
  t = fdn2.ptr[6] * (1 - character) + ch;

// block1
// [[401, 409], [227, 229], [157, 163], 526]
// [402.4936796060741, 228.01628069521863, 159.06362596720192, 526]
// block2
// [[131, 137], [73, 79], [47, 53], 175]
// [133.90949416551896, 75.86092988909365, 52.92040787882193, 175]
// block3
// [[43, 47], [23, 29], [17, 19], 58]
// [44.381432352000566, 25.142479620385323, 17.539335182695268, 58]

//  t = ap3 (t + fb, 409, 227, 163, 0.4, -0.25, 0.15);
  t = ap (t + fb, 403 ,0.5 * decay_p);
  t = ap (t, 227, -0.5 * decay_p);
  t = ap (t, 159, 0.5 * decay_p);
  t = delay_mod (t, 526, lfo.ret.ptr[0], mod * 29);
  t *= 0.6 + 0.15 * decay_p; // causes DC!
  t = dampfilter (t, 0.6 + 0.25 * damp);
//  t = ap3 (t, 131, 79, 53, 0.6, 0.13, -0.15);
  t = ap (t, 134, -0.5);
  t = ap (t, 78, 0.4);
  t = ap (t, 44, -0.4);
  t = delay_mod (t, 175 , lfo.ret.ptr[1], mod * 17);
  t *= 0.6 + 0.15 * decay_p;
  t = ap (t, 43, -0.4);
  t = ap (t, 29, 0.4);
  t = ap (t, 19, -0.4);
  t = delay (t, 50);
  fb = t * (0.6 + 0.15 * decay_p);

  l += t;
  r += t;

  // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
