//desc: large hall
slider1:decay_p=0.95<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=-6<-40, 12,0.1> Wet dB
slider20:db_dry=-60<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc
import _filters.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

mtxa.array_init (8);
mtxb.array_init (8);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 1;
lfo1.lfo_bank_init (n_lfos, 1);
lfo1.ret.array_init (n_lfos);
lfo1.lfo_bank_reset_phase (0);

lfo2.lfo_bank_init (n_lfos, 1);
lfo2.ret.array_init (n_lfos);
lfo2.lfo_bank_reset_phase (0);

lfo3.lfo_bank_init (n_lfos, 1);
lfo3.ret.array_init (n_lfos);
lfo3.lfo_bank_reset_phase (0);

eq1l.svf_bell (450, 0.78, 3, k.src.srate);
eq1r.svf_bell (450, 0.78, 3, k.src.srate);

function bipolar_rand(x)(
  rand (x * 2) - x;
);

function bipolar_rand(minv, maxv) global() local(x) (
  x = bipolar_rand (maxv - minv);
  (x > 0) ? x + minv : x - minv;
);

function rnd_init(idx) local(ste) (
  (idx < 4) ? (
  this.d1 = prime_floor (278 + floor(rand(50)));
  ) :
  (idx < 8) ? (
  this.d1 = prime_floor (333 + floor(rand(50)));
  ) : (
  this.d1 = prime_floor (417 + floor(rand(50)));
  );
  this.d2 = prime_floor ((this.d1 / 1.618) + bipolar_rand (40));
  //this.d3 = prime_floor (50 + (this.d2 / 1.618) + bipolar_rand (30));
  this.dd = prime_floor (this.d1 * 1.618 + bipolar_rand (78));
  this.k1 = 0.27 * ((rand(1) < 0.5) ? -1 : 1);
  this.k2 = 0.16 * ((rand(1) < 0.5) ? -1 : 1);
  //this.k3 = 0.05 * ((rand(1) < 0.5) ? -1 : 1);
  this.tap_l = floor (32 + rand (this.d1 - 32));
  this.fac_l = bipolar_rand (0.1, 1);
  this.tap_r = floor (max (32, this.tap_l + bipolar_rand (37)));
  this.fac_r = (1 - abs (this.fac_l)) * ((rand(1) < 0.5) ? 1 : 1);
);

function run_block(tank, sig, decay, lfo, lfo_spls) (
  tank += sig;
  //tank = ap3 (tank, this.d1, this.d2, this.d3, this.k1, this.k2, this.k3);
  tank = ap2 (tank, this.d1, this.d2, this.k1, this.k2, lfo, lfo_spls);
  tank = delay (tank, this.dd);
  tank *= decay;
);


function run_block(tank, sig, decay) (
  tank += sig;
  //tank = ap3 (tank, this.d1, this.d2, this.d3, this.k1, this.k2, this.k3);
  tank = ap2 (tank, this.d1, this.d2, this.k1, this.k2);
  tank = delay (tank, this.dd);
  tank *= decay;
);

function get_tapl(idx) (
  easyapv_get (idx,  this.tap_l) * this.fac_l;
);

function get_tapr(idx) (
  easyapv_get (idx,  this.tap_r) * this.fac_r;
);

(0) ? (
b1.rnd_init(0);
b2.rnd_init(1);
b3.rnd_init(2);
b4.rnd_init(3);
b5.rnd_init(4);
b6.rnd_init(5);
b7.rnd_init(6);
b8.rnd_init(7);
b9.rnd_init(8);
b10.rnd_init(9);
b11.rnd_init(10);
b12.rnd_init(11);
) : (

coeff1 = 0.27;
coeff2 = 0.16;

// as of now exported using tedious manual OCR work with gImageReader
b1.d1    = 281;
b1.d2    = 199;
b1.dd    = 487;
b1.fac_l = -0.58830350534718;
b1.fac_r = 0.41169649465282;
b1.k1    = coeff1;
b1.k2    = -coeff2;
b1.tap_l = 65;
b1.tap_r = 63;
b2.d1    = 317;
b2.d2    = 173;
b2.dd    = 547;
b2.fac_l = -0.49055438174181;
b2.fac_r = 0.50944561825819;
b2.k1    = coeff1;
b2.k2    = coeff2;
b2.tap_l = 284;
b2.tap_r = 257;
b3.d1    = 307;
b3.d2    = 179;
b3.dd    = 503;
b3.fac_l = -0.79811344337606;
b3.fac_r = 0.20188655662304;
b3.k1    = -coeff1;
b3.k2    = coeff2;
b3.tap_l = 115;
b3.tap_r = 97;
b4.d1    = 293;
b4.d2    = 139;
b4.dd    = 443;
b4.fac_l = 0.17068128943692;
b4.fac_r = 0.82931871056308;
b4.k1    = coeff1;
b4.k2    = coeff2;
b4.tap_l = 113;
b4.tap_r = 91;
b5.d1    = 359;
b5.d2    = 251;
b5.dd    = 587;
b5.fac_l = 0.11278212701734;
b5.fac_r = 0.88721787298266;
b5.k1    = -coeff1;
b5.k2    = -coeff2;
b5.tap_l = 124;
b5.tap_r = 101;
b6.d1    = 337;
b6.d2    = 199;
b6.dd    = 571;
b6.fac_l = -0.89145277461304;
b6.fac_r = 0.10854722538696;
b6.k1    = coeff1;
b6.k2    = -coeff2;
b6.tap_l = 273;
b6.tap_r = 240;
b7.d1    = 359;
b7.d2    = 229;
b7.dd    = 617;
b7.fac_l = -0.80255597312994;
b7.fac_r = 0.19744402687006;
b7.k1    = -coeff1;
b7.k2    = -coeff2;
b7.tap_l = 146;
b7.tap_r = 172;
b8.d1    = 373;
b8.d2    = 241;
b8.dd    = 613;
b8.fac_l = -0.85686479435695;
b8.fac_r = 0.14313520564305;
b8.k1    = -coeff1;
b8.k2    = -coeff2;
b8.tap_l = 322;
b8.tap_r = 294;
b9.d1    = 433;
b9.d2    = 281;
b9.dd    = 691;
b9.fac_l = -0.87407659806173;
b9.fac_r = 0.12592340193827;
b9.k1    = -coeff1;
b9.k2    = coeff2;
b9.tap_l = 355;
b9.tap_r = 345;
b10.d1    = 449;
b10.d2    = 277;
b10.dd    = 733;
b10.fac_l = -0.20988618447676;
b10.fac_r = 0.79011381552324;
b10.k1    = -coeff1;
b10.k2    = coeff2;
b10.tap_l = 143;
b10.tap_r = 164;
b11.d1    = 449;
b11.d2    = 293;
b11.dd    = 743;
b11.fac_l = -0.30971853768214;
b11.fac_r = 0.69028146231786;
b11.k1    = -coeff1;
b11.k2    = -coeff2;
b11.tap_l = 38;
b11.tap_r = 62;
b12.d1    = 421;
b12.d2    = 233;
b12.dd    = 709;
b12.fac_l = -0.24329721095117;
b12.fac_r = 0.75670278904883;
b12.k1    = -coeff1;
b12.k2    = coeff2;
b12.tap_l = 167;
b12.tap_r = 151;
);


//@serialize
//
//(file_avail(0) < 0) ? (
  // write mode
//  sprintf (#str, "b1.d1 = %f", b1.d1);
//  file_string (0, #str);
//);

@slider

lfo1.lfo_bank_reset_freq (0, 1.27 - mod * 0.53, k.src.srate);
lfo2.lfo_bank_reset_freq (0, 1.51 - mod * 0.43, k.src.srate);
lfo3.lfo_bank_reset_freq (0, 1.74 - mod * 0.37, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

decay = fastgrowth (decay_p);
decay = 0.4 + decay * 0.59;

//mod_amt = fastgrowth (mod);
mod_amt = mod;

flo = 0.80 + lo * lo * 0.1;
glo = 0.75 + lo * 0.245;
fhi1 = 0.9  - hi * hi * 0.4;
fhi2 = 0.93 - hi * hi * 0.4;
fhi3 = 0.95 - hi * hi * 0.45;
ghi = 0.85 + hi * 0.10 + decay * 0.05;

@sample


// decay = 1;

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  lfo1.lfo_bank_tick_sin (lfo1.ret.ptr, 0);
  lfo2.lfo_bank_tick_sin (lfo2.ret.ptr, 0);
  lfo3.lfo_bank_tick_sin (lfo3.ret.ptr, 0);

  // halving an additional time to leave headroom
  li = src.ins.ptr[0] * 0.5;
  ri = src.ins.ptr[1] * 0.5;

  li = fil1.lp (li, 0.15);
  li = fil2.hp (li, 0.99);
  ri = fir1.lp (ri, 0.15);
  ri = fir2.hp (ri, 0.99);

  m = (li + ri) * 0.5;
  s = (li - ri) * 0.5;

  tank = b1.run_block (tank, m, decay, lfo1.ret.ptr[0] * mod_amt, 43);
  i1 = easyapv_del_idx;
  tank = f1.crossv2 (tank, flo, fhi1, glo, ghi);
  tank = b2.run_block (tank, 0, decay);
  i2 = easyapv_del_idx;
  tank = b3.run_block (tank, li, decay);
  i3 = easyapv_del_idx;
  tank = b4.run_block (tank, 0, decay);
  i4 = easyapv_del_idx;

  tank = b5.run_block (tank, m, decay, lfo2.ret.ptr[0] * mod_amt, 37);
  i5 = easyapv_del_idx;
  tank = f2.crossv2 (tank, flo, fhi2, glo, ghi);
  tank = b6.run_block (tank, 0, decay);
  i6 = easyapv_del_idx;
  tank = b7.run_block (tank, ri, decay);
  i7 = easyapv_del_idx;
  tank = b8.run_block (tank, 0, decay);
  i8 = easyapv_del_idx;

  tank = b9.run_block (tank, m, decay, lfo3.ret.ptr[0] * mod_amt, 27);
  i9 = easyapv_del_idx;
  tank = f3.crossv2 (tank, flo, fhi3, glo, ghi);
  tank = b10.run_block (tank, 0, decay);
  i10 = easyapv_del_idx;
  tank = b11.run_block (tank, -m, decay);
  i11 = easyapv_del_idx;
  tank = b12.run_block (tank, 0, decay);
  i12 = easyapv_del_idx;

  l1 = r1 = l2 = r2 = 0;

  l1 += b1.get_tapl (i1 - 1);
  r2 += b1.get_tapr (i1 - 1);
  l2 += b2.get_tapl (i2 - 1);
  r1 += b2.get_tapr (i2 - 1);
  l1 += b3.get_tapl (i3 - 1);
  r2 += b3.get_tapr (i3 - 1);
  l2 += b4.get_tapl (i4 - 1);
  r1 += b4.get_tapr (i4 - 1);
  l1 += b5.get_tapl (i5 - 1);
  r2 += b5.get_tapr (i5 - 1);
  l2 += b6.get_tapl (i6 - 1);
  r1 += b6.get_tapr (i6 - 1);
  l1 += b7.get_tapl (i7 - 1);
  r2 += b7.get_tapr (i7 - 1);
  l2 += b8.get_tapl (i8 - 1);
  r1 += b8.get_tapr (i8 - 1);
  l1 += b9.get_tapl (i9 - 1);
  r2 += b9.get_tapr (i9 - 1);
  l2 += b10.get_tapl (i10 - 1);
  r1 += b10.get_tapr (i10 - 1);
  l1 += b11.get_tapl (i11 - 1);
  r2 += b11.get_tapr (i11 - 1);
  l2 += b12.get_tapl (i12 - 1);
  r1 += b12.get_tapr (i12 - 1);

  l = ep_crossfade(0.1 + character * 0.9, l1, l2);
  r = ep_crossfade(0.1 + character * 0.9, r1, r2);

  // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  l = eq1l.svf_tick (l);
  r = eq1r.svf_tick (r);

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
