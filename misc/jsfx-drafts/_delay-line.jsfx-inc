import _core.jsfx-inc

@init

// this might belong somewhere else
function interp_catmull_rom (y0, y1, y2, y3, x)
  local (r, x2, x3) global()(
  x2 = x * x;
  x3 = x2 * x;

  r = x3 * (-y0 + 3 * y1 - 3 * y2 + y3) * 0.5;
  r += x2 * (2 * y0 - 5 * y1 + 4 * y2 - y3) * 0.5;
  r += x * (-y0 + y2) * 0.5;
  r += y1;
);

function delay_line_init (size, n_channels) global() (
    size |= 0;
    this.arr.array_init (size * n_channels);
    this.n_channels = n_channels;
    this.mask = size - 1;
    this.pos = this.mask;
);

function _delay_line_get_pos (pos, channel)
    local (offset) global()(
    offset = channel * (this.mask + 1);
    offset + ((this.pos + pos) & this.mask);
);

function delay_line_set (value, pos, channel) (
    this.arr.ptr[this._delay_line_get_pos (pos, channel)] = value;
);

function delay_line_set_all (ptr, pos) local (i) global()(
    i = 0;
    loop (this.n_channels,
        this.delay_line_set (ptr[i], pos, i);
        i += 1;
    );
);

function delay_line_get (pos, channel) global()(
    this.arr.ptr[this._delay_line_get_pos (pos, channel)];
);

function delay_line_get_all (dst_ptr, times_ptr)
    local (i) global()(
    i = 0;
    loop (this.n_channels,
        dst_ptr[i] = this.delay_line_get (times_ptr[i], i);
        i += 1;
    );
);

function delay_line_get_linterp (pos, channel)
    local (a, b, pos_int, pos_frac) global()(
    pos = clamp (pos, 0, this.mask - 1);
    pos_int = floor (pos);
    pos_frac = pos - pos_int;
    a = this.delay_line_get (pos_int, channel);
    b = this.delay_line_get (pos_int + 1, channel);
    a + pos_frac * (b - a);
);

function delay_line_get_linterp_all (dst_ptr, times_ptr)
    local (i) global()(
    i = 0;
    loop(this.n_channels,
        dst_ptr[i] = this.delay_line_get_linterp (times_ptr[i], i);
        i += 1;
    );
);

function delay_line_get_catmull_rom_interp (pos, channel)
    local (a, b, c, d, pos_int, pos_frac) global()(

    pos = clamp (pos, 0, this.mask - 3);
    pos_int = floor (pos);
    pos_frac = pos - pos_int;
    a = this.delay_line_get (pos_int, channel);
    b = this.delay_line_get (pos_int + 1, channel);
    c = this.delay_line_get (pos_int + 2, channel);
    d = this.delay_line_get (pos_int + 3, channel);
    interp_catmull_rom (a, b, c, d, pos_frac);
);

function delay_line_get_catmull_rom_interp_all (dst_ptr, times_ptr)
  local (i) global()(
    i = 0;
    loop(this.n_channels,
        dst_ptr[i] = this.delay_line_get_catmull_rom_interp (times_ptr[i], i);
        i += 1;
    );
);

function delay_line_advance() global()(
    this.pos -= 1;
    this.pos < 0 ? (this.pos = this.mask);
);
//------------------------------------------------------------------------------
// thiran order 2 interpolation addon/inheritance/monkey patching to a
//  "delay_line". Usage:
//
// del.delay_line_init (size, samples);
// del.delay_line_thiran2_add (100000);

// "delta_sync" number of samples distane between consecutive calls that will
// make the previous states of the thiran biquad to be recalculated. In practice
// as the Z states are always correct the filter doesn't really blow up.
function delay_line_thiran2_add (delta_sync) global()(
    // each dynamic thiran array uses these indexes.
    // 0 = a1,
    // 1 = a2,
    // 2 = y1,
    // 3 = y2,
    // 4 = time_spls
    // 5 = n_coeffs/size
    this.thiran.array_init (this.n_channels * 5);
    this.thiran.delta_sync = delta_sync;
);

function delay_line_thiran2_get (pos, channel)
    local (z0, z1, z2, pos_int, pos_frac, diff, thy_ptr, dlt, y, d)
    global()(
    // each dynamic thiran array uses these indexes.
    // 0 = a1,
    // 1 = a2,
    // 2 = y1,
    // 3 = y2,
    // 4 = time_spls
    // 5 = n_coeffs/size
    thy_ptr = this.thiran.ptr + channel * 5;

    pos = clamp (pos, 0, this.mask - 2);
    pos_int = floor (pos);
    pos_frac = pos - pos_int;

    z0 = this.delay_line_get (pos_int, channel);
    z1 = this.delay_line_get (pos_int + 1, channel);
    z2 = this.delay_line_get (pos_int + 2, channel);

    // delay
    diff = abs (pos - thy_ptr[4]); // time_spls
    (diff != 0) ? (
        // biquad recalc
        // according to this. Table 3.2:
        // http://users.spa.aalto.fi/vpv/publications/vesan_vaitos/ch3_pt3_allpass.pdf
        // The point minimizing the avg error for D0 (D0 < D < D0 +1) is 1.403

        d = pos_frac + 2;
        d = max (pos_frac, 2.0001); // d = delta
        thy_ptr[0] = -2 * (d - 2) / (d + 1); // a1
        thy_ptr[1] = ((d - 1) * (d - 2)) / ((d + 1)*(d + 2)); // a2
        // b0 = a2
        // b1 = a1
        // b2 = 1
        thy_ptr[4] = pos; // time_spls

        (diff > this.delta_sync) ? (
            // resync. Try to approximate to the current state by lerp, it could
            // also be done by running some stages on the delay line or by
            // running two iterations from zero.
            //
            // It seems that in a delay line context as z1 and z2 are always
            // correct the filter doesn't explode.
            //
            // This could be improved to e.g. catmull rom or some iterations
            // with previous samples.
            thy_ptr[2] = z0 + pos_frac * (z1 - z0); // y1
            thy_ptr[3] = z1 + pos_frac * (z2 - z1); // y2
        );
    );

    // Direct form1, otherwise it wouldn't take the past states (z's), which
    // might be more stable for delay line modulation.
    y = z0 * thy_ptr[1]; // a2(==b0) * z0
    y += z1 * thy_ptr[0]; // a1(==b1) * z0
    y += z2; // b2 == 1
    y -= thy_ptr[2] * thy_ptr[0]; // y1 * a1
    y -= thy_ptr[3] * thy_ptr[1]; // y2 * a2
    thy_ptr[3] = thy_ptr[2]; // y2 = y1
    thy_ptr[2] = y; // y1 = y
    clamp (y, -5, 5);
);

function delay_line_thiran2_get_all (dst_ptr, times_ptr)
    global() local (i)(
    i = 0;
    loop(this.n_channels,
        dst_ptr[i] = this.delay_line_thiran2_get (times_ptr[i], i);
        i += 1;
    );
);
//------------------------------------------------------------------------------
// schroeder allpass
//
// "delta_sync" number of samples distane between consecutive calls that will
// make the previous states of the thiran biquad to be recalculated. In practice
// as the Z states are always correct the filter doesn't really blow up.
//
function delay_line_schroeder_ap_add ()
    global()(
    this.g.array_init (this.n_channels);
);

function delay_line_schroeder_set_coeff (coeff, channel)
   global()(
   this.g.ptr[channel] = coeff;
);

function delay_line_schroeder_set_coeff_all (src_ptr) local (i)(
    i = 0;
    loop (this.n_channels,
        this.delay_line_schroeder_set_coeff (src_ptr[i], i);
        i += 1;
    );
);

function freq_to_schroeder_coeff (freq, samplerate)
    local (coeff) global()(
    coeff = tan ($pi * freq / samplerate);
    coeff = (1 - coeff) / (1 + coeff);
    coeff = clamp (coeff, 0, 1);
    coeff;
);

// no interpolation
// dst_ptr = outs, in_ptr = ins, delay_spls_ptr = delays.
function delay_line_schroeder_tick (dst_ptr, in_ptr, delay_spls_ptr)
    local (i, g, y, y1) global()(

    this.delay_line_advance();
    i = 0;
    loop (this.n_channels,
        g  = this.g.ptr[i];
        y1 = this.delay_line_get (delay_spls_ptr[i], i);
        y  = in_ptr[i] - y1 * g;
        this.delay_line_set (y, 0, i);
        dst_ptr[i] = y * g + y1;
        i += 1;
    );
);

function delay_line_schroeder_tick (in, chnl, delay_spls)
  global() local(g, y, y1, out) (

  g  = this.g.ptr[chnl];
  y1 = this.delay_line_get (delay_spls, chnl);
  y  = in - y1 * g;
  this.delay_line_set (y, 0, chnl);
  y * g + y1;
);

// no interpolation
// dst_ptr = outs, in_ptr = ins, delay_spls_ptr = delays.
function delay_line_schroeder_tick_cascade_all (in, active_count, delay_spls_ptr)
    local (i, g, y, y1, out) global() (

    this.delay_line_advance();
    i = 0;
    out = in;
    loop (active_count,
      out = this.delay_line_schroeder_tick (out, i, delay_spls_ptr[i]);
      i += 1;
    );
    loop (this.n_channels - active_count,
      this.delay_line_schroeder_tick (0, i, delay_spls_ptr[i]);
      i += 1;
    );
    out;
);

// no interpolation
// dst_ptr = outs, in_ptr = ins, delay_spls_ptr = delays.
function delay_line_schroeder_tick_tapped_all (in, active_count, delay_spls_ptr)
    local (i, g, y, y1, next, out) global() (

    this.delay_line_advance();
    i = 0;
    next = in;
    out = in;
    loop (active_count,
      next = this.delay_line_schroeder_tick (next, i, delay_spls_ptr[i]);
      out += next;
      i += 1;
    );
    loop (this.n_channels - active_count,
      this.delay_line_schroeder_tick (0, i, delay_spls_ptr[i]);
      i += 1;
    );
    out / (active_count + 1);
);

function delay_line_schroeder_tick_tapped_cascade_all (in, count, count_tapped, delay_spls_ptr)
    local (i, g, y, y1, next, out) global() (

   this.delay_line_advance();
    i = 0;
    next = in;
    out = in;
    loop (count_tapped,
      next = this.delay_line_schroeder_tick (next, i, delay_spls_ptr[i]);
      out += next;
      i += 1;
    );
    loop (count,
      out = this.delay_line_schroeder_tick (out, i, delay_spls_ptr[i]);
      i += 1;
    );
    loop (this.n_channels - (count_tapped + count),
      this.delay_line_schroeder_tick (0, i, delay_spls_ptr[i]);
      i += 1;
    );
    out / (count_tapped + 1);
);

//------------------------------------------------------------------------------
// object version of the Schroeder above
function schroeder_allpass (max_delay_spls)(
    this.delay_line_init (round_next_pow2 (max_delay_spls), 1);
    this.delay_line_schroeder_ap_add();
);

function schroeder_allpass_set_coeff (coeff)(
    this.delay_line_schroeder_set_coeff (coeff, 0);
);

function schroeder_allpass_tick (in, delay_spls) global (_libmem*) (
    _libmem.ptr[0] = delay_spls;
    _libmem.ptr[1] = 0;
    this.delay_line_schroeder_tick_cascade_all (in, 1, _libmem.ptr);
);

//------------------------------------------------------------------------------
