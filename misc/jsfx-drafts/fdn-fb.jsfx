desc:fdn diffusor with er_feedback  draft
slider1:enable_impulse= 0 <0 ,2, 1{Off,Impulse,White noise}> Test
slider2:mute=           0 <0, 1{Off,On}>     Reverb mute
slider3:rt60_msec=      300 <10 ,12000 ,0.1> RT60 (msec)
slider4:size_m=         3 <0.1, 70, 0.01>    Size1 (m)
slider5:er_mix=         0.3 <0, 1, 0.01>     ER(%)
slider6:er_2_late=      0.3 <0, 1, 0.01>     ER to late(%)
slider7:late_mix=       0.3 <0, 1, 0.01>     late(%)
slider8:fb_lfo_freq=    0.3 <0, 1.5, 0.001>   FB LFO Freq(Hz)
slider9:fb_lfo_depth=   0.3 <0, 1, 0.001>    Chorus Depth
slider10:chorus_amt=    0   <-1, 1, 0.001>   Chorus Amt
slider11:hf_absortion=  0.5 <0.0, 1, 0.001> Damping

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import _core.jsfx-inc
import _delay-line.jsfx-inc
import _filters.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc

/*
To try:

-Notch EQ on the feedback loop (modulation?).
-Nested FDN
-Time reversed allpasses
-Random instead of sine oscs (if no chorus)
-Crossfading between mixing matrices
-Fix now-broken ER. Add constants.
-Depending on the algo, the range of the LFO AMT might change.
-Independent lfos for the filter frequencies.
-Diferent algos can have diferent matrices.
-rs-met kronecker matrices.
 https://www.kvraudio.com/forum/viewtopic.php?t=123095&start=45
-Matrix rotation.
-Very small amplitude modulations. (likely not to work).
-With the size parameter, make some channels lose weight and others to win.
-Multiband reverb (Allows lower frequencies at lower sr).
-Input crossover (remove more LF).
-Chorus.
-Schroeder allpasses in series increase decrease density.
-Difussors in series.
-Bigger matrices.

Reminder:

The gain coefficient for a 1st order all pass can be computed to correspond to
the frequency that is phase shifted by 90Â°:

*/
@init

//------------------------------------------------------------------------------
function reset_delay_length_samples_gr (ptr, n_chnls, meters, golden_ratio_idx)
    local (i, d, factor) (

    d = srate * meters * (1 / 343); // 343 = C = soundspeed
    factor = d / golden_ratio[golden_ratio_idx + (n_chnls / 2)];
    i = 0;
    loop (n_chnls,
        ptr[i] = golden_ratio[golden_ratio_idx + i] * factor;
        i += 1;
    );
    loop (n_chnls / 2,
        mem_swap (ptr, i, i + n_chnls / 2);
        i += 1;
    );
);

// memory areas for free usage -------------------------------------------------
SCRATCH_MEM_AREA_SIZE = 32;

scratch1.array_init (SCRATCH_MEM_AREA_SIZE);
scratch2.array_init (SCRATCH_MEM_AREA_SIZE);
scratch3.array_init (SCRATCH_MEM_AREA_SIZE);
scratch4.array_init (SCRATCH_MEM_AREA_SIZE);

// -----------------------------------------------------------------------------
// Resource initialization
// -----------------------------------------------------------------------------
N_ER_CHNLS = 16;
N_LATE_CHNLS = 8;
N_LATE_STAGES = 1;

DC_BLOCKER_FREQ = 4;

// parameter/setting ideas:
// ER pan/width

// per algorithm params (Future)
ER_DECAY_SEC = 0.5;
ER_SIZE_MIN = 3.5;
ER_SIZE_MAX = 69;

LFO_DEPTH_MAX = 0.08;
LATE_FIRST_GOLDEN_RATIO_IDX = 11;

LATEDIFF_DELAY_SPLS_L = (1 / srate) * golden_ratio[2] * 0.001;
LATEDIFF_DELAY_SPLS_R = (1 / srate) * golden_ratio[14] * 0.001;

LATEDIFF_FREQ_L = 83;
LATEDIFF_FREQ_R = 13;

// ER
er_chnls.array_init (N_ER_CHNLS);
er_feedback.array_init (er_chnls.size);
er_rt60_att.array_init (er_chnls.size);
er_delay_spls.array_init (er_chnls.size);

get_delay_length_samples(
    er_delay_spls.ptr, er_chnls.size, ER_SIZE_MIN, ER_SIZE_MAX
    );

max_er_delay_spl = range_get_max (er_delay_spls.ptr, er_chnls.size);
er_delay.delay_line_init (round_next_pow2 (max_er_delay_spl), er_chnls.size);

get_rt60_gain(
    er_rt60_att.ptr, er_delay_spls.ptr, ER_DECAY_SEC, 0.3, er_chnls.size
    );

// Late
chnls.array_init (N_LATE_CHNLS);
chorus.array_init (chnls.size);
feedback.array_init (chnls.size);
rt60_att.array_init (chnls.size);
delay_spls.array_init (chnls.size);
mod_spls.array_init (chnls.size);

lfos.lfo_bank_init (chnls.size, chnls.size);
lfos.lfo_bank_reset_phase (0);
// 1 sec max. It will have to be computed from the maximum sizes on the final
// impl.
delay.delay_line_init (round_next_pow2 (srate), chnls.size);
delay.delay_line_thiran2_add (srate); // disable thyran resync

// 1P allpasses
ap_freq.array_init (chnls.size);
ap_freq.ptr[0] = 200;
ap_freq.ptr[1] = 300;
ap_freq.ptr[2] = 502;
ap_freq.ptr[3] = 740;
ap_freq.ptr[4] = 1130;
ap_freq.ptr[5] = 1530;
ap_freq.ptr[6] = 1700;
ap_freq.ptr[7] = 2930;
ap_1.tpt_1p_reset (ap_freq.ptr[0], srate);
ap_2.tpt_1p_reset (ap_freq.ptr[1], srate);
ap_3.tpt_1p_reset (ap_freq.ptr[2], srate);
ap_4.tpt_1p_reset (ap_freq.ptr[3], srate);
ap_5.tpt_1p_reset (ap_freq.ptr[4], srate);
ap_6.tpt_1p_reset (ap_freq.ptr[5], srate);
ap_7.tpt_1p_reset (ap_freq.ptr[6], srate);
ap_8.tpt_1p_reset (ap_freq.ptr[7], srate);

dc1.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc2.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc3.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc4.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc5.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc6.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc7.dc_blocker_init (DC_BLOCKER_FREQ, srate);
dc8.dc_blocker_init (DC_BLOCKER_FREQ, srate);


late_diff_l.schroeder_allpass (LATEDIFF_DELAY_SPLS_L);
late_diff_l.schroeder_allpass_set_coeff(
  freq_to_schroeder_coeff (LATEDIFF_FREQ_L, srate)
  );
late_diff_r.schroeder_allpass (LATEDIFF_DELAY_SPLS_R);
late_diff_r.schroeder_allpass_set_coeff(
  freq_to_schroeder_coeff (LATEDIFF_FREQ_R, srate)
  );

// trigger signals
test_next = counter + 1;

freembuf (_memtop_ptr); // tell the Host how much memory we need.

@slider //----------------------------------------------------------------------

reset_delay_length_samples_gr(
  delay_spls.ptr, delay_spls.size, size_m, LATE_FIRST_GOLDEN_RATIO_IDX
  );

range_clamp (delay_spls.ptr, delay_spls.size, 0, delay.mask);

// YOLO linear empirical/perceptual correction. The 1.55 is because there are
// already fixed lossy elements in the feedback loop
rt60_corr = (rt60_msec * 0.001) * (1. + (hf_absortion * 0.55));
get_rt60_gain(
  rt60_att.ptr, delay_spls.ptr, rt60_corr, 0.4, chnls.size
  );
range_mul_k(
  mod_spls.ptr, delay_spls.ptr, fb_lfo_depth * LFO_DEPTH_MAX, chnls.size
  );

i = 0;
loop (chnls.size,
    lfos.lfo_bank_reset_freq (0, i, fb_lfo_freq + fb_lfo_freq * i * 0.0001);
    i += 1;
);

// Hiself decays
hshelf_db = -6.22 * hf_absortion;
hshelf_q = 0.707;
hshelf1.svf_hshelf (3300, hshelf_q, hshelf_db, srate);
hshelf2.svf_hshelf (5300, hshelf_q, hshelf_db, srate);
hshelf3.svf_hshelf (3400, hshelf_q, hshelf_db, srate);
hshelf4.svf_hshelf (7500, hshelf_q, hshelf_db, srate);
hshelf5.svf_hshelf (5800, hshelf_q, hshelf_db, srate);
hshelf6.svf_hshelf (7400, hshelf_q, hshelf_db, srate);
hshelf7.svf_hshelf (5400, hshelf_q, hshelf_db, srate);
hshelf8.svf_hshelf (4000, hshelf_q, hshelf_db, srate);

@block //-----------------------------------------------------------------------

@sample //----------------------------------------------------------------------

// autogenerate a periodic impulse.
counter >= test_next ? (
   enable_impulse == 1 ? (spl0 = spl1 = 1.);
   enable_impulse == 2 ? (
    on_noise = 1;
    test_off = counter + srate * 0.2;
   );
   test_next += rt60_msec * 0.001 * srate;
);

(on_noise != 0) ? (
  spl0 = spl1 = (rand (2) - 1) * 0.1;
  on_noise = (counter < test_off) ? 1 : 0;
);


l = spl0;
r = spl1;
m = (l + r) * 0.5;
s = (l - r) * 0.5;

// ER ------------------------
er_chnls.ptr[0] =  -l;
er_chnls.ptr[1] =   r;
er_chnls.ptr[2] =  -m;
er_chnls.ptr[3] =   s * 8;
er_chnls.ptr[4] =   l;
er_chnls.ptr[5] =  -r;
er_chnls.ptr[6] =   m;
er_chnls.ptr[7] =  -s * 8;
er_chnls.ptr[8] =  -l;
er_chnls.ptr[9] =   r;
er_chnls.ptr[10] = -m;
er_chnls.ptr[11] =  s * 8;
er_chnls.ptr[12] =  l;
er_chnls.ptr[13] = -r;
er_chnls.ptr[14] =  m;
er_chnls.ptr[15] = -s * 8;

range_add (er_chnls.ptr, er_chnls.ptr, er_feedback.ptr, er_chnls.size);

er_delay.delay_line_advance();
er_delay.delay_line_set_all (er_chnls.ptr, 0);
er_delay.delay_line_get_all (er_chnls.ptr, er_delay_spls.ptr);

// mix the faster channels, leave the ones with longer delays more separate.
hadamard_4 (er_feedback.ptr, er_chnls.ptr);
hadamard_4 (er_feedback.ptr + 4, er_chnls.ptr + 4);
memcpy (scratch1.ptr, er_feedback.ptr, er_chnls.size);
householder (er_feedback.ptr, scratch1.ptr, er_chnls.size);
range_mul (er_feedback.ptr, er_feedback.ptr, er_rt60_att.ptr, er_chnls.size);

er_sig_l = er_chnls.ptr[0] + er_chnls.ptr[5] + er_chnls.ptr[9]  + er_chnls.ptr[12];
er_sig_r = er_chnls.ptr[1] + er_chnls.ptr[4] + er_chnls.ptr[8]  + er_chnls.ptr[13];
er_sig_l *= (1 / 4);
er_sig_r *= (1 / 4);

er_l = er_sig_l * er_mix;
er_r = er_sig_r * er_mix;

er_tail = (er_sig_l + er_sig_r) * 0.5 * er_2_late;

// Tail ------------------------
chnls.ptr[0] =  -m;
chnls.ptr[1] =  s;
chnls.ptr[2] =  er_tail;
chnls.ptr[3] =  0;
chnls.ptr[4] =  m;
chnls.ptr[5] =  -s;
chnls.ptr[6] =  er_tail;
chnls.ptr[7] =  0;

range_add (chnls.ptr, chnls.ptr, feedback.ptr, chnls.size);

// LFO
mod_delay_spls.array_alias (scratch4);
lfo_out.array_alias (scratch3);

// Delay line + chorus
lfos.lfo_bank_tick_sin (lfo_out.ptr, 0);
range_mul (mod_delay_spls.ptr, lfo_out.ptr, mod_spls.ptr, chnls.size);
range_add (mod_delay_spls.ptr, mod_delay_spls.ptr, delay_spls.ptr, chnls.size);
delay.delay_line_advance();
delay.delay_line_set_all (chnls.ptr, 0);
delay.delay_line_thiran2_get_all (chorus.ptr, mod_delay_spls.ptr);
delay.delay_line_thiran2_get_all  (chnls.ptr, delay_spls.ptr);

// HP/LP + AP
khp1 = 0.001;
khp1 = 0.;
khp2 = 1 - khp1;

klp1 = 0.01;
klp1 = 0.;
klp2 = 1 - klp1;

loop (1, // just to be able to comment out fast...
  // TODO: this need their own random LFO freq
  mod_ap_freq.array_alias (scratch2);
  ((counter & 63) == 0) ? (
    i = 0;
    loop (chnls.size,
      mod_ap_freq.ptr[i] = pow (2, lfo_out.ptr[i] * 2) * ap_freq.ptr[i];
      i += 1;
    );
    ap_1.tpt_1p_reset (mod_ap_freq.ptr[0], srate);
    ap_2.tpt_1p_reset (mod_ap_freq.ptr[1], srate);
    ap_3.tpt_1p_reset (mod_ap_freq.ptr[2], srate);
    ap_4.tpt_1p_reset (mod_ap_freq.ptr[3], srate);
    ap_5.tpt_1p_reset (mod_ap_freq.ptr[4], srate);
    ap_6.tpt_1p_reset (mod_ap_freq.ptr[5], srate);
    ap_7.tpt_1p_reset (mod_ap_freq.ptr[6], srate);
    ap_8.tpt_1p_reset (mod_ap_freq.ptr[7], srate);
  );

  chnls.ptr[0] = chnls.ptr[0] * khp1 -
    ap_1.tpt_1p_tick_ap (chnls.ptr[0]) * khp2;
  chnls.ptr[1] = chnls.ptr[1] * klp1 +
    ap_2.tpt_1p_tick_ap (chnls.ptr[1]) * klp2;
  chnls.ptr[2] = chnls.ptr[2] * khp1 -
    ap_3.tpt_1p_tick_ap (chnls.ptr[2]) * khp2;
  chnls.ptr[3] = chnls.ptr[3] * klp1 +
    ap_4.tpt_1p_tick_ap (chnls.ptr[3]) * klp2;
  chnls.ptr[4] = chnls.ptr[4] * khp1 -
    ap_5.tpt_1p_tick_ap (chnls.ptr[4]) * khp2;
  chnls.ptr[5] = chnls.ptr[5] * klp1 +
    ap_6.tpt_1p_tick_ap (chnls.ptr[5]) * klp2;
  chnls.ptr[6] = chnls.ptr[6] * khp1 -
    ap_7.tpt_1p_tick_ap (chnls.ptr[6]) * khp2;
  chnls.ptr[7] = chnls.ptr[7] * klp1 +
    ap_8.tpt_1p_tick_ap (chnls.ptr[7]) * klp2;
);

rochebois_8 (scratch2.ptr, chnls.ptr);
memcpy (chnls.ptr, scratch2.ptr, 8);

loop(1, // just to be able to comment fast...
  // These are vital for the Thiran interpolator not blowing up.
  chnls.ptr[0] = hshelf1.svf_tick (chnls.ptr[0]);
  chnls.ptr[1] = hshelf2.svf_tick (chnls.ptr[1]);
  chnls.ptr[2] = hshelf3.svf_tick (chnls.ptr[2]);
  chnls.ptr[3] = hshelf4.svf_tick (chnls.ptr[3]);
  chnls.ptr[4] = hshelf5.svf_tick (chnls.ptr[4]);
  chnls.ptr[5] = hshelf6.svf_tick (chnls.ptr[5]);
  chnls.ptr[6] = hshelf7.svf_tick (chnls.ptr[6]);
  chnls.ptr[7] = hshelf8.svf_tick (chnls.ptr[7]);
);

loop(1,
  chnls.ptr[0] = dc1.dc_blocker_tick (chnls.ptr[0]);
  chnls.ptr[1] = dc2.dc_blocker_tick (chnls.ptr[1]);
  chnls.ptr[2] = dc3.dc_blocker_tick (chnls.ptr[2]);
  chnls.ptr[3] = dc4.dc_blocker_tick (chnls.ptr[3]);
  chnls.ptr[4] = dc5.dc_blocker_tick (chnls.ptr[4]);
  chnls.ptr[5] = dc6.dc_blocker_tick (chnls.ptr[5]);
  chnls.ptr[6] = dc7.dc_blocker_tick (chnls.ptr[6]);
  chnls.ptr[7] = dc8.dc_blocker_tick (chnls.ptr[7]);
);

range_mul (feedback.ptr, chnls.ptr, rt60_att.ptr, chnls.size);

// Reminder: Chorus outside of the feedback loop, unpredictable signal level doesn't
// play well with decaytimes. Just feeding back a very tiny amount.
range_mul_k (scratch1.ptr, chorus.ptr, 0.06, chorus.size);
range_add (feedback.ptr, feedback.ptr, scratch1.ptr, chorus.size);

chorus_l = chorus.ptr[0] + chorus.ptr[1] + chorus.ptr[2] + chorus.ptr[3];
chorus_r = chorus.ptr[4] + chorus.ptr[5] + chorus.ptr[6] + chorus.ptr[7];

chorus_fact = chorus_amt * chorus_amt;

late_l = chnls.ptr[2] + (chorus_l * chorus_fact * (5 - chorus_fact * 4) * 1 / 5);
late_r = chnls.ptr[6] + (chorus_r * chorus_fact * (5 - chorus_fact * 4) * 1 / 5);

loop (0,
  late_l = late_diff_l.schroeder_allpass_tick (late_l, LATEDIFF_DELAY_SPLS_L);
  late_r = late_diff_r.schroeder_allpass_tick (late_r, LATEDIFF_DELAY_SPLS_R);
);

late_l *= late_mix;
late_r *= late_mix;

(mute == 0) ?(
  spl0 = er_l + late_l;
  spl1 = er_r + late_r;
);
counter += 1;
