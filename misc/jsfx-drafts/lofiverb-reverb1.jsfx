slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo

slider11:er_fact=0.2<0,1,0.01> ER

slider21:db_wet=-12<-40, 0,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _delay-line.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

// ratios starting point
// http://www.voxangelica.net/transfer/magic%20numbers%20for%20reverb%20design%203b.pdf
//
// Not really used, but at least this script provides set of primes to do manual
// tuning work.
//
// #!/usr/bin/env python
// from math import *
// import sympy as sp
//
// def print_delay(v):
//   print (f'// {v}[{sp.prevprime (v)},{sp.nextprime (v)}]')
//
// def get_start_times(del_spls, n_ap):
//   def f(x):
//     return 1 / (x + 1 - log(2))
//   print_delay(del_spls)
//   for i in range (n_ap):
//     print_delay (del_spls * f (i + 1))
//
// def get_start_times2(del_spls, n_ap):
//   print_delay(del_spls)
//   print_delay(del_spls / 2)
//   for i in range (n_ap):
//     idx = int(i / 2) + 1
//     if (i % 2) == 0:
//       print_delay (del_spls * (2 / (1 + 2 * idx)))
//     else:
//       print_delay (del_spls * (4 / (3 + 2 * idx)))
//
// get_start_times2(12000, 102)

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;//33600;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
@slider

// TODO: predelay

// TODO: dc block?

decay = 1 - decay_p;
decay = 1 - decay * decay;
decay = 0.6 + decay * 0.38;

mod_amt = 0.75 * (1 - mod) + 0.25;
lfo.lfo_bank_reset_freq (0, 0.1 + mod * 1.2, k.src.srate);
er_lfo.lfo_bank_reset_freq (0, 0.3 + mod * 0.3, k.src.srate);

dry_gain  = db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

flo = 0.90 + lo * lo * 0.05;
glo = 0.55 + lo * 0.4;
fhi = 0.62 - hi * hi * 0.2;
ghi = 0.6 + hi * 0.25;

hp_fact = 1 - hp * hp;
hp_fact *= 0.39;
hp_fact += 0.6;

g_character = 0.618 + ((0.707 - 0.618) * 2) * character;

er_amt = er_fact * er_fact;
er_amt = 0.05 + er_amt * 0.5;

@sample

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (

  // in
  x = (src.ins.ptr[0] + src.ins.ptr[1]) * 0.5;
  // diffusion
  x = lp (x, 0.3);
  x = ap (x, 147, -0.707);
  x = ap (x, 183, 0.707);
  x = ap (x, 389, -0.6);
  x = ap (x, 401, 0.6);
  late_in = x;

  // ER
  er_lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);
  // notice the care all over al feedback sums to keep the maximum gain at one
  // (maximum), as this has to run on fixed point
  x = ap (decay * (late_in * 0.5 + er_fb), 1367, 0.35, lfo.ret.ptr[1], 71 + er_amt * 70);
  x = erdamp.crossv2 (x, flo, fhi, glo, ghi);
  er1 = x;  // 0-1 range (bipolar)
  x += delay (x, 1787, lfo.ret.ptr[0], 261);
  x *= 0.5 * decay;
  x = delay (x, 33); // just to enable block processing
  er2 = x;  // 0-1 range (bipolar)
  er_fb = x;

  // late + hp
  lp = f1.crossv2 (ci, flo, fhi, glo, ghi);
  late_in = late_in - lp;

  lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);

  loop_in = late_in + f2 * decay * 0.6 - (er1 + er2) * er_amt * 0.4;


  loopsig = (late_in * 0.5);
  ersig = (er1 + er2) * 0.25;
  loop_in = loopsig * (1 - er_amt) - ersig * er_amt + f2;
  x = ap (loop_in, 977, g_character, lfo.ret.ptr[0], 71 * mod_amt);
  x = delay (x, 2819);
  x = f1.crossv2 (x, flo, fhi, glo, ghi);
  x = ap (x * decay, 863, -g_character);
  x = delay (x, 1021);
//  x = ap (x * decay, 509, -0.707);
//  x = delay(x, 3691);
  x = ap (x * decay, 1453, 0.618);
  x = delay (x, 787);
  l = x;

  loopsig = (late_in * 0.5);
  ersig = (er1 - er2) * 0.25;
  loop_in = loopsig * (1 - er_amt) - ersig * er_amt + f1;
  x = ap (loop_in, 947, g_character, lfo.ret.ptr[1], 47 * mod_amt);
  x = delay (x, 3191);
  x = f2.crossv2 (x, flo, fhi, glo, ghi);
  x = ap (x * decay, 887, -g_character); // 0.618 to 0.707 -> explosion
  x = delay (x, 1049);
//  x = ap (x * decay, 617, -0.707);
//  x = delay(x, 3697);
  x = ap (x * decay, 1367, 0.618);
  x = delay (x, 647);
  f2 = x;
  r = x;
  f1 = l;

  // prepare next iteration
  easy_ap_next_sample();

  // Mixdown
  er_cf = er_amt * 0.2;

  l = l * (1 - er_cf) + (-er1 * 0.66 - er2 * 0.34) * er_cf;
  r = r * (1 - er_cf) + (-er1 * 0.66 + er2 * 0.34) * er_cf;

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
