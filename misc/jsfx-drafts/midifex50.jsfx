 desc:jsfx-drafts/midifex-50.jsfx
slider1:decay_p=0.5<0,1,0.01> Decay

slider3:mod=0<0,1,0.01> Mod
slider4:character=0<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo

slider11:er_fact=0.2<0,1,0.01> ER

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _delay-line.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

// ratios starting point
// http://www.voxangelica.net/transfer/magic%20numbers%20for%20reverb%20design%203b.pdf
//
// Not really used, but at least this script provides set of primes to do manual
// tuning work.
//
// #!/usr/bin/env python
// from math import *
// import sympy as sp
//
// def print_delay(v):
//   print (f'// {v}[{sp.prevprime (v)},{sp.nextprime (v)}]')
//
// def get_start_times(del_spls, n_ap):
//   def f(x):
//     return 1 / (x + 1 - log(2))
//   print_delay(del_spls)
//   for i in range (n_ap):
//     print_delay (del_spls * f (i + 1))
//
// def get_start_times2(del_spls, n_ap):
//   print_delay(del_spls)
//   print_delay(del_spls / 2)
//   for i in range (n_ap):
//     idx = int(i / 2) + 1
//     if (i % 2) == 0:
//       print_delay (del_spls * (2 / (1 + 2 * idx)))
//     else:
//       print_delay (del_spls * (4 / (3 + 2 * idx)))
//
// get_start_times2(12000, 102)

// golden ratio helper
// #!/usr/bin/env python
// from math import *
// import sympy as sp
//
// import argparse
//
// def get_args():
//     parser = argparse.ArgumentParser()
//     parser.add_argument("start", type=int, help='smallest in the series')
//     parser.add_argument("count", type=int, help='count in the series')
//     parser.add_argument("--nonprime", default=False, type=bool, help='maximum of features',)
//     opt = parser.parse_args()
//     return opt
//
// def golden_ratio_series(start, count, nonprime):
//   ret = []
//   curr = start
//   for _ in range (count):
//     append = curr;
//     if not nonprime:
//       append = [sp.prevprime (curr),sp.nextprime (curr)]
//
//     ret.append (append)
//     curr *= 1.61803398874989484820458683436563811772030917980576 # way over double...
//   return ret
//
// def main():
//     args = get_args()
//     print (golden_ratio_series(args.start, args.count, args.nonprime))
//
// if __name__ == "__main__":
//     main()

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 2;
lfo.lfo_bank_init (n_lfos, 1);
lfo.ret.array_init (n_lfos);
lfo.lfo_bank_reset_phase (0);

er_lfo.lfo_bank_init (n_lfos, 1);
er_lfo.ret.array_init (n_lfos);
er_lfo.lfo_bank_reset_phase (0);


@slider

// TODO: predelay

// TODO: dc block?

decay = 1 - decay_p;
decay = 1 - decay * decay;
decay = -(0.3 + decay * 0.45);

lfo.lfo_bank_reset_freq (0, 0.3 + mod * 0.1, k.src.srate);
er_lfo.lfo_bank_reset_freq (0, 0.3 + mod * 0.3, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

er_amt = (er_fact * er_fact) * 0.4;

flo = 0.90 + lo * lo * 0.05;
glo = 0.35 + lo * 0.6;
fhi = 0.82 - hi * hi * 0.4;
ghi = 0.35 + hi * 0.5;

@sample

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  m = (src.ins.ptr[0] + src.ins.ptr[1]) * 0.5;
  s = (src.ins.ptr[0] - src.ins.ptr[1]) * 0.5;

  er_lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);

//  er = m;
//  er = ap3 (er, 337, 207, 121, 0.27, 0.21, -0.14, lfo.ret.ptr[0], 4, lfo.ret.ptr[1], 3, lfo.ret.ptr[0], -3);

  lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);

//[[19, 29], [37, 41], [59, 61], [97, 101], [157, 163], [251, 257], [409, 419], [661, 673], [1069, 1087]]
//[23, 37.214781741247585, 60.21478174124759, 97.42956348249518, 157.6443452237428, 255.073908706238, 412.7182539299808, 667.7921626362188, 1080.5104165661996]
//  x = delay (m, 1);
//  x = dampfilter (x, dampv);
  x = m;
  x += fb;
  x = ap (x, 13, 0.5);
  x = ap (x, 83, 0.5);
  x = ap (x, 116, 0.5);
  x = ap (x, 239, 0.5);
  x = ap (x, 339, 0.5);
  x = ap (x, 481, 0.5);
  x = ap (x, 555, 0.5);
  x = ap (x, 823, 0.5);
  x = ap (x, 999, 0.5);
  x = ap (x, 1100, 0.5);
  x = ap (x, 1347, 0.5);
  x = ap (x, 1563, 0.5);
  x = ap (x, 1841 - 32, 0.5);
  x = delay (x, 32);
  c1 = x;
  x = ap (x, 2001 - 32, 0.5, lfo.ret.ptr[1], 67 * mod);
  x = delay (x, 32);
  c2 = x;
  x = ap (x, 2083 - 32, 0.5, lfo.ret.ptr[0], 127 * mod);
  x = f1.crossv2 (x, flo, fhi, glo, ghi);
  x = delay(x, 32);
  fb = x;
  fb *= decay;

  l = ap (x, 147, 0.5);
  l = ap (l, 43, 0.5);
  l = ap (l, 55, 0.5);
  
  kmix = 0.5;
  // THIS IS NEW
  l = c1 * (kmix * character) + l * (1 - (character * kmix)); 
  l = delay (l, 1);

  r = ap (x, 249, 0.5);
  r = ap (r, 48, 0.5);
  r = ap (r, 21, 0.5);
  r = c2 * (kmix * character) + r * (1 - (character * kmix)); 
  r = delay (r, 1);

  easy_ap_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

//  l *= 6;
//  r *= 6;

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
