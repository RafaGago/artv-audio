 desc:Downsampled FDN draft
//slider1:enable_impulse= 0   <0 ,2, 1{Off,Impulse,White noise}> Test
//slider2:mute=           0   <0, 1{Off,On}>    Reverb mute
slider3:rt60_msec=     3300 <10 ,12000 ,0.1>  RT60 (msec)
slider4:size_m=       22.09 <1.2, 70, 0.001>  Size1 (m)
//slider5:er_mix=          0  <0, 1, 0.01>      ER(%)
//slider6:er_2_late=      0.3 <0, 1, 0.01>      ER to late(%)
//slider7:late_mix=       0.6 <0, 1, 0.01>      late(%)
slider8:mod_freq=     0.6 <0, 7, 0.001>     Mod Freq(Hz)
slider9:mod_depth=     0.1 <0, 1, 0.001>     Mod Depth
slider10:mod_stereo=    0.5 <-1, 1, 0.001>   Mod Stereo

//slider12:n_density=       0 <0, 4, 1>         Density Inc
//slider13:n_diffusers=     0 <0, 8, 1>         Diffusors
//slider14:tilt=            0 <-0.5, 0.5, 0.01> Tilt
slider15:angle1=      0.5 <0.1, 0.9, 0.001> L Angle
slider16:angle2=      0.5 <0.1, 0.9, 0.001> R Angle
slider17:angle3=      0.5 <0.1, 0.9, 0.001> L-R Angle
slider19:diffusion=   0.6 <0, 0.77, 0.001> Diffusion
slider20:width=       0.5 <0, 1, 0.01> Width
slider21:damp=        0.5 <0.0, 1, 0.001> Damping

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import _core.jsfx-inc
import _delay-line.jsfx-inc
import _filters.jsfx-inc
import _reverb.jsfx-inc
import _dynamics.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

@init

GOLDEN_RATIO = (1 + sqrt(5)) / 2;
// -----------------------------------------------------------------------------
// Resource initialization
// -----------------------------------------------------------------------------

// Sample rate conversion ------------------------------------------------------

// gcd of 44100 and 48000 is 300. Choosing a target samplerate multiple of 300
// will minimize the memory requirements for the fractional resampler on both.
// 30000 seems a good candidate samplerate for a reverb, 15KHz BW should be
// enough for a reverb.
//
// 36000 is more friendly to 44100 multiples though. 27000 seems good too, but
// 13.5K might start being dark.

BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 9000;
k.src.srate = BYPASS_SRC ? srate : 27000;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push(0);
  src.out_q.deque_push(0);
);

// Late/Tail feedback ----------------------------------------------------------

function from_ascending_to_chnl_order (spls_ptr, spls_size) global()(
  // from ascending order to an U shape ordering.

  this.tmp.array_init (spls_size);
  memcpy (this.tmp.ptr, spls_ptr, spls_size);

  spls_ptr[0]  = this.tmp.ptr[15];
  spls_ptr[1]  = this.tmp.ptr[13];
  spls_ptr[2]  = this.tmp.ptr[11];
  spls_ptr[3]  = this.tmp.ptr[9];
  spls_ptr[4]  = this.tmp.ptr[7];
  spls_ptr[5]  = this.tmp.ptr[5];
  spls_ptr[6]  = this.tmp.ptr[3];
  spls_ptr[7]  = this.tmp.ptr[1];
  spls_ptr[8]  = this.tmp.ptr[0];
  spls_ptr[9]  = this.tmp.ptr[2];
  spls_ptr[10] = this.tmp.ptr[4];
  spls_ptr[11] = this.tmp.ptr[6];
  spls_ptr[12] = this.tmp.ptr[8];
  spls_ptr[13] = this.tmp.ptr[10];
  spls_ptr[14] = this.tmp.ptr[12];
  spls_ptr[15] = this.tmp.ptr[14];

  this.tmp.array_size_drop_to (0);
);

BYPASS_LATE = 0;

k.late.n_channels = 16;
k.late.delay.prime_idx = 15;
k.late.delay.rounding_factor = 1;
k.late.delay.span_factor = GOLDEN_RATIO * 1.5;

late.delay_spls.array_init (k.late.n_channels);
late.rt60_att.array_init (k.late.n_channels);
late.signal.array_init (k.late.n_channels);
late.feedback.array_init (k.late.n_channels);

late.delay.delay_line_init(
  round_next_pow2 (k.src.srate), k.late.n_channels
  );
late.delay.delay_line_thiran2_add (k.src.srate); // disable thiran resync

late.k.delay_preset.array2d_init (1, k.late.n_channels);

late.k.delay_preset.array2d_ptr(0)[0]  = 911;
late.k.delay_preset.array2d_ptr(0)[1]  = 967;
late.k.delay_preset.array2d_ptr(0)[2]  = 1181;
late.k.delay_preset.array2d_ptr(0)[3]  = 1103;
late.k.delay_preset.array2d_ptr(0)[4]  = 1289;
late.k.delay_preset.array2d_ptr(0)[5]  = 1307;
late.k.delay_preset.array2d_ptr(0)[6]  = 1669;
late.k.delay_preset.array2d_ptr(0)[7]  = 1553;
late.k.delay_preset.array2d_ptr(0)[8]  = 1753;
late.k.delay_preset.array2d_ptr(0)[9]  = 1877;
late.k.delay_preset.array2d_ptr(0)[10] = 2131;
late.k.delay_preset.array2d_ptr(0)[11] = 2017;
late.k.delay_preset.array2d_ptr(0)[12] = 2647;
late.k.delay_preset.array2d_ptr(0)[13] = 2411;
late.k.delay_preset.array2d_ptr(0)[14] = 2957;
late.k.delay_preset.array2d_ptr(0)[15] = 2837;

from_ascending_to_chnl_order(
  late.k.delay_preset.array2d_ptr(0), k.late.n_channels
  );
// Output Diffusion ------------------------------------------------------------

BYPASS_DIFFUSOR = 0;

k.dif.n_diffusors = 4;

k.dif.n_spls.array2d_init (2, k.dif.n_diffusors);

// Prime factors with an approx difference of 2.85.
// L channel
k.dif.n_spls.array2d_ptr(0)[0] = 19;
k.dif.n_spls.array2d_ptr(0)[1] = 53;
k.dif.n_spls.array2d_ptr(0)[2] = 157;
k.dif.n_spls.array2d_ptr(0)[3] = 443;

// R channel
(1) ? (
  // more stereo, different set.
  (1) ? (
    // sounds more like noise and the equal"ish" set.
    k.dif.n_spls.array2d_ptr(1)[0] = 23;
    k.dif.n_spls.array2d_ptr(1)[1] = 67;
    k.dif.n_spls.array2d_ptr(1)[2] = 191;
    k.dif.n_spls.array2d_ptr(1)[3] = 532;
  ) : (
    // sounds more spatial probably
    k.dif.n_spls.array2d_ptr(1)[0] = 29;
    k.dif.n_spls.array2d_ptr(1)[1] = 83;
    k.dif.n_spls.array2d_ptr(1)[2] = 239;
    k.dif.n_spls.array2d_ptr(1)[3] = 683;
  );
) : (
  // very similar set.
  k.dif.n_spls.array2d_ptr(1)[0] = 19;
  k.dif.n_spls.array2d_ptr(1)[1] = 53;
  k.dif.n_spls.array2d_ptr(1)[2] = 163;
  k.dif.n_spls.array2d_ptr(1)[3] = 439;
);

dif.l.delay_line_init (round_next_pow2 (k.src.srate), k.dif.n_diffusors);
dif.l.delay_line_allpass_add();

dif.r.delay_line_init (round_next_pow2 (k.src.srate), k.dif.n_diffusors);
dif.r.delay_line_allpass_add();

k.dif.g.array2d_init (2, k.dif.n_diffusors);

// Crossover -------------------------------------------------------------------
// 1 pole lowpasses. HP by subtraction.

BYPASS_FILTERING   = 0;
k.filt.att_fact_db = -9;

k.filt.dampfactor.array_init (k.late.n_channels);
k.filt.dampfactor.ptr[0]  = 1 - 500 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[1]  = 1 - 530 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[2]  = 1 - 640 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[3]  = 1 - 600 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[4]  = 1 - 860 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[5]  = 1 - 800 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[6]  = 1 - 920 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[7]  = 1 - 900 /  (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[8]  = 1 - 1000 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[9]  = 1 - 1100 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[10] = 1 - 1200 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[11] = 1 - 1000 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[12] = 1 - 2200 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[13] = 1 - 2000 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[14] = 1 - 3000 / (k.src.srate * 0.5 - 2);
k.filt.dampfactor.ptr[15] = 1 - 3200 / (k.src.srate * 0.5 - 2);

from_ascending_to_chnl_order (k.filt.dampfactor.ptr, k.filt.dampfactor.size);
// Chorus ----------------------------------------------------------------------
BYPASS_CHORUS = 0;

k.chorus.max_depth_spls = 60; // both sides
k.chorus.max_width = 0.5;

// TODO: random walk?

chorus.lfo.l.lfo_bank_init (k.late.n_channels / 2, 1);
chorus.lfo.l.lfo_bank_reset_phase (0);

chorus.lfo.r.lfo_bank_init (k.late.n_channels / 2, 1);
chorus.lfo.r.lfo_bank_reset_phase (0);

// DC blockers -----------------------------------------------------------------
k.dc.cutoff_freq = 5;

dc.a.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.b.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.c.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.d.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.e.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.f.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.g.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.h.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.i.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.j.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.k.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.l.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.m.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.n.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.o.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);
dc.p.dc_blocker_init (k.dc.cutoff_freq, k.src.srate);

@slider //----------------------------------------------------------------------

function reset_filters (filt*, dampfact_ptr, damp, srate)
  global() local(srn) (

  this.sr.array_init (16);

  srn = (srate / 2) - 2;

  this.sr.ptr[0]  = srn - srn * damp * dampfact_ptr[0];
  this.sr.ptr[1]  = srn - srn * damp * dampfact_ptr[1];
  this.sr.ptr[2]  = srn - srn * damp * dampfact_ptr[2];
  this.sr.ptr[3]  = srn - srn * damp * dampfact_ptr[3];
  this.sr.ptr[4]  = srn - srn * damp * dampfact_ptr[4];
  this.sr.ptr[5]  = srn - srn * damp * dampfact_ptr[5];
  this.sr.ptr[6]  = srn - srn * damp * dampfact_ptr[6];
  this.sr.ptr[7]  = srn - srn * damp * dampfact_ptr[7];
  this.sr.ptr[8]  = srn - srn * damp * dampfact_ptr[8];
  this.sr.ptr[9]  = srn - srn * damp * dampfact_ptr[9];
  this.sr.ptr[10] = srn - srn * damp * dampfact_ptr[10];
  this.sr.ptr[11] = srn - srn * damp * dampfact_ptr[11];
  this.sr.ptr[12] = srn - srn * damp * dampfact_ptr[12];
  this.sr.ptr[13] = srn - srn * damp * dampfact_ptr[13];
  this.sr.ptr[14] = srn - srn * damp * dampfact_ptr[14];
  this.sr.ptr[15] = srn - srn * damp * dampfact_ptr[15];

  filt.a.tpt_1p_reset (this.sr.ptr[0], srate);
  filt.b.tpt_1p_reset (this.sr.ptr[1], srate);
  filt.c.tpt_1p_reset (this.sr.ptr[2], srate);
  filt.d.tpt_1p_reset (this.sr.ptr[3], srate);
  filt.e.tpt_1p_reset (this.sr.ptr[4], srate);
  filt.f.tpt_1p_reset (this.sr.ptr[5], srate);
  filt.g.tpt_1p_reset (this.sr.ptr[6], srate);
  filt.h.tpt_1p_reset (this.sr.ptr[7], srate);
  filt.i.tpt_1p_reset (this.sr.ptr[8], srate);
  filt.j.tpt_1p_reset (this.sr.ptr[9], srate);
  filt.k.tpt_1p_reset (this.sr.ptr[10], srate);
  filt.l.tpt_1p_reset (this.sr.ptr[11], srate);
  filt.m.tpt_1p_reset (this.sr.ptr[12], srate);
  filt.n.tpt_1p_reset (this.sr.ptr[13], srate);
  filt.o.tpt_1p_reset (this.sr.ptr[14], srate);
  filt.p.tpt_1p_reset (this.sr.ptr[15], srate);

  this.sr.array_size_drop_to (0);
);

get_delay_length_samples(
  late.delay_spls.ptr,
  k.late.n_channels,
  size_m,
  size_m * k.late.delay.span_factor,
  k.late.delay.prime_idx ,
  k.late.delay.rounding_factor,
  k.src.srate
  );

from_ascending_to_chnl_order (late.delay_spls.ptr, late.delay_spls.size);
(1) ? (
// using a preset
  memcpy(
    late.delay_spls.ptr,
    late.k.delay_preset.array2d_ptr(0),
    k.late.n_channels
    );
);

get_rt60_gain(
  late.rt60_att.ptr,
  late.delay_spls.ptr,
  rt60_msec * 0.001,
  0,
  k.late.n_channels,
  k.src.srate
  );

G = diffusion *  0.9;
k.dif.g.array2d_ptr(0)[0] = G;
k.dif.g.array2d_ptr(0)[1] = G - 0.4;
k.dif.g.array2d_ptr(0)[2] = G - 0.2;
k.dif.g.array2d_ptr(0)[3] = G;
dif.l.delay_line_allpass_set_g_all (k.dif.g.array2d_ptr (0));

k.dif.g.array2d_ptr(1)[0] = G;
k.dif.g.array2d_ptr(1)[1] = G - 0.4;
k.dif.g.array2d_ptr(1)[2] = G - 0.2;
k.dif.g.array2d_ptr(1)[3] = G;
dif.r.delay_line_allpass_set_g_all (k.dif.g.array2d_ptr (1));

late.mtx.w1_a = cos (2 * angle1 * $pi * 0.25);
late.mtx.w2_a = sin (2 * angle1 * $pi * 0.25);
late.mtx.w1_b = cos (2 * angle2 * $pi * 0.25);
late.mtx.w2_b = sin (2 * angle2 * $pi * 0.25);
late.mtx.w1_c = cos (2 * angle3 * $pi * 0.25);
late.mtx.w2_c = sin (2 * angle3 * $pi * 0.25);

// TODO: slightly different frequencies ?
chorus.freq_fact = mod_stereo * k.chorus.max_width;
chorus.freq_l = mod_freq;
chorus.freq_r = mod_freq * exp (chorus.freq_fact);
chorus.lfo.l.lfo_bank_reset_freq (0, chorus.freq_l, k.src.srate);
chorus.lfo.r.lfo_bank_reset_freq (0, chorus.freq_r, k.src.srate);

reset_filters (filt, k.filt.dampfactor.ptr, sqrt (damp), k.src.srate);
k.filt.att = pow (10, k.filt.att_fact_db * damp * 1/40);

@block //-----------------------------------------------------------------------

@sample //----------------------------------------------------------------------

function dc_blockers_x16_tick (dc*, sig*)
  global () local()(
  sig.ptr[0] = dc.a.dc_blocker_tick (sig.ptr[0]);
  sig.ptr[1] = dc.b.dc_blocker_tick (sig.ptr[1]);
  sig.ptr[2] = dc.c.dc_blocker_tick (sig.ptr[2]);
  sig.ptr[3] = dc.d.dc_blocker_tick (sig.ptr[3]);
  sig.ptr[4] = dc.e.dc_blocker_tick (sig.ptr[4]);
  sig.ptr[5] = dc.f.dc_blocker_tick (sig.ptr[5]);
  sig.ptr[6] = dc.g.dc_blocker_tick (sig.ptr[6]);
  sig.ptr[7] = dc.h.dc_blocker_tick (sig.ptr[7]);

  sig.ptr[8]  = dc.i.dc_blocker_tick (sig.ptr[8]);
  sig.ptr[9]  = dc.j.dc_blocker_tick (sig.ptr[9]);
  sig.ptr[10] = dc.k.dc_blocker_tick (sig.ptr[10]);
  sig.ptr[11] = dc.l.dc_blocker_tick (sig.ptr[11]);
  sig.ptr[12] = dc.m.dc_blocker_tick (sig.ptr[12]);
  sig.ptr[13] = dc.n.dc_blocker_tick (sig.ptr[13]);
  sig.ptr[14] = dc.o.dc_blocker_tick (sig.ptr[14]);
  sig.ptr[15] = dc.p.dc_blocker_tick (sig.ptr[15]);
);

function run_filters (filt*, lp_ptr, hp_ptr, sig_ptr, hp_gain)
  global() local() (

  lp_ptr[0]  = filt.a.tpt_1p_tick_lp (sig_ptr[0]);
  lp_ptr[1]  = filt.b.tpt_1p_tick_lp (sig_ptr[1]);
  lp_ptr[2]  = filt.c.tpt_1p_tick_lp (sig_ptr[2]);
  lp_ptr[3]  = filt.d.tpt_1p_tick_lp (sig_ptr[3]);
  lp_ptr[4]  = filt.e.tpt_1p_tick_lp (sig_ptr[4]);
  lp_ptr[5]  = filt.f.tpt_1p_tick_lp (sig_ptr[5]);
  lp_ptr[6]  = filt.g.tpt_1p_tick_lp (sig_ptr[6]);
  lp_ptr[7]  = filt.h.tpt_1p_tick_lp (sig_ptr[7]);
  lp_ptr[8]  = filt.i.tpt_1p_tick_lp (sig_ptr[8]);
  lp_ptr[9]  = filt.j.tpt_1p_tick_lp (sig_ptr[9]);
  lp_ptr[10] = filt.k.tpt_1p_tick_lp (sig_ptr[10]);
  lp_ptr[11] = filt.l.tpt_1p_tick_lp (sig_ptr[11]);
  lp_ptr[12] = filt.m.tpt_1p_tick_lp (sig_ptr[12]);
  lp_ptr[13] = filt.n.tpt_1p_tick_lp (sig_ptr[13]);
  lp_ptr[14] = filt.o.tpt_1p_tick_lp (sig_ptr[14]);
  lp_ptr[15] = filt.p.tpt_1p_tick_lp (sig_ptr[15]);

  hp_ptr[0]  = (sig_ptr[0]  - lp_ptr[0])  * hp_gain;
  hp_ptr[1]  = (sig_ptr[1]  - lp_ptr[1])  * hp_gain;
  hp_ptr[2]  = (sig_ptr[2]  - lp_ptr[2])  * hp_gain;
  hp_ptr[3]  = (sig_ptr[3]  - lp_ptr[3])  * hp_gain;
  hp_ptr[4]  = (sig_ptr[4]  - lp_ptr[4])  * hp_gain;
  hp_ptr[5]  = (sig_ptr[5]  - lp_ptr[5])  * hp_gain;
  hp_ptr[6]  = (sig_ptr[6]  - lp_ptr[6])  * hp_gain;
  hp_ptr[7]  = (sig_ptr[7]  - lp_ptr[7])  * hp_gain;
  hp_ptr[8]  = (sig_ptr[8]  - lp_ptr[8])  * hp_gain;
  hp_ptr[9]  = (sig_ptr[9]  - lp_ptr[9])  * hp_gain;
  hp_ptr[10] = (sig_ptr[10] - lp_ptr[10]) * hp_gain;
  hp_ptr[11] = (sig_ptr[11] - lp_ptr[11]) * hp_gain;
  hp_ptr[12] = (sig_ptr[12] - lp_ptr[12]) * hp_gain;
  hp_ptr[13] = (sig_ptr[13] - lp_ptr[13]) * hp_gain;
  hp_ptr[14] = (sig_ptr[14] - lp_ptr[14]) * hp_gain;
  hp_ptr[15] = (sig_ptr[15] - lp_ptr[15]) * hp_gain;
);

BYPASS_SRC == 0 ? (
  n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);
) : (
  n_spls_down = 1;
  src.ins.ptr[0] = spl0;
  src.ins.ptr[1] = spl1;
);

(n_spls_down) ? (
  // time to run DSP at operating SR, we know that "src.frac_down" is a
  // downsampler, so "n_spls_down" will always be 0 or 1

  in.l = src.ins.ptr[0];
  in.r = src.ins.ptr[1];

  in.m = (in.l + in.r) * 0.5;
  in.s = (in.l - in.r) * 0.5;

  dif.l = in.l;
  dif.r = in.r;

  late.signal.array_clear();
  late.signal.ptr[0] = dif.r;
  late.signal.ptr[15] = dif.l;

  range_add(
    late.signal.ptr, late.signal.ptr, late.feedback.ptr, late.signal.size
    );

  tmp.sig_cp1.array_duplicate (late.signal);
  // L
  rot_matrix_8(
    late.signal.ptr,
    tmp.sig_cp1.ptr,
    late.mtx.w1_a,
    late.mtx.w2_a
  );
  // R
  rot_matrix_8(
    late.signal.ptr + 8,
    tmp.sig_cp1.ptr + 8,
    late.mtx.w1_b,
    late.mtx.w2_b
  );
  // Cross
  tmp.sig_cp1.array_copy (late.signal);
  rot_matrix_8 (
    late.signal.ptr + 4, tmp.sig_cp1.ptr + 4, late.mtx.w1_c, late.mtx.w2_c
    );
  tmp.sig_cp1.array_size_drop_to(0); // return memory (used as a stack).

  // Feedback processing

  late.delay.delay_line_advance();
  late.delay.delay_line_set_all (late.signal.ptr, 0);

  BYPASS_CHORUS == 0 ? (
    chorus.n_spls.array_duplicate (late.delay_spls);
    chorus.mod.array_init (k.late.n_channels);
    chorus.signal.array_init (k.late.n_channels);

    chorus.lfo.l.lfo_bank_tick_sin (chorus.mod.ptr, 0);
    chorus.lfo.r.lfo_bank_tick_sin (chorus.mod.ptr + chorus.mod.size / 2, 0);

    range_mul_k(
      chorus.mod.ptr, mod_depth * k.chorus.max_depth_spls, chorus.mod.size
      );
    range_add (chorus.n_spls.ptr, chorus.mod.ptr, chorus.mod.size);

//    late.delay.delay_line_thiran2_get_all(
//      chorus.signal.ptr, chorus.n_spls.ptr
//      );
    late.delay.delay_line_get_catmull_rom_interp_all(
      chorus.signal.ptr, chorus.n_spls.ptr
    );

    late.feedback.array_copy (chorus.signal);

    chorus.signal.array_size_drop_to (0);
    chorus.mod.array_size_drop_to (0);
    chorus.n_spls.array_size_drop_to (0);
  ) : (
    late.delay.delay_line_get_all (late.feedback.ptr, late.delay_spls.ptr);
  );

  BYPASS_FILTERING == 0 ? (
    late.lp.array_init (late.feedback.size);
    late.hp.array_init (late.feedback.size);

    run_filters (filt, late.lp.ptr, late.hp.ptr, late.feedback.ptr, k.filt.att);

    // YOLO correction
    range_mul_k (late.lp.ptr, 1 + k.filt.att * 0.01, late.lp.size);
    range_add (late.feedback.ptr, late.lp.ptr, late.hp.ptr, late.feedback.size);

    late.hp.array_size_drop_to (0);
    late.lp.array_size_drop_to (0);
  );

  dc_blockers_x16_tick (dc, late.feedback);

  range_mul (late.feedback.ptr, late.rt60_att.ptr, late.feedback.size);

  // invert l and r. The real L comes from the upper channel half. Different
  // Character can be selected by choosing different outs. With the diffusor
  // working they even out, so I selected the 11-4 pair because it sounds more
  // different with the diffusor on and off while still good.
  (1) ? (
    late.l = late.signal.ptr[11];
    late.r = late.signal.ptr[4];
  ) : (
    late.l = late.signal.ptr[9];
    late.r = late.signal.ptr[6];
  );
  BYPASS_LATE == 0 ? (
    out.l = late.l;
    out.r = late.r;
  ) : (
    out.l = dif.l;
    out.r = dif.r;
  );

  // modulate this fella...
  BYPASS_DIFFUSOR == 0 ? (
    postdif.l = dif.l.delay_line_allpass_tick_cascade_all(
       out.l, k.dif.n_diffusors, k.dif.n_spls.array2d_ptr (0)
       );
    postdif.r = dif.r.delay_line_allpass_tick_cascade_all(
       out.r, k.dif.n_diffusors, k.dif.n_spls.array2d_ptr (1)
       );
    // trade correlation for some fake stereo, this can be enabled on metallic
    // (plate) reverbs.
//    mix = 0.85;
    mix = 1;
    out.l = postdif.l * mix + out.l * (1 - mix);
    out.r = postdif.r * mix - out.l * (1 - mix);
  );

  spl_op_rate_counter += 1; // operating rate counter

  BYPASS_SRC == 0 ? (
    // upsampling
    n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, out.l, out.r);
    i = 0;
    loop (n_spls_up * 2, // *2 : two channels
      src.out_q.deque_push (src.outs.ptr[i]);
      i += 1;
    );
  ):(
    src.out_q.deque_push (out.l);
    src.out_q.deque_push (out.r);
  );
);

spl0 = src.out_q.deque_pop();
spl1 = src.out_q.deque_pop();
