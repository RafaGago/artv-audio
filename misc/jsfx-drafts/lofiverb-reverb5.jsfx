slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

mtx.array_init (4);
mtxcp.array_init (4);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 4;
lfo.lfo_bank_init (n_lfos, 1);
lfo.ret.array_init (n_lfos);
lfo.lfo_bank_reset_phase (0);

m_lfo.lfo_bank_init (n_lfos, 1);
m_lfo.ret.array_init (n_lfos);
m_lfo.lfo_bank_reset_phase (0);

function hadamard2(x) global() local(x0, x1) (
  x0 = x[0];
  x1 = x[1];
  x[0] = (x0 - x1) * 0.7071067811865475;
  x[1] = (x0 + x1) * 0.7071067811865475;
);

h2.array_init (2);
td.array_init (16);

  td.ptr[0] = 17;
  td.ptr[1] = 37;
  td.ptr[2] = 57;
  td.ptr[3] = 97;
  td.ptr[4] = 127;
  td.ptr[5] = 147;
  td.ptr[6] = 193;
  td.ptr[7] = 215;
  td.ptr[8] = 311;
  td.ptr[9] = 433;
  td.ptr[10] = 814;
  td.ptr[11] = 1230;

@slider

lfo.lfo_bank_reset_freq (0, 0.13 + mod * 0.63, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

decay = 0.1 + sqrt (decay_p) * 0.90;

flo = 0.90 + lo * lo * 0.05;
glo = 0.65 + lo * 0.33;
fhi = 0.75 - hi * hi * 0.45;
ghi = 0.6 + 0.1 * decayx2 + hi * 0.29;

@sample

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  lfo.lfo_bank_tick_tri (lfo.ret.ptr, 0);

  // halving an additional time to leave headroom
  l = src.ins.ptr[0] * 0.5;
  r = src.ins.ptr[1] * 0.5;

  l = fil1.lp (l, 0.42);
  l = fil2.hp (l, 0.975);
  r = fir1.lp (r, 0.42);
  r = fir2.hp (r, 0.975);

  m = (l + r) * 0.5;
  s = (l - r) * 0.5;

  h2.ptr[0] = l;
  h2.ptr[1] = r;

  i = 0;
  n = i + floor(character * 10);
  frac = character * 10;
  loop(11,
    (i == n) ? (
      l = h2.ptr[0];
      r = h2.ptr[1];
    );
    h2.ptr[i & 1] = delay (h2.ptr[i & 1], td.ptr[i]);
    hadamard2(h2.ptr);
    i += 1;
  );
  // end of boilerplate, reverb algo

  // approx 3ms ((23400/1000)*3 = 70.2 spls) -> 1meter
  a = l + m * 0.25 + dfb;
  a = f1.ap3_m1_crossv (a, 777, 311, 290, 0.48, 0.2, -0.1, lfo.ret.ptr[0] * mod, 63, flo, fhi, glo, ghi);
  a = delay (a, 894);
  afb = a * decay;
  b = r + m * 0.25 + afb;
  b = f2.ap3_m1_crossv (b, 771, 304, 211, 0.48, 0.2, -0.1, lfo.ret.ptr[1] * mod, 53, flo, fhi, glo, ghi);
  b = delay (b, 803);
  bfb = b * decay;
  c = s + bfb;
  c = f3.ap3_m1_crossv (c, 1819, 1483, 1456, -0.4, 0.23, -0.1, lfo.ret.ptr[2] * mod, 43, flo, fhi, glo, ghi * 0.9);
  c = delay (c, 1692);
  cfb = c * decay;
  d = s + cfb;
  d = f4.ap3_m1_crossv (d, 1813, 1103, 1113, 0.4, -0.23, -0.1, lfo.ret.ptr[3] * mod, 33, flo, fhi, glo, ghi * 0.9);
  d = delay (d, 1303);
  dfb = d * decay;

  l = a;
  r = b;

  l = ap (l, 33, 0.65);
//  l = ap (l, 237, 0.7);
//  l = ap (l, 332, -0.5);

  r = ap (r, 31, 0.65);
//  r = ap (r, 231, 0.7);
//  r = ap (r, 349, -0.5);


  // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
