import _core.jsfx-inc

@init

// Andy's TPT State Variable Filter --------------------------------------------
function svf_lp(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 0;
  this.m1 = 0;
  this.m2 = 1;
);

function svf_hp(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = -k;
  this.m2 = -1;
);

function svf_bp(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 0;
  this.m1 = k;
  this.m2 = 0;
);

function svf_ap(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = -2 * k;
  this.m2 = 0;
);

function svf_notch(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = -k;
  this.m2 = 0;
);

function svf_bell(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / (q  * A);
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = k * (A * A - 1);
  this.m2 = 0;
);

// ready to be added back to the main signal
function svf_bell_bp(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / (q  * A);
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 0;
  this.m1 = k * (A * A - 1);
  this.m2 = 0;
);

function svf_lshelf(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / q;
  g = tan ($pi * freq / sr) / sqrt(A);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = k * (A - 1);
  this.m2 = A * A - 1;
);

function svf_hshelf(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / q;
  g = tan ($pi * freq / sr) * sqrt(A);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = A * A;
  this.m1 = k * (1 - A) * A;
  this.m2 = 1 - A * A;
);

function svf_reset_state() global()(
  this.ic1eq = this.ic2eq = 0;
);

function svf_tick(in) local (v1, v2, v3) global()(
  v3 = in - this.ic2eq;
  v1 = this.a1 * this.ic1eq + this.a2 * v3;
  v2 = this.ic2eq + this.a2 * this.ic1eq + this.a3 * v3;
  this.ic1eq = 2 * v1 - this.ic1eq;
  this.ic2eq = 2 * v2 - this.ic2eq;
  this.m0 * in + this.m1 * v1 + this.m2 * v2;
);

// -----------------------------------------------------------------------------
// Chapter 3.10 THE ART OF VA FILTER DESIGN
//
// Vadim Zavalishin
// https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf

function tpt_1p_reset (freq, samplerate) local(g) global()(
    g = tan ($pi * freq / samplerate);
    this.g0 = 1 / (1 + g);
    this.g_ap =  (1 - g) * this.g1;
    this.g = g * this.g0;

);

function tpt_1p_tick_lp (in) local(v, lp) global()(
    v      = (in - this.s) * this.g;
    lp     = v + this.s;
    this.s = lp + v;
    lp;
);

function tpt_1p_tick_hp (in)(
    in - this.tpt_1p_tick_lp (in);
);

function tpt_1p_tick_ap (in) local(lp, hp)(
    lp = this.tpt_1p_tick_lp (in);
    lp - (in - lp);
);

function tpt_1p_get_g_lp (in) local(v, lp) global()(
  this.g;
);

function tpt_1p_get_g_hp (in) local(v, lp) global()(
  this.g0;
);

function tpt_1p_get_g_ap (in) local(v, lp) global()(
  this.g_ap;
);

function tpt_1p_get_s_lp (in) local(v, lp) global()(
  this.g * this.s;
);

function tpt_1p_get_s_hp (in) local(v, lp) global()(
  -this.g * this.s;
);

function tpt_1p_get_s_ap (in) local(v, lp) global()(
  2 * this.g * this.s;
);

//------------------------------------------------------------------------------
// 1 pole no zero LP for smoothing
function smooth_lp_1p_0z_init (freq, samplerate)  global()(
    this.b1 = exp (-2 * $pi  * freq / samplerate);
    this.a0 = 1 - this.b1;
);

function smooth_lp_1p_0z_tick (in)  global()(
    this.y1 = in * this.a0 + this.y1 * this.b1;
    this.y1;
);
// -----------------------------------------------------------------------------
function set_rbj_peak_filter_coeffs (freq, gain, q, srate)
  local(A, w0, cosw0, alpha, alpha_div_a, a0i) global() (
  A = (10 ^ (gain/40));
  w0 = 2 * $pi * freq / srate;
  cosw0 = cos(w0);
  alpha = sin(w0) / (2 * q);
  alpha_div_a = alpha / A;

  a0i = 1 / (1 + alpha_div_a);

  this.b0 = (1 + alpha * A) * a0i;
  this.b1 = (-2 * cosw0) * a0i;
  this.b2 = (1 - alpha * A) * a0i;
  this.a1 = this.b1;
  this.a2 = (1 - alpha_div_a) * a0i;
);

function peak_tdf2_biquad_init(freq, gain, q, srate) global()(
  this.set_rbj_peak_filter_coeffs (freq, gain, q, srate);
  this.z1 = 0;
  this.z2 = 0;
);

function peak_df1_biquad_init(freq, gain, q, srate) global()(
  this.peak_tdf2_biquad_init(freq, gain, q, srate);
  this.y1 = 0;
  this.y2 = 0;
);

function biquad_df1_tick(x) local(out) global()(
  out  = x * this.b0 + this.z1 * this.b1 + this.b2 * this.z2;
  out += -this.a1 * this.y1 - this.a2 * this.y2;
  this.z2 = this.z1;
  this.z1 = x;
  this.y2 = this.y1;
  this.y1 = out;
  out;
);

function biquad_tdf2_tick(x) local(out) global()(
  out     = (x * this.b0 + this.z1);
  this.z1 = x * this.b1 + this.z2 - this.a1 * out;
  this.z2 = x * this.b2 - this.a2 * out;
  out;
);

function get_quadratic_roots (a, b, c) global()
(
  this.re0 = -b / (2 * a);
  this.im0 = (b * b) - 4 * a * c;
  this.im0 < 0 ? (
    this.im0 = sqrt (-this.im0) / (2 * a);
    this.im1 = -this.im0;
    this.re1 = this.re0;
  ) : ( //else
    this.im0 = sqrt (this.im0) / (2 * a);
    this.re1 = this.re0 - this.im0;
    this.re0 += this.im0;
    this.im0 = 0;
    this.im1 = 0;
  );
);

function two_rpoles_init (re1, re2) global()(
  // partial fraction expansion on two real poles
  this.p1 = re1;
  this.p2 = re2;
  this.kp1  = 1 / (1 - re2 / re1);
  this.kp2  = 1 / (1 - re1 / re2);
  this.yp1  = 0;
  this.yp2  = 0;
);

function two_rpoles_tick (x) global()(
  this.yp1 = this.p1 * this.yp1 + x;
  this.yp2 = this.p2 * this.yp2 + x;
  this.yp1 * this.kp1 + this.yp2 * this.kp2;
);

function cpole_init (re, im) global()(
  this.re = re;
  this.im = im;
  this.y_re = 0;
  this.y_im = 0;
);

function cpole_tick (x_re, x_im) local (re) global()(
  // in complex: (pole * y) + x

  // complex mul
  re        = this.re * this.y_re - this.im * this.y_im;
  this.y_im = this.re * this.y_im + this.im * this.y_re;
  this.y_re = re;
  // complex add
  this.y_re = x_re + this.y_re;
  this.y_im = x_im + this.y_im;
);

function czero_init (re, im) global()(
  this.re = re;
  this.im = im;
  this.z_re = 0;
  this.z_im = 0;
  this.y_re = 0; // last results stored here, two values can't be returned
  this.y_im = 0; // last results stored here, two values can't be returned
);

function czero_tick (x_re, x_im) local (re) global()(
  // in complex: x - (zero * z)

  // complex mul
  re        = this.re * this.z_re - this.im * this.z_im;
  this.y_im = this.re * this.z_im + this.im * this.z_re;
  this.y_re = re;
  // complex sub
  this.y_re = x_re - this.y_re;
  this.y_im = x_im - this.y_im;
  this.z_re = x_re;
  this.z_im = x_im;
);
//------------------------------------------------------------------------------
function dc_blocker_init (freq, samplerate)  global()(
    this.lp.smooth_lp_1p_0z_init (freq, samplerate);
);

function dc_blocker_tick (in) local (y1)  global()(
    y1 = this.lp.y1;
    this.lp.smooth_lp_1p_0z_tick (in);
    in - y1;
);
//------------------------------------------------------------------------------
// An on-memory TDF2 single pole biquad
_TDF2_MEM.B1 = 0;
_TDF2_MEM.B0 = 1;
_TDF2_MEM.A1 = 2;
_TDF2_MEM.S1 = 3;
_TDF2_MEM.N_STATES = 4;

function tdf2_mem_init (ptr, b0, b1, a1)
    local() global (_TDF2_MEM*)(

    ptr[_TDF2_MEM.B0] = b0;
    ptr[_TDF2_MEM.B1] = b1;
    ptr[_TDF2_MEM.A1] = a1;
);

function tdf2_mem_init_lp (ptr, freq, samplerate)
    local(w, n) global (_TDF2_MEM*)(

    w = tan ($pi * freq / samplerate);
    n = 1. / (1. + w);

    ptr[_TDF2_MEM.B0] = w * n;
    ptr[_TDF2_MEM.B1] = w * n;
    ptr[_TDF2_MEM.A1] = n * (w - 1);
);

function tdf2_mem_init_hp (ptr, freq, samplerate)
    local(w, n) global (_TDF2_MEM*)(

    w = tan ($pi * freq / samplerate);
    n = 1. / (1. + w);

    ptr[_TDF2_MEM.B0] = n;
    ptr[_TDF2_MEM.B1] = -n;
    ptr[_TDF2_MEM.A1] = n * (w - 1);
);

function tdf2_mem_init_ap (ptr, freq, samplerate)
    local(w, n) global (_TDF2_MEM*)(

    w = tan ($pi * freq / samplerate);
    n = 1. / (1. + w);

    ptr[_TDF2_MEM.B0] = n * (w - 1);
    ptr[_TDF2_MEM.B1] = 1;
    ptr[_TDF2_MEM.A1] = n * (w - 1);
);

function tdf2_mem_reset_state (ptr)
    local() global(_TDF2_MEM*)(

    ptr[_TDF2_MEM.S1] = 0;
);

function tdf2_mem_size ()
    local() global(_TDF2_MEM*)(
    _TDF2_MEM.N_STATES;
);

function tdf2_mem_tick (ptr, in)
    local(y, b0, b1, a1) global(_TDF2_MEM*)(

    b0 = ptr[_TDF2_MEM.B0];
    b1 = ptr[_TDF2_MEM.B1];
    a1 = ptr[_TDF2_MEM.A1];
    y = in * b0 + ptr[_TDF2_MEM.S1];
    ptr[_TDF2_MEM.S1] = in * b1 - y * a1;
    y;
);
//------------------------------------------------------------------------------
// Private functions for the spectral tilt filters
function _sptilt_prewarp (w, wp, t) global() (
    wp * tan (w * t * 0.5) / tan (wp * t * 0.5);
);
// minus zero i in s plane
function _sptilt_mz (w0, ratio, alpha, i) global() (
    w0 * pow (ratio, (-alpha + i));
);
// minus pole i in s plane
function _sptilt_mp (w0, ratio, i) global() (
    w0 * pow (ratio, i);
);
// prewarping for bilinear transform
function _sptilt_mzh (w0, ratio, alpha, t, i) global() (
    _sptilt_prewarp (_sptilt_mz (w0, ratio, alpha, i), w0, t);
);
// prewarping for bilin0ear transform
function _sptilt_mph (w0, ratio, t, i) global() (
   _sptilt_prewarp (_sptilt_mp (w0, ratio, i), w0, t);
);

// spectral tilt, from faust code, but tweaked to use bandwidth in octaves instead
// of. Useful to e.g
// get 3dB/oct filters.
//
// spectral_tilt(N,f0,bw,alpha) = seq(i,N,sec(i)) with {
//   sec(i) = g * tf1s(b1,b0,a0,1) with {
//     g = a0/b0; // unity dc-gain scaling
//     b1 = 1.0;
//     b0 = mzh(i);
//     a0 = mph(i);
//     mzh(i) = prewarp(mz(i),SR,w0); // prewarping for bilinear transform
//     mph(i) = prewarp(mp(i),SR,w0);
//     prewarp(w,SR,wp) = wp * tan(w*T/2) / tan(wp*T/2) with { T = 1/SR; };
//     mz(i) = w0 * r ^ (-alpha+i); // minus zero i in s plane
//     mp(i) = w0 * r ^ i; // minus pole i in s plane
//     w0 = 2 * PI * f0; // radian frequency of first pole
//     f1 = f0 + bw; // upper band limit
//     r = (f1/f0)^(1.0/float(N-1)); // pole ratio (2 => octave spacing)
//   };
// };
//
// BLT for the analog prototype above.
//
// tf1s(b1,b0,a0,w1) = tf1(b0d,b1d,a1d)
// with {
//   c   = 1/tan(w1*0.5/SR); // bilinear-transform scale-factor
//   d   = a0 + c;
//   b1d = (b0 - b1*c) / d;
//   b0d = (b0 + b1*c) / d;
//   a1d = (a0 - c) / d;
// };
//
// spectral tilt filter from faust
function sptilt_init (order)
    local(i, t, w, ratio, fptr, c, d, b1, b0, a1, mzh, mph, g) global()(

    this.filt.array2d_init (order, tdf2_mem_size());
    this.g.array_init (order);
);

// spectral tilt filter from faust
function sptilt_reset (f0, bw_oct, alpha, samplerate)
    local(i, t, w, ratio, fptr, c, d, b1d, b0d, a1d, mzh, mph, g, order, f1)
    global()(

    order = this.filt.size_a;
    t = 1 / samplerate;
    w = 2 * $pi * f0;
    f1 = f0 * pow (2, bw_oct);
    f1 = min (f1, (samplerate * 0.5) - 10); // 10 Hz margin on Nyquist
    ratio = pow (f1 / f0, 1 / (order - 1));
    c = 1 / tan (1 * 0.5 / samplerate); // 1 = w1

    i = 0;
    loop (order,
        // Analog part
        fptr = this.filt.array2d_ptr (i);
        mzh = _sptilt_mzh (w, ratio, alpha, t, i); // b0
        mph = _sptilt_mph (w, ratio, t, i); // a0
        // 1 = b1
        this.g.ptr[i] = mph / mzh;

        // BLT, (tf1s on faust). b1 = 1, b0 = mzh, a0 = mph, w1 = 1
        d   = mph + c;
        b1d = (mzh - 1 * c) / d;
        b0d = (mzh + 1 * c) / d;
        a1d = (mph - c) / d;

        tdf2_mem_init (fptr, b0d, b1d, a1d);
        i += 1;
    );
);

// "fc", the point of 0dB gain will be off unless high orders +20 are used.
// Best effort.
function sptilt_reset_as_tilt_eq (fc, bw_oct, alpha, samplerate)
    local (f0, db, order) global()(

    order = this.filt.size_a;
    f0 = fc * pow (2, bw_oct * -0.5); // move back half number of octaves

    this.sptilt_reset (f0, bw_oct, alpha, samplerate);

    // hack the last coefficient to adjust the EQ towards the midpoint
    db = bw_oct * -alpha * (6 + 6 / (order - 1)) * 0.5;
    this.g.ptr[order - 1] *= pow (10, db * (1/20));
);

function sptilt_tick (in)
    local(i, out) global(_2_DBG)(

    i = 0;
    out = in;
    loop (this.filt.size_a,
        out = this.g.ptr[i] * tdf2_mem_tick (this.filt.array2d_ptr (i), out);
        i += 1;
    );
    out;
);
//------------------------------------------------------------------------------
// as an interpolator
function thiran1_reset (d) global() (
  this.c = (1 - d) / (1 + d);
);

// as an allpass
function thiran1_reset(freq, srate) local (d) global() (
  d = tan ($pi * freq / srate);
  this.c = (1 - d) / (1 + d);
  this.c = -this.c;
);

// as an allpass
function thiran1_reset_no_prewarp  (freq, srate) local (d) global() (
  d = 2 * freq / srate;
  this.c = (1 - d) / (1 + d);
  this.c = -this.c;
);

function thiran1_tick (in) global() (
  this.y = this.c * in + this.x - this.c * this.y;
  this.x = in;
  this.y;
);
//------------------------------------------------------------------------------
// as an interpolator
function thiran2_reset (d) global() (
  this.c1 = (1 - d) / (1 + d);
  this.c2 = ((d - 1) * (d - 2)) / ((d + 1) * (d + 2));
  this.c1 = this.c1;
  this.c2 = this.c2;
);

function thiran2_tick (in) global() local (y) (
  y  = this.c2 * in + this.c1 * this.x1 + this.x2;
  y -= this.c1 * this.y1 + this.c2 * this.y2;
  this.x2 = this.x1;
  this.x1 = in;
  this.y2 = this.y1;
  this.y1 = y;
);
//------------------------------------------------------------------------------
// Nested Schroeder Allpass cascade with unit delays. Also called lattice it
// seems (but in this case each section has equal gains)
function nested_ap_init(size) global() (
  this.g.array_init (size);
  this.z.array_init (size);
  this.size = size;
);

function nested_ap_set_gain(g, idx) global() (
  this.g.ptr[idx] = 0;
);

function nested_ap_set_gains(g_ptr) global() (
  memcpy (this.g.ptr, g_ptr, this.size);
);

function nested_ap_get_gains_ptr() global() (
  this.g.ptr;
);

function nested_ap_size() global() (
  this.size;
);

function nested_ap_tick(in) global() local (fwd, bwd, out, i)(
  fwd = in + this.z.ptr[0] * -this.g.ptr[0];
  out = this.z.ptr[0] + fwd * this.g.ptr[0];
  i = 1;
  loop(this.size - 1,
    fwd += this.z.ptr[i] * -this.g.ptr[i];
    bwd  = this.z.ptr[i] + fwd * this.g.ptr[i];
    this.z.ptr[i - 1] = bwd;
    i += 1;
  );
  this.z.ptr[i - 1] = fwd;
  out;
);
//------------------------------------------------------------------------------
// 1-pole allpass cascade
function ap_1p_cascade_init (n_items) local() global() (
  this.array_init (n_items * 4);
  this.n_items = n_items;
);

function ap_1p_cascade_reset_no_prewarp (idx, freq, srate)
  local (ptr, g, igp1) global() (

  ptr = this.ptr + idx * 4;
  g = $pi * freq / srate;
  igp1 = 1 / (g + 1);
  ptr[0/*G*/] = (2 * g) * igp1;
  ptr[2/*g-1*/] = (g - 1);
  ptr[3/*1/g+1*/] = igp1;
);

function ap_1p_cascade_reset (idx, freq, srate)
  local (ptr, g, igp1) global() (

  ptr = this.ptr + idx * 4;
  g = tan ($pi * freq / srate);
  igp1 = 1 / (g + 1);
  ptr[0/*G*/] = (2 * g) * igp1;
  ptr[2/*g-1*/] = (g - 1);
  ptr[3/*1/g+1*/] = igp1;
);

function ap_1p_cascade_tick (idx, in) local (ptr, xs, s) global() (
  ptr = this.ptr + idx * 4;
  xs = in - ptr[1/*S*/];
  s = ptr[1/*S*/] + xs * ptr[0/*G*/];
  ptr[1/*S*/] = s;
  s - xs;
);

function ap_1p_cascade_tick_cascade (in, count) local (i, out) global() (
  out = in;
  i = 0;
  loop(count,
    out = ap_1p_cascade_tick (out, i);
    i += 1;
  );
  out;
);

// The ART ov VA filter (Vadim Zabalishin) design 3.10
//
// y = yLP - yHP
//
//     x(g-1)+2s      g-1      2s
// y = ---------  G = ---  S = ---
//        1+g         g+1      1+g
//
// Get G and S for zero delay feedback computations
//
// Not stored, optimized for sample rate modulation.

function ap_1p_cascade_get_g (idx) local (ptr) global() (
  ptr = this.ptr + idx * 4;
  ptr[2/*g-1*/] * ptr[3/*1/g+1*/];
);

function ap_1p_cascade_get_s (idx) local (ptr) global() (
  ptr = this.ptr + idx * 4;
  2 * ptr[1/*s*/] * ptr[3/*1/g+1*/];
);
//------------------------------------------------------------------------------
// 2-pole allpass cascade
function ap_2p_cascade_init (n_items) local() global() (
  this.array_init(n_items * 5);
  this.n_items = n_items;
);

function ap_2p_cascade_reset_no_prewarp (idx, freq, q, srate) local (ptr, g, k) global() (
  ptr = this.ptr + idx * 5;
  g = ($pi * freq / srate);
  k = 1 / q;
  ptr[0/*g*/] = g;
  ptr[1/*k*/] = k;
  ptr[2/*2*den*/] = 1 / (g * (g + k) + 1);
);

function ap_2p_cascade_reset (idx, freq, q, srate) local (ptr, g, k) global() (
  ptr = this.ptr + idx * 5;
  g = tan ($pi * freq / srate);
  k = 1 / q;
  ptr[0/*g*/] = g;
  ptr[1/*k*/] = k;
  ptr[2/*2*den*/] = 1 / (g * (g + k) + 1);
);

function ap_2p_cascade_tick (idx, in) local (ptr, bp, bp2, v22) global() (
  ptr = this.ptr + idx * 5;
  bp = (ptr[0/*g*/] * (in - ptr[4/*s2*/]) + ptr[3/*s1*/]) * ptr[2/*2*den*/];
  bp2 = 2 * bp;
  ptr[3/*s1*/] = bp2 - ptr[3/*s1*/];
  v22 = ptr[0/*g*/] * bp2;
  ptr[4/*s2*/] += v22;
  in - ptr[1/*k*/] * bp2;
);

function ap_2p_cascade_tick_cascade (in, count) local (i, out) global() (
  out = in;
  i = 0;
  loop(count,
    out = ap_2p_cascade_tick (out, i);
    i += 1;
  );
  out;
);

// The ART ov VA filter design (Vadim Zabalishin). chapter 4.4
//
// yAP = 1 - 2 k * yBP
//
// expanded
//
//        2 g k s2 - 2 g k in - 2 k s1              -2 g k                2 k (g s2 - s1)
// yAP = ---------------------------- + x    G = -------------- + x  S = -----------------
//             g^2 + g k + 1                      g^2 + g k + 1            g^2 + g k + 1
//
// Get G and S for zero delay feedback computations


function ap_2p_cascade_get_g (idx) local (ptr) global() (
  ptr = this.ptr + idx * 5;
  -2 * ptr[0/*g*/] * ptr[1/*k*/] * ptr[2/*2*den*/] + 1;
);

function ap_2p_cascade_get_s (idx) local (ptr, r) global()(
  ptr = this.ptr + idx * 5;
  r = 2 * ptr[1/*k*/] * (ptr[0/*g*/] * ptr[4/*s2*/] - ptr[3/*s1*/]);
  r *= ptr[2/*2*den*/];
);

//------------------------------------------------------------------------------
//1 pole naive shelf (cutoff freq not adjusted at db/2)
function lshelf_1p_reset (freq, db, srate)
  global() local (g, inv1pg)(
  this.k = exp (db * log(10)/20) - 1;
  g = tan ($pi * freq / srate);
  this.g0 = 1 / (1 + g);
  this.g1 = g * this.g0;
);

function lshelf_1p_reset_no_prewarp (freq, db, srate)
  global() local (g, inv1pg)(
  this.k = exp (db * log(10)/20) - 1;
  g = $pi * freq / srate;
  this.g0 = 1 / (1 + g);
  this.g1 = g * this.g0;
);

function lshelf_1p_tick (in) global() local (v, y, x)(
  v = (in - this.s) * this.g1;
  y = v + this.s;
  this.s = y + v;
  in + this.k * y;
);

//          -g⋅k⋅(s₁ - x) + x⋅(g + 1)
// LS_1_y = ─────────────────────────
//                    g + 1
//          g⋅k + g + 1
// LS_1_G = ───────────
//             g + 1
//          g⋅k⋅s₁
// LS_1_S = ────────
//           g + 1

function lshelf_1p_get_g () global() (
  (1 + this.k)  * this.g1 + this.g0;
);

function lshelf_1p_get_s () global() (
  this.s * this.k * this.g1;
);

//------------------------------------------------------------------------------
//1 pole naive shelf (cutoff freq not adjusted at db/2)
function hshelf_1p_reset (freq, db, srate) global() (
  this.lshelf_1p_reset (freq, db, srate);
);

function hshelf_1p_reset_no_prewarp (freq, db, srate) global() (
  this.lshelf_1p_reset_no_prewarp (freq, db, srate);
);

function hshelf_1p_tick (in) global() local (v, y, x)(
  v = (in - this.s) * this.g1;
  y = v + this.s;
  this.s = y + v;
  in + this.k * (in - y); // x - y = from lp to hp
);

//          g⋅k⋅s₁ + g⋅x + k⋅x + x
// HS_1_y = ──────────────────────
//                  g + 1
//          g + k + 1
// HS_1_G = ─────────
//            g + 1
//          -g⋅k⋅s₁
// HS_1_S = ──────
//          g + 1

function hshelf_1p_get_g () global() (
  (1 + this.k)  * this.g0 + this.g1;
);

function hshelf_1p_get_s () global() (
  -this.s * this.k * this.g1;
);
//------------------------------------------------------------------------------
// global ZDF feedback loop
function get_zdf (in, k, G_S_ptr, n_elems)
  global() local (i, G, S, gv , sv) (

  i = 0;
  G = 1;
  S = 0;
  loop (n_elems,
    gv = G_S_ptr[i];
    sv = G_S_ptr[i + 1];
    G *= gv;
    S *= gv;
    S += sv;
    i += 2;
  );
  (in - k * S) / (k * G + 1);
);
//------------------------------------------------------------------------------
// global ZDF feedback loop with "x/sqrt(x**2*h + 1)" sigmoid with variable
// hardness (h parameter)solved with 2 rounds Mystran's linearization. See Urs
// Heckmann and Mystran's comments:
//
// https://www.kvraudio.com/forum/viewtopic.php?start=375&t=350246&sid=eb35460aab9d1bda3038aa78018b5182
//
// Topology:
//          ________  __________
//       u |        | |        |
// x ------|  f(x)  |-| G*_x+S |------ y
//    |-   |________| |________|     |
//    |            ________          |
//    |           |        |         |
//    ------------|  * k   |----------
//                |________|
//
// where:
// u = x - k * (G * linramp * u + S)
function get_zdf_sqrt_sigmoid_after_fb_junction (in, k, h, G_S_ptr, n_elems)
  global() local (i, G, S, gv, sv, u) (
  // The ART ov VA filter design (Vadim Zabalishin) 5.3
  i = 0;
  G = 1;
  S = 0;
  loop (n_elems,
    gv = G_S_ptr[i];
    sv = G_S_ptr[i + 1];
    G *= gv;
    S *= gv;
    S += sv;
    i += 2;
  );
  // 1st round
  u = (in - k * S) / (k * G * this.linramp + 1);
  this.linramp = 1 / sqrt (u * u * h + 1); // sqrt_sigmoid (u) / u
  // 2 st round (compensation)
  u += (in - k * S) / (k * G * this.linramp + 1);
  u *= 0.5;
  this.linramp = 1 / sqrt (u * u * h + 1);;
  u;
);
//------------------------------------------------------------------------------
// global ZDF feedback loop with "x/sqrt(x**2*h + 1)" sigmoid with variable
// hardness (h parameter) solved with 2 rounds Mystran's linearization. See Urs
// Heckmann and Mystran's comments on this thread page:
//
// https://www.kvraudio.com/forum/viewtopic.php?start=375&t=350246&sid=eb35460aab9d1bda3038aa78018b5182
//
// Topology:
//         _________
//      u |        |
// x -----| G*_x+S |-------------- y
//    |-  |________|             |
//    |    ________    ________  |
//    |   |        |  |        | |
//    ----|  f(x)  |--|  * k   |--
//        |________|  |________|
//
// where:
// u = x - linramp * k * (Gu + S)
function get_zdf_sqrt_sigmoid_before_fb_junction (in, k, h, G_S_ptr, n_elems)
  global() local (i, G, S, gv, sv, u, l_in) (
  // The ART ov VA filter design (Vadim Zabalishin) 5.3
  i = 0;
  G = 1;
  S = 0;
  loop (n_elems,
    gv = G_S_ptr[i];
    sv = G_S_ptr[i + 1];
    G *= gv;
    S *= gv;
    S += sv;
    i += 2;
  );

  // 1 st round
  u = (in - k * S * this.linramp) / (k * G * this.linramp + 1);
  l_in = k * (G * u + S);
  this.linramp = 1 / sqrt (l_in * l_in * h + 1); // sqrt_sigmoid (u) / u
  // 2 st round (compensation)
  u += (in - k * S * this.linramp) / (k * G * this.linramp + 1);
  u *= 0.5;
  l_in = k * (G * u + S);
  this.linramp = 1 / sqrt (l_in * l_in * h + 1);
  u;
);
//------------------------------------------------------------------------------
// global ZDF feedback loop with "x/sqrt(x**2*h + 1)" sigmoid with variable
// hardness (h parameter) solved with 2 rounds Mystran's linearization. See Urs
// Heckmann and Mystran's comments on this thread page:
//
// https://www.kvraudio.com/forum/viewtopic.php?start=375&t=350246&sid=eb35460aab9d1bda3038aa78018b5182
//
// Topology:
//         __________
//      u |          |
// x -----| G1*_x+S1 |---------------------------- y
//    |-  |__________|                          |
//    |    __________   ________    ________    |
//    |   |          |  |        |  |        |  |
//    ----| G2*_x+S2 |--|  f(x)  |--|  * k   |--
//        |__________|  |________|  |________|
//
// where:
// u = x - (G2 (linramp * k * (G1 u + S1)) + S2)
// u = (-G2 S1 k linramp - S2 + in) / (G1 G2 k linramp + 1)

function get_zdf_sqrt_sigmoid_before_fb_junction_pp(
  in, k, h, G_S1_ptr, G_S2_ptr, n_elems1, n_elems2
  ) global() local (i, G1, S1, G2, S2, gv, sv, u, l_in) (
  // The ART ov VA filter design (Vadim Zabalishin) 5.3
  i = 0;
  G1 = 1;
  S1 = 0;
  loop (n_elems1,
    gv = G_S1_ptr[i];
    sv = G_S1_ptr[i + 1];
    G1 *= gv;
    S1 *= gv;
    S1 += sv;
    i += 2;
  );
  i = 0;
  G2 = 1;
  S2 = 0;
  loop (n_elems2,
    gv = G_S2_ptr[i];
    sv = G_S2_ptr[i + 1];
    G2 *= gv;
    S2 *= gv;
    S2 += sv;
    i += 2;
  );
  // 1 st round
  u = (in - G2 * S1 * k * this.linramp - S2) /
    (G1 * G2 * k * this.linramp + 1);
  (h != 0) ? (
    l_in = k * (G1 * u + S1);
    this.linramp = 1 / sqrt (l_in * l_in * h + 1); // sqrt_sigmoid (u) / u

    // 2 st round (compensation)
    u += (in - G2 * S1 * k * this.linramp - S2) /
      (G1 * G2 * k * this.linramp + 1);
    u *= 0.5;
    l_in = k * (G1 * u + S1);
    this.linramp = 1 / sqrt (l_in * l_in * h + 1); // sqrt_sigmoid (u) / u
  ) : (
    this.linramp = 1;
  );
  u;
);
//------------------------------------------------------------------------------
