@init

// Andy's TPT State Variable Filter --------------------------------------------
function svf_lp(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 0;
  this.m1 = 0;
  this.m2 = 1;
);

function svf_hp(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = -k;
  this.m2 = -1;
);

function svf_ap(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = -2 * k;
  this.m2 = 0;
);

function svf_notch(freq, q, sr) local (k, g) global()(
  k = 1.0 / q;
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = -k;
  this.m2 = 0;
);

function svf_bell(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / (q  * A);
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = k * (A * A - 1);
  this.m2 = 0;
);

// ready to be added back to the main signal
function svf_bell_bp(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / (q  * A);
  g = tan ($pi * freq / sr);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 0;
  this.m1 = k * (A * A - 1);
  this.m2 = 0;
);

function svf_lshelf(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / q;
  g = tan ($pi * freq / sr) / sqrt(A);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = 1;
  this.m1 = k * (A - 1);
  this.m2 = A * A - 1;
);

function svf_hshelf(freq, q, g_db, sr) local (k, g, A) global()(
  A = pow (10, g_db * (1. / 40.));
  k = 1.0 / q;
  g = tan ($pi * freq / sr) * sqrt(A);
  this.a1 = 1.0 / (1.0 + g * (g + k));
  this.a2 = g * this.a1;
  this.a3 = g * this.a2;
  this.m0 = A * A;
  this.m1 = k * (1 - A) * A;
  this.m2 = 1 - A * A;
);

function svf_reset_state() global()(
  this.ic1eq = this.ic2eq = 0;
);

function svf_tick(in) local (v1, v2, v3) global()(
  v3 = in - this.ic2eq;
  v1 = this.a1 * this.ic1eq + this.a2 * v3;
  v2 = this.ic2eq + this.a2 * this.ic1eq + this.a3 * v3;
  this.ic1eq = 2 * v1 - this.ic1eq;
  this.ic2eq = 2 * v2 - this.ic2eq;
  this.m0 * in + this.m1 * v1 + this.m2 * v2;
);

// -----------------------------------------------------------------------------
// Chapter 3.10 THE ART OF VA FILTER DESIGN
//
// Vadim Zavalishin
// https://www.native-instruments.com/fileadmin/ni_media/downloads/pdf/VAFilterDesign_2.1.0.pdf

function tpt_1p_reset (freq, samplerate) local(inv_sr_d2, wd, wa) global()(
    inv_sr_d2 = 0.5 / samplerate;
    wd = 2 * $pi * freq;
    wa = 2 * samplerate * tan (wd * inv_sr_d2);
    this.g = wa * inv_sr_d2;
    this.g = this.g / (1 + this.g);
);


function tpt_1p_tick_lp (in) local(v, lp) global()(
    v      = (in - this.s) * this.g;
    lp     = v + this.s;
    this.s = lp + v;
    lp;
);

function tpt_1p_tick_hp (in)(
    in - this.tpt_1p_tick_lp (in);
);

function tpt_1p_tick_ap (in) local(lp, hp)(
    lp = this.tpt_1p_tick_lp (in);
    lp - (in - lp);
);
//------------------------------------------------------------------------------
// 1 pole no zero LP for smoothing
function smooth_lp_1p_0z_init (freq, samplerate)  global()(
    this.b1 = exp (-2 * $pi  * freq / samplerate);
    this.a0 = 1 - this.b1;
);

function smooth_lp_1p_0z_tick (in)  global()(
    this.y1 = in * this.a0 + this.y1 * this.b1;
    this.y1;
);
// -----------------------------------------------------------------------------
function set_rbj_peak_filter_coeffs (freq, gain, q, srate)
  local(A, w0, cosw0, alpha, alpha_div_a, a0i) global() (
  A = (10 ^ (gain/40));
  w0 = 2 * $pi * freq / srate;
  cosw0 = cos(w0);
  alpha = sin(w0) / (2 * q);
  alpha_div_a = alpha / A;

  a0i = 1 / (1 + alpha_div_a);

  this.b0 = (1 + alpha * A) * a0i;
  this.b1 = (-2 * cosw0) * a0i;
  this.b2 = (1 - alpha * A) * a0i;
  this.a1 = this.b1;
  this.a2 = (1 - alpha_div_a) * a0i;
);

function peak_tdf2_biquad_init(freq, gain, q, srate) global()(
  this.set_rbj_peak_filter_coeffs (freq, gain, q, srate);
  this.z1 = 0;
  this.z2 = 0;
);

function peak_df1_biquad_init(freq, gain, q, srate) global()(
  this.peak_tdf2_biquad_init(freq, gain, q, srate);
  this.y1 = 0;
  this.y2 = 0;
);

function biquad_df1_tick(x) local(out) global()(
  out  = x * this.b0 + this.z1 * this.b1 + this.b2 * this.z2;
  out += -this.a1 * this.y1 - this.a2 * this.y2;
  this.z2 = this.z1;
  this.z1 = x;
  this.y2 = this.y1;
  this.y1 = out;
  out;
);

function biquad_tdf2_tick(x) local(out) global()(
  out     = (x * this.b0 + this.z1);
  this.z1 = x * this.b1 + this.z2 - this.a1 * out;
  this.z2 = x * this.b2 - this.a2 * out;
  out;
);

function get_quadratic_roots (a, b, c) global()
(
  this.re0 = -b / (2 * a);
  this.im0 = (b * b) - 4 * a * c;
  this.im0 < 0 ? (
    this.im0 = sqrt (-this.im0) / (2 * a);
    this.im1 = -this.im0;
    this.re1 = this.re0;
  ) : ( //else
    this.im0 = sqrt (this.im0) / (2 * a);
    this.re1 = this.re0 - this.im0;
    this.re0 += this.im0;
    this.im0 = 0;
    this.im1 = 0;
  );
);

function two_rpoles_init (re1, re2) global()(
  // partial fraction expansion on two real poles
  this.p1 = re1;
  this.p2 = re2;
  this.kp1  = 1 / (1 - re2 / re1);
  this.kp2  = 1 / (1 - re1 / re2);
  this.yp1  = 0;
  this.yp2  = 0;
);

function two_rpoles_tick (x) global()(
  this.yp1 = this.p1 * this.yp1 + x;
  this.yp2 = this.p2 * this.yp2 + x;
  this.yp1 * this.kp1 + this.yp2 * this.kp2;
);

function cpole_init (re, im) global()(
  this.re = re;
  this.im = im;
  this.y_re = 0;
  this.y_im = 0;
);

function cpole_tick (x_re, x_im) local (re) global()(
  // in complex: (pole * y) + x

  // complex mul
  re        = this.re * this.y_re - this.im * this.y_im;
  this.y_im = this.re * this.y_im + this.im * this.y_re;
  this.y_re = re;
  // complex add
  this.y_re = x_re + this.y_re;
  this.y_im = x_im + this.y_im;
);

function czero_init (re, im) global()(
  this.re = re;
  this.im = im;
  this.z_re = 0;
  this.z_im = 0;
  this.y_re = 0; // last results stored here, two values can't be returned
  this.y_im = 0; // last results stored here, two values can't be returned
);

function czero_tick (x_re, x_im) local (re) global()(
  // in complex: x - (zero * z)

  // complex mul
  re        = this.re * this.z_re - this.im * this.z_im;
  this.y_im = this.re * this.z_im + this.im * this.z_re;
  this.y_re = re;
  // complex sub
  this.y_re = x_re - this.y_re;
  this.y_im = x_im - this.y_im;
  this.z_re = x_re;
  this.z_im = x_im;
);
//------------------------------------------------------------------------------
function dc_blocker_init (freq, samplerate)  global()(
    this.lp.smooth_lp_1p_0z_init (freq, samplerate);
);

function dc_blocker_tick (in) local (y1)  global()(
    y1 = this.lp.y1;
    this.lp.smooth_lp_1p_0z_tick (in);
    in - y1;
);
//------------------------------------------------------------------------------
// An on-memory TDF2 single pole biquad
_TDF2_MEM.B1 = 0;
_TDF2_MEM.B0 = 1;
_TDF2_MEM.A1 = 2;
_TDF2_MEM.S1 = 3;
_TDF2_MEM.N_STATES = 4;

function tdf2_mem_init (ptr, b0, b1, a1)
    local() global (_TDF2_MEM*)(

    ptr[_TDF2_MEM.B0] = b0;
    ptr[_TDF2_MEM.B1] = b1;
    ptr[_TDF2_MEM.A1] = a1;
);

function tdf2_mem_init_lp (ptr, freq, samplerate)
    local(w, n) global (_TDF2_MEM*)(

    w = tan ($pi * freq / samplerate);
    n = 1. / (1. + w);

    ptr[_TDF2_MEM.B0] = w * n;
    ptr[_TDF2_MEM.B1] = w * n;
    ptr[_TDF2_MEM.A1] = n * (w - 1);
);

function tdf2_mem_init_hp (ptr, freq, samplerate)
    local(w, n) global (_TDF2_MEM*)(

    w = tan ($pi * freq / samplerate);
    n = 1. / (1. + w);

    ptr[_TDF2_MEM.B0] = n;
    ptr[_TDF2_MEM.B1] = -n;
    ptr[_TDF2_MEM.A1] = n * (w - 1);
);

function tdf2_mem_init_ap (ptr, freq, samplerate)
    local(w, n) global (_TDF2_MEM*)(

    w = tan ($pi * freq / samplerate);
    n = 1. / (1. + w);

    ptr[_TDF2_MEM.B0] = n * (w - 1);
    ptr[_TDF2_MEM.B1] = 1;
    ptr[_TDF2_MEM.A1] = n * (w - 1);
);

function tdf2_mem_reset_state (ptr)
    local() global(_TDF2_MEM*)(

    ptr[_TDF2_MEM.S1] = 0;
);

function tdf2_mem_size ()
    local() global(_TDF2_MEM*)(
    _TDF2_MEM.N_STATES;
);

function tdf2_mem_tick (ptr, in)
    local(y, b0, b1, a1) global(_TDF2_MEM*)(

    b0 = ptr[_TDF2_MEM.B0];
    b1 = ptr[_TDF2_MEM.B1];
    a1 = ptr[_TDF2_MEM.A1];
    y = in * b0 + ptr[_TDF2_MEM.S1];
    ptr[_TDF2_MEM.S1] = in * b1 - y * a1;
    y;
);
//------------------------------------------------------------------------------
// Private functions for the spectral tilt filters
function _sptilt_prewarp (w, wp, t) global() (
    wp * tan (w * t * 0.5) / tan (wp * t * 0.5);
);
// minus zero i in s plane
function _sptilt_mz (w0, ratio, alpha, i) global() (
    w0 * pow (ratio, (-alpha + i));
);
// minus pole i in s plane
function _sptilt_mp (w0, ratio, i) global() (
    w0 * pow (ratio, i);
);
// prewarping for bilinear transform
function _sptilt_mzh (w0, ratio, alpha, t, i) global() (
    _sptilt_prewarp (_sptilt_mz (w0, ratio, alpha, i), w0, t);
);
// prewarping for bilin0ear transform
function _sptilt_mph (w0, ratio, t, i) global() (
   _sptilt_prewarp (_sptilt_mp (w0, ratio, i), w0, t);
);

// spectral tilt, from faust code, but tweaked to use bandwidth in octaves instead
// of. Useful to e.g
// get 3dB/oct filters.
//
// spectral_tilt(N,f0,bw,alpha) = seq(i,N,sec(i)) with {
//   sec(i) = g * tf1s(b1,b0,a0,1) with {
//     g = a0/b0; // unity dc-gain scaling
//     b1 = 1.0;
//     b0 = mzh(i);
//     a0 = mph(i);
//     mzh(i) = prewarp(mz(i),SR,w0); // prewarping for bilinear transform
//     mph(i) = prewarp(mp(i),SR,w0);
//     prewarp(w,SR,wp) = wp * tan(w*T/2) / tan(wp*T/2) with { T = 1/SR; };
//     mz(i) = w0 * r ^ (-alpha+i); // minus zero i in s plane
//     mp(i) = w0 * r ^ i; // minus pole i in s plane
//     w0 = 2 * PI * f0; // radian frequency of first pole
//     f1 = f0 + bw; // upper band limit
//     r = (f1/f0)^(1.0/float(N-1)); // pole ratio (2 => octave spacing)
//   };
// };
//
// BLT for the analog prototype above.
//
// tf1s(b1,b0,a0,w1) = tf1(b0d,b1d,a1d)
// with {
//   c   = 1/tan(w1*0.5/SR); // bilinear-transform scale-factor
//   d   = a0 + c;
//   b1d = (b0 - b1*c) / d;
//   b0d = (b0 + b1*c) / d;
//   a1d = (a0 - c) / d;
// };
//
// spectral tilt filter from faust
function sptilt_init (order)
    local(i, t, w, ratio, fptr, c, d, b1, b0, a1, mzh, mph, g) global()(

    this.filt.array2d_init (order, tdf2_mem_size());
    this.g.array_init (order);
);

// spectral tilt filter from faust
function sptilt_reset (f0, bw_oct, alpha, samplerate)
    local(i, t, w, ratio, fptr, c, d, b1d, b0d, a1d, mzh, mph, g, order, f1)
    global()(

    order = this.filt.size_a;
    t = 1 / samplerate;
    w = 2 * $pi * f0;
    f1 = f0 * pow (2, bw_oct);
    f1 = min (f1, (samplerate * 0.5) - 10); // 10 Hz margin on Nyquist
    ratio = pow (f1 / f0, 1 / (order - 1));
    c = 1 / tan (1 * 0.5 / samplerate); // 1 = w1

    i = 0;
    loop (order,
        // Analog part
        fptr = this.filt.array2d_ptr (i);
        mzh = _sptilt_mzh (w, ratio, alpha, t, i); // b0
        mph = _sptilt_mph (w, ratio, t, i); // a0
        // 1 = b1
        this.g.ptr[i] = mph / mzh;

        // BLT, (tf1s on faust). b1 = 1, b0 = mzh, a0 = mph, w1 = 1
        d   = mph + c;
        b1d = (mzh - 1 * c) / d;
        b0d = (mzh + 1 * c) / d;
        a1d = (mph - c) / d;

        tdf2_mem_init (fptr, b0d, b1d, a1d);
        i += 1;
    );
);

// "fc", the point of 0dB gain will be off unless high orders +20 are used.
// Best effort.
function sptilt_reset_as_tilt_eq (fc, bw_oct, alpha, samplerate)
    local (f0, db, order) global()(

    order = this.filt.size_a;
    f0 = fc * pow (2, bw_oct * -0.5); // move back half number of octaves

    this.sptilt_reset (f0, bw_oct, alpha, samplerate);

    // hack the last coefficient to adjust the EQ towards the midpoint
    db = bw_oct * -alpha * (6 + 6 / (order - 1)) * 0.5;
    this.g.ptr[order - 1] *= pow (10, db * (1/20));
);

function sptilt_tick (in)
    local(i, out) global(_2_DBG)(

    i = 0;
    out = in;
    loop (this.filt.size_a,
        out = this.g.ptr[i] * tdf2_mem_tick (this.filt.array2d_ptr (i), out);
        i += 1;
    );
    out;
);
//------------------------------------------------------------------------------
// as an interpolator
function thiran1_reset (d) global() (
  this.c = (1 - d) / (1 + d);
);

// as an allpass
function thiran1_reset(freq, srate) local (d) global() (
  d = tan ($pi * freq / srate);
  this.c = (1 - d) / (1 + d);
  this.c = -this.c;
);

// as an allpass
function thiran1_reset_no_prewarp  (freq, srate) local (d) global() (
  d = 2 * freq / srate;
  this.c = (1 - d) / (1 + d);
  this.c = -this.c;
);

function thiran1_tick (in) global() (
  this.y = this.c * in + this.x - this.c * this.y;
  this.x = in;
  this.y;
);
//------------------------------------------------------------------------------
// as an interpolator
function thiran2_reset (d) global() (
  this.c1 = (1 - d) / (1 + d);
  this.c2 = ((d - 1) * (d - 2)) / ((d + 1) * (d + 2));
  this.c1 = this.c1;
  this.c2 = this.c2;
);

function thiran2_tick (in) global() local (y) (
    y  = this.c2 * in + this.c1 * this.x1 + this.x2;
    y -= this.c1 * this.y1 + this.c2 * this.y2;
    this.x2 = this.x1;
    this.x1 = in;
    this.y2 = this.y1;
    this.y1 = y;
);
//------------------------------------------------------------------------------
