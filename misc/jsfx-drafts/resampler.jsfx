desc:Resampler test

slider1:ratio=0.5<0.25,2.,0.25>Ratio
slider2:taps=32<4,1024,1>Taps
slider3:att=100.<0,300,1>Att
slider4:cutoff=0.95<0.8,1,0.01>Cutoff

import _core.jsfx-inc
import _fir.jsfx-inc

@init

// hack to not consume extra memory, normally these filters have fixed
// parameters and are intialized on @init (setting)

realloc_memtop = _memtop_ptr;

@slider

_memtop_ptr = realloc_memtop;

tgt_process_rate = srate * ratio;

// cutoff at the target rate when downsampling
stage1.resampler_2c_init(
  tgt_process_rate,
  srate,
  taps,
  taps / 2,
  tgt_process_rate * 0.5 * cutoff,
  att,
  1
  );
// cutoff near nyquist when upsampling
stage2.resampler_2c_init(
  srate,
  tgt_process_rate,
  taps,
  taps / 2,
  min (tgt_process_rate, srate) * 0.5 * cutoff,
  att,
  1
  );

// N * 2 (channels)
max_spls_stage_1 = stage1.resampler_2c_max_n_out_samples() * 2;
max_spls_stage_2 = stage2.resampler_2c_max_n_out_samples() * 2;

//  2 because we start with N zero samples, as fractional rates
// may have a 1 sample jitter on the count of number of samples returned.
outs.deque_init (max (max_spls_stage_2, max_spls_stage_1) * 2);
loop (max (max_spls_stage_1, max_spls_stage_2),
  outs.deque_push (0);
);

// 2: N channels
stage1_buff.array_init (max_spls_stage_1);
stage2_buff.array_init (max_spls_stage_2);

@sample

stage1_buff.array_clear();
n_spls_1 = stage1.resampler_2c_tick (stage1_buff.ptr, spl0, spl1);

spl_idx = 0;
loop (n_spls_1,

  // Some DSP here

  stage2_buff.array_clear();
  n_spls_2 = stage2.resampler_2c_tick(
    stage2_buff.ptr, stage1_buff.ptr[spl_idx], stage1_buff.ptr[spl_idx + 1]
    );
  i = 0;
  loop (n_spls_2 * 2, // *2 : two channels
    outs.deque_push (stage2_buff.ptr[i]);
    i += 1;
  );
  n_spls_2 = 0;
  spl_idx += 2;
);

spl0 = outs.deque_pop();
spl1 = outs.deque_pop();

spl_count += 1;
