//desc: ping pong
slider1:decay_p=0.65<0,1,0.01> Decay

slider3:mod=0.<0,1,0.01> Mod
slider4:character=0.<0,1,0.01> Character

slider6:hi=1<0,1,0.01> highs
slider7:lo=1<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=0<-40, 12,0.1> Wet dB
slider20:db_dry=-60<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc
import _filters.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 1;
lfo1.lfo_bank_init (n_lfos, 1);
lfo1.ret.array_init (n_lfos);
lfo1.lfo_bank_reset_phase (0);

lfo2.lfo_bank_init (n_lfos, 1);
lfo2.ret.array_init (n_lfos);
lfo2.lfo_bank_reset_phase (0);

lfo3.lfo_bank_init (n_lfos, 1);
lfo3.ret.array_init (n_lfos);
lfo3.lfo_bank_reset_phase (0);

lfo4.lfo_bank_init (n_lfos, 1);
lfo4.ret.array_init (n_lfos);
lfo4.lfo_bank_reset_phase (0);

eq1l.svf_bell (440, 0.48, 1.5, k.src.srate);
eq1r.svf_bell (460, 0.48, 1.5, k.src.srate);

function bipolar_rand(x)(
  rand (x * 2) - x;
);

function bipolar_rand(minv, maxv) global() local(x) (
  x = bipolar_rand (maxv - minv);
  (x > 0) ? x + minv : x - minv;
);

function rnd_init(idx) local(gi, fracv) (
  gi         = pow (1.6180339, idx);
  this.dd1   = prime_floor (787 * gi + bipolar_rand (37 * gi));
  this.d1    = floor (this.dd1 * (1 / (2 - log(2))) + bipolar_rand (37));
  this.dd2   = prime_floor (this.dd1 * 1.3180339 + bipolar_rand (57));
  this.d2    = floor (this.dd2 * (1 / (2 - log(2))) + bipolar_rand (37));
  this.d3    = floor (this.dd2 * (1 / (3 - log(2))) + bipolar_rand (37));
  fracv      = 10;
  this.k1    = 0.5 * ((fracv - idx * 0.5) / fracv) * ((bipolar_rand(1) < 0) ? 1 : -1);
  this.k2    = 0.5 * ((fracv - idx * 0.5) / fracv) *  ((bipolar_rand(1) < 0) ? 1 : -1);
  this.k3    = 0.3 * ((fracv - idx * 0.5) / fracv) *  ((bipolar_rand(1) < 0) ? 1 : -1);
  this.tap_a = floor (32 + rand (this.dd1 - 32));
  this.fac_a = 1;
  this.tap_b = floor (32 + rand (this.dd2 - 32));
  this.fac_b = 1;
);


function run_block(tank, sig, decay, lfo, lfo_spls) local() global(easyapv_del_idx) (
  tank += sig;
  tank = ap (tank, this.d1, this.k1 * (1 - (1 - decay) * 0.2) , lfo, lfo_spls);
  this.idx_a = easyapv_del_idx;
  tank *= decay;
  tank = delay (tank, this.dd1);

  this.idx_b = easyapv_del_idx;
  tank = ap2 (tank, this.d2, this.d3, this.k2 * (1 - (1 - decay) * 0.2), this.k3);
  tank *= decay;
  tank = delay (tank, this.dd2);
);

function get_tapa() (
  easyapv_get (this.idx_a,  this.tap_a) * this.fac_a;
);

function get_tapb() (
  easyapv_get (this.idx_b,  this.tap_b) * this.fac_b;
);

b1.rnd_init(0);
b2.rnd_init(1);
b3.rnd_init(2);
b4.rnd_init(3);

fdn_in.array_init(8);
fdn_out.array_init(8);

@slider

lfo1.lfo_bank_reset_freq (0, 2.97 - mod * 1.43, k.src.srate);
lfo2.lfo_bank_reset_freq (0, 0.21 + mod * 0.53, k.src.srate);
lfo3.lfo_bank_reset_freq (0, 3.34 - mod * 1.17, k.src.srate);
lfo4.lfo_bank_reset_freq (0, 0.84 + mod * 1.01, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

decay = fastgrowth (decay_p);
decay = 0.4 + decay * 0.59;

mod_amt = fastgrowth (mod);

flo = 0.94 + lo * lo * 0.06;
glo = 0.85 + lo * 0.145;

fhi1 = 0.48 - hi * hi * 0.3;
fhi2 = 0.54 - hi * hi * 0.3;
fhi3 = 0.52 - hi * hi * 0.34;
ghi = 0.55 + hi * hi * (0.45);

(1) ? (
b1.d1    = 634;
b1.d2    = 787;
b1.d3    = 474;
b1.dd1   = 797;
b1.dd2   = 1051;
b1.fac_a = 1;
b1.fac_b = 1;
b1.idx_a = 3;
b1.idx_b = 4;
b1.k1    = -0.5;
b1.k2    = -0.5;
b1.k3    = -0.3;
b1.tap_a = 146;
b1.tap_b = 737;
b2.d1    = 945;
b2.d2    = 1191;
b2.d3    = 689;
b2.dd1   = 1237;
b2.dd2   = 1571;
b2.fac_a = 1;
b2.fac_b = 1;
b2.idx_a = 8;
b2.idx_b = 9;
b2.k1    = 0.475;
b2.k2    = 0.475;
b2.k3    = -0.285;
b2.tap_a = 748;
b2.tap_b = 404;
b3.d1    = 1568;
b3.d2    = 1998;
b3.d3    = 1166;
b3.dd1   = 2011;
b3.dd2   = 2617;
b3.fac_a = 1;
b3.fac_b = 1;
b3.idx_a = 13;
b3.idx_b = 14;
b3.k1    = -0.45;
b3.k2    = 0.45;
b3.k3    = 0.27;
b3.tap_a = 1213;
b3.tap_b = 1310;
);

@sample


// decay = 1;

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  lfo1.lfo_bank_tick_sin (lfo1.ret.ptr, 0);
  lfo2.lfo_bank_tick_sin (lfo2.ret.ptr, 0);
  lfo3.lfo_bank_tick_sin (lfo3.ret.ptr, 0);
  lfo4.lfo_bank_tick_sin (lfo4.ret.ptr, 0);

  lfov1 = (lfo1.ret.ptr[0] + lfo2.ret.ptr[0]) * 0.5;
  lfov2 = (lfo3.ret.ptr[0] + lfo4.ret.ptr[0]) * 0.5;

  // halving an additional time to leave headroom
  li = src.ins.ptr[0] * 0.5;
  ri = src.ins.ptr[1] * 0.5;

  li = fil1.lp (li, 0.15);
  li = fil2.hp (li, 0.985);
  ri = fir1.lp (ri, 0.15);
  ri = fir2.hp (ri, 0.985);

  fastchar = fastgrowth(character);

  li = ap (li, 173, 0.5 * fastchar);
  ri = ap (ri, 173, 0.5 * fastchar);

  m = (li + ri) * 0.5;

  tank = f1.crossv2 (tank, flo, fhi1, glo, ghi);
  tank = b1.run_block (tank, m, decay, lfov1 * mod_amt, 27);

  tank = f2.crossv2 (tank, flo, fhi2, glo, ghi);
  tank = b2.run_block (tank, li, decay, -lfov1 * mod_amt, 18);

  tank = f3.crossv2 (tank, flo, fhi3, glo, ghi);
  tank = b3.run_block (tank, ri, decay, lfov2 * mod_amt, 21);

  tank = delay (tank, 52 + 143);

  l = b2.get_tapa();
  r = b3.get_tapa();

  l = ap (l, 171, 0.45 + 0.3 * fastchar);
  r = ap (r, 175, 0.45 + 0.3 * fastchar);

  l = eq1l.svf_tick (l);
  r = eq1r.svf_tick (r);

  //l = r = tank;

  // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
