//desc: large hall
slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc
import _filters.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

mtxa.array_init (8);
mtxb.array_init (8);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 2;
lfo1.lfo_bank_init (n_lfos, 1);
lfo1.ret.array_init (n_lfos);
lfo1.lfo_bank_reset_phase (0);

lfo2.lfo_bank_init (n_lfos, 1);
lfo2.ret.array_init (n_lfos);
lfo2.lfo_bank_reset_phase (0);

eq1l.svf_bell (300, 0.64, 3, k.src.srate);
eq1r.svf_bell (300, 0.64, 3, k.src.srate);

@slider

lfo1.lfo_bank_reset_freq (0, 1.73 - mod * 0.63, k.src.srate);
lfo2.lfo_bank_reset_freq (0, 1.51 - mod * 0.43, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

fg_decay = 1 - decay_p;
fg_decay *= fg_decay;
fg_decay = 1 - fg_decay;

decay = 0.35 + decay_p * decay_p * 4.75;

k1 = 0.1 + decay_p * 0.06;
k2 = 0.07 + decay_p * 0.06;
k3 = 0.07;
k4 = 0.2 + fg_decay * 0.1 + character * 0.2;

flo = 0.90 + lo * lo * 0.05;
glo = 0.85 + lo * 0.145;
fhi1 = 0.9 - hi * hi * 0.4;
fhi2 = 0.93 - hi * hi * 0.4;
ghi = 0.5 + hi * 0.5;

@sample

// decay = 1;

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  lfo1.lfo_bank_tick_tri (lfo1.ret.ptr, 0);
  lfo2.lfo_bank_tick_tri (lfo2.ret.ptr, 0);

  // halving an additional time to leave headroom
  li = src.ins.ptr[0] * 0.5;
  ri = src.ins.ptr[1] * 0.5;

  li = fil1.lp (li, 0.16);
  li = fil2.hp (li, 0.99);
  ri = fir1.lp (ri, 0.16);
  ri = fir2.hp (ri, 0.99);

  li = ap (li, 123, k4);
  ri = ap (ri, 144, k4);

  m = (li + ri) * 0.5;
  s = (li - ri) * 0.5;

  l = r = 0;

  // TOO GRAINY!

  v1 = m + fb1;
  fb1 = delay_fb (v1, 1021, decay, k.src.srate);
  fb1 = fb1.crossv2 (fb1, flo, fhi1, glo, ghi);
  fb1 = ap3 (fb1, 412 + 39, 338 + 38, 272 + 35, -k1, k2, -k3);
  l += delay (v1, 112 + 2);
  r += delay (v1, 112);
  l -= delay (v1, 242 + 37, lfo1.ret.ptr[0], 15);
  r += delay (v1, 277 + 37, lfo1.ret.ptr[0], 16);
  l += delay (v1, 342, lfo1.ret.ptr[0] * mod, 77);
  r -= delay (v1, 340, lfo1.ret.ptr[0] * mod, 88);
  l += delay (v1, 474 - 46, lfo1.ret.ptr[0] * mod, 89);
  r += delay (v1, 472 - 45, lfo1.ret.ptr[0] * mod, 73);

  v2 = m + fb2;
  fb2 = delay_fb (v2, 1027 + 34 + 5 - 13, decay, k.src.srate);
  fb2 = fb2.crossv2 (fb2, flo, fhi2, glo, ghi);
  fb2 = ap3 (fb2, 772 - 38, 666, 535 + 46, k1, k2, k3);
  l -= delay (v2, 162);
  r += delay (v2, 160);
  l -= delay (v2, 296, lfo1.ret.ptr[1] * mod, 77);
  r += delay (v2, 297, lfo1.ret.ptr[1] * mod, 88);
  l += delay (v2, 472 - 46, lfo1.ret.ptr[1], 21);
  r -= delay (v2, 471 - 46, lfo1.ret.ptr[1], 17);
  l += delay (v2, 512 - 18, lfo1.ret.ptr[1] * mod, 89);
  r -= delay (v2, 513 - 18, lfo1.ret.ptr[1] * mod, 73);

  q1i = easyapv_del_idx;
  v3 = (li + fb3);
  fb3 = delay_fb (v3, 1027 + 34 + 39 - 2 - 132, decay, k.src.srate);
  fb3 = fb3.crossv2 (fb3, flo, fhi1, glo, ghi);
  fb3 = ap3 (fb3, 672 + 39, 426 - 33, 325 + 45, k1, -k2, k3);
  l -= delay (v3, 212 - 23);
  r += delay (v3, 215 - 23);
  l += delay (v3, 426 - 41, lfo2.ret.ptr[0] * mod, 77);
  r -= delay (v3, 427 - 41, lfo2.ret.ptr[0] * mod, 88);
  l -= delay (v3, 458 + 39, lfo2.ret.ptr[0] * mod, 89);
  r += delay (v3, 456 + 39, lfo2.ret.ptr[0] * mod, 73);
  l += delay (v3, 673, lfo2.ret.ptr[0], 17);
  r += delay (v3, 671, lfo2.ret.ptr[0], 23);

  q2i = easyapv_del_idx;
  v4 = (ri + fb4);
  fb4 = delay_fb (v4, 1027 + 34 + 39 + 332 + 1, decay, k.src.srate);
  fb4 = fb4.crossv2 (fb4, flo, fhi2, glo, ghi);
  fb4 = ap3 (fb4, 572 + 25, 426, 321, k1, -k2, k3);
  l -= delay (v4, 277, lfo2.ret.ptr[1], 21);
  r += delay (v4, 276, lfo2.ret.ptr[1], 17);
  l += delay (v4, 542, lfo2.ret.ptr[1] * mod, 89);
  r -= delay (v4, 577, lfo2.ret.ptr[1] * mod, 73);
  l -= delay (v4, 733, lfo2.ret.ptr[1] * mod, 77);
  r += delay (v4, 731, lfo2.ret.ptr[1] * mod, 98);
  l += delay (v4, 776 + 39);
  r += delay (v4, 775 + 39);

//  l = v1 + v2 + v3 + v4;
//  l *= 10;
//  r = l;

  l *= 0.1;
  r *= 0.1;

//  l = ap (l, 91, 0.6);
//  l = ap (l, 231, 0.6);
//  r = ap (r, 94, 0.6);
//  r = ap (r, 234, 0.6);

//  l -= easyapv_get (q1i, 215) * 0.1;
//  r += easyapv_get (q2i, 273) * 0.1;

  // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  //l = eq1l.svf_tick (l);
  //r = eq1r.svf_tick (r);

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
