slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc
import _filters.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 15000;
k.src.srate = BYPASS_SRC ? srate : 32400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

mtx.array_init (4);
mtxcp.array_init (4);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

eq1l.svf_bell (600, 0.5, 2.5, k.src.srate);
eq1r.svf_bell (600, 0.5, 2.5, k.src.srate);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 4;
lfo.lfo_bank_init (n_lfos, 1);
lfo.ret.array_init (n_lfos);
lfo.lfo_bank_reset_phase (0);

@slider

lfo.lfo_bank_reset_freq (0, 0.25 + mod * 0.35, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);


decayx2 = decay_p * decay_p;
decayfb = 0.25 + decayx2 * 5;
sumgain = 0.125;

flo = 0.90 + lo * lo * 0.05;
glo = 0.8 + lo * 0.1999;
fhi = 0.82 - hi * hi * 0.2;
ghi = 0.5 + 0.1 * decayx2 + hi * 0.39;

@sample

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  m_lfo.lfo_bank_tick_tri (m_lfo.ret.ptr, 0);
  lfo.lfo_bank_tick_tri (lfo.ret.ptr, 0);

  // https://gearspace.com/board/showpost.php?p=15850503&postcount=1012


  // halving an additional time to leave headroom
  m = (src.ins.ptr[0] + src.ins.ptr[1]) * 0.5 * 0.5;
  m = fi1.lp (m, 0.35);
  m = fi2.hp (m, 0.99);

  ml = delay (m, predelay);
  ml1 = ap (ml, 115, -0.7);
  ml = ap (ml1, 214, -0.7);
  ml = ap (ml, 365, -0.7);

  ci = ml + fb1;
  fb1 = fb1.crossv2 (ci, flo, fhi, glo, ghi);
  fb1 = delay_fb (fb1, 5652 - 5, lfo.ret.ptr[0] * mod, 57, decayfb, k.src.srate);
  // notice assign not sum
  r = delay (ci, 745) * -sumgain;
  // notice assign not sum
  l = delay (ci, 2164) * sumgain;
  r += delay (ci, 2922) * -sumgain;
  l += delay (ci, 5005) * sumgain;

  ci = ml + fb2;
  fb2 = fb2.crossv2 (ci, flo, fhi, glo, ghi);
  fb2 = delay_fb (fb2, 5679 + 1, decayfb, k.src.srate);
  r += delay (ci, 625) * -sumgain;
  l += delay (ci, 2080) * sumgain;
  r += delay (ci, 3523) * -sumgain;
  l += delay (ci, 4948) * sumgain;

  ci = ml + fb3;
  fb3 = fb3.crossv2 (ci, flo, fhi, glo, ghi);
  fb3 = delay_fb (fb3, 5689 - 1 + offset, decayfb, k.src.srate);
  r += delay (ci, 11) * -sumgain;
  l += delay (ci, 1435) * sumgain;
  r += delay (ci, 2769) * -sumgain;
  l += delay (ci, 4279) * sumgain;

  ci = ml + fb4;
  fb4 = fb4.crossv2 (ci, flo, fhi, glo, ghi);
  fb4 = delay_fb (fb4, 5711 + 3, lfo.ret.ptr[3] * mod, 57, decayfb, k.src.srate);
  r += delay (ci, 59) * -sumgain;
  l += delay (ci, 1557) * sumgain;
  r += delay (ci, 3539) * -sumgain;
  l += delay (ci, 4304) * sumgain;

  mainamt = abs ((character - 0.5)) * 2;
  mainamt = 0.6 * mainamt;

  l = ap (l, 214, -0.7, lfo.ret.ptr[2] * mod, 30);
  l = ap (l, 469, -0.7);
  l = ep_crossfade (mainamt, l, delay (ml1, 234, character, 337));

  r = ap (r, 245, -0.7, lfo.ret.ptr[3] * mod, 29);
  r = ap (r, 426, -0.7);
  r = ep_crossfade (mainamt, r, delay (ml1, 434, character, 247));

 // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  l = eq1l.svf_tick (l);
  r = eq1r.svf_tick (r);

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
