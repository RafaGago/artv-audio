slider1:decay=1<0,1,0.01> Decay
# slider3:gain_db=0<-20,20,0.1>gain (dB)

import _core.jsfx-inc
import _delay-line.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

// ratios start point
// http://www.voxangelica.net/transfer/magic%20numbers%20for%20reverb%20design%203b.pdf
//
//#!/usr/bin/env python
//from math import *
//import sympy as sp
//
//def f(x):
//  return 1 / (x + 1 - log(2))
//
// def get_start_times(total_spls, n_ap):
//   for i in range (n_ap):
//     spls = total_spls * f (i + 1)
//     print (f'{spls}[{sp.prevprime (spls)},{sp.nextprime (spls)}]')
//
//get_start_times(3000, 5)

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 15000;
k.src.srate = BYPASS_SRC ? srate : 33600;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lines = 50; // more than we need
max_delay = 3000;
delay_line_idx = 0; // to avoid passing parameters
del.delay_line_init (round_next_pow2 (max_delay), n_lines);

function ap (in, spls, g) local (yn, u, x) global (del*, delay_line_idx) (
  yn = del.delay_line_get (spls, delay_line_idx);
  u = in + yn * g;
  x = yn - u * g;
  del.delay_line_set (u, 0, delay_line_idx);
  delay_line_idx += 1;
  x;
);

// TODO: nested lattice

function delay (in, spls) local (x) global (del*, delay_line_idx) (
  x = del.delay_line_get (spls, delay_line_idx);
  del.delay_line_set (in, 0, delay_line_idx);
  delay_line_idx += 1;
  x;
);

feedback = 0;

@slider

@sample

n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (

  x = (spl0 + spl1) * 0.5;

  x = ap (x, 147, -0.707);
  x = ap (x, 183, 0.707);
  x = ap (x, 389, -0.6);
  x = ap (x, 401, 0.6);
  
  x += feedback;

// 12000[11987,12007]
// 6000.0[5987,6007]
// 8000.0[7993,8009]
// 9600.0[9587,9601]
// 4800.0[4799,4801]
// 6857.142857142857[6857,6863]
// 3428.5714285714284[3413,3433]
// 5333.333333333333[5333,5347]
// 2666.6666666666665[2663,2671]
// 4363.636363636364[4363,4373]
// 2181.818181818182[2179,2203]
// 3692.3076923076924[3691,3697]
// 1846.1538461538462[1831,1847]
// 3200.0[3191,3203]
// 1600.0[1597,1601]
// 2823.529411764706[2819,2833]
// 1411.764705882353[1409,1423]
// 2526.315789473684[2521,2531]
// 1263.157894736842[1259,1277]
// 2285.714285714286[2281,2287]
// 1142.857142857143[1129,1151]
// 2086.9565217391305[2083,2087]
// 1043.4782608695652[1039,1049]
// 1920.0[1913,1931]
// 960.0[953,967]
// 1777.7777777777776[1777,1783]
// 888.8888888888888[887,907]
// 1655.1724137931035[1637,1657]
// 827.5862068965517[827,829]
// 1548.3870967741934[1543,1549]
// 774.1935483870967[773,787]
// 1454.5454545454545[1453,1459]
// 727.2727272727273[727,733]
// 1371.4285714285713[1367,1373]
// 685.7142857142857[683,691]
// 1297.2972972972973[1297,1301]
// 648.6486486486486[647,653]
// 1230.7692307692307[1229,1231]
// 615.3846153846154[613,617]
// 1170.7317073170732[1163,1171]
// 585.3658536585366[577,587]
// 1116.2790697674418[1109,1117]
// 558.1395348837209[557,563]
// 1066.6666666666667[1063,1069]
// 533.3333333333334[523,541]
// 1021.2765957446808[1021,1031]
// 510.6382978723404[509,521]
// 979.5918367346937[977,983]
// 489.79591836734687[487,491]
// 941.1764705882352[941,947]
// 470.5882352941176[467,479]
// 905.6603773584906[887,907]
// 452.8301886792453[449,457]
// 872.7272727272726[863,877]
// 436.3636363636363[433,439]
// 842.1052631578947[839,853]
// 421.05263157894734[421,431]
// 813.5593220338983[811,821]
// 406.77966101694915[401,409]
// 786.8852459016393[773,787]
// 393.44262295081967[389,397]
// 761.9047619047618[761,769]
// 380.9523809523809[379,383]
// 738.4615384615385[733,739]

(1) ? (
  x = ap (x * decay, 977, 0.707);
  x = delay (x, 2819);
  x = ap (x * decay, 863, -0.707);
  x = delay (x, 1021);
//  x = ap (x * decay, 509, -0.707);
//  x = delay(x, 3691);
  x = ap (x * decay, 1453, 0.618);
  x = delay (x, 787);

  x = ap (x * decay, 947, 0.707);
  x = delay (x, 3191);
  x = ap (x * decay, 887, -0.707); // 0.618 to 0.707 -> explosion
  x = delay (x, 1049);
//  x = ap (x * decay, 617, -0.707);
//  x = delay(x, 3697);
  x = ap (x * decay, 1367, 0.618);
  x = delay (x, 647);
  
) : (

  // // this is Datorro's figure eight with the delays multiplied by
  // // "1.1289943214273714": 33600 / 29761

  x = ap (x * decay, 759, -0.707);
  x = delay(x, 5027);
  x = ap (x * decay, 2032, 0.5);
  x = delay(x, 4200);

  x = ap (x * decay, 1025, -0.707);
  x = delay(x, 4761);
  x = ap (x * decay, 2999, 0.5);
  x = delay(x, 3571);
);

  // prepare next iteration
  del.delay_line_advance();
  delay_line_idx = 0;
  feedback = x;

  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, x, x);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 = src.out_q.deque_pop();
spl1 = src.out_q.deque_pop();
