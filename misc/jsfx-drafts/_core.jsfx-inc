@init

_memtop_ptr = 0;

// memory  helper --------------------------------
function mem_reserve (size) local (ret) global (_memtop_ptr) (
    ret = _memtop_ptr;
    _memtop_ptr += size;
    ret;
);

// misc ------------------------------------------------------------------------
function mem_swap(ptr, idx1, idx2) local (tmp) global()(
    tmp = ptr[idx1];
    ptr[idx1] = ptr[idx2];
    ptr[idx2] = tmp;
);

function round_next_pow2 (x)(
    ceil (pow (2, ceil (log (x) / log (2))));
);

function clamp (x, minv, maxv)(
    max (min (x, maxv), minv);
);

function interp_catmull_rom (y0, y1, y2, y3, x) local (r, x2, x3)(
  x2 = x * x;
  x3 = x2 * x;

  r = x3 * (-y0 + 3 * y1 - 3 * y2 + y3) * 0.5;
  r += x2 * (2 * y0 - 5 * y1 + 4 * y2 - y3) * 0.5;
  r += x * (-y0 + y2) * 0.5;
  r += y1;
);

// array ------------------------------------------------------------------------
function array_init (size)
  local() global()(

  this.ptr_raw = mem_reserve (size);
  this.ptr = this.ptr_raw;
  this.size = size;
);

// align has to be a power of 2
function array_init_align (size, align)
  local (mask) global (_memtop_ptr)(

  mask = align - 1;
  this.ptr_raw = _memtop_ptr;
  // self reminder "~" is EXOR on JSFX, so to negate the mask an EXOR with
  // all ones is done.
  this.ptr     = _memtop_ptr & (mask ~ 0xffffffff);
  this.ptr    += this.ptr != this.ptr_raw ? align : 0;
  this.size    = size;
  mem_reserve (this.size + this.ptr - this.ptr_raw);
);

function array_clear()
  local() global()(
  memset (this.ptr, 0, this.size);
);

function array_drop_to_size (newsize)
  local (dropped) global (_memtop_ptr)(

  newsize = newsize < 0 ? this.size : newsize;
  newsize = min (newsize, this.size);

  dropped = this.size - newsize;

  dropped > 0 ? (
    (this.ptr + this.size) == _memtop_ptr ? (
      // try to recover the array memory
      _memtop_ptr -= dropped;
      memset (_memtop_ptr, 0, dropped);
    );
    this.size -= dropped;

    // try to recover the alignment memory
    this.ptr_raw != this.ptr && _memtop_ptr == this.ptr ? (
      // if "_memtop_ptr == this.ptr" then "this.size" is already 0
      memset (this.ptr_raw, 0, this.ptr - this.ptr_raw);
      _memtop_ptr = this.ptr_raw;
    );

    this.size == 0 ? (
      this.ptr_raw = this.ptr = -1;
    );
  );
  dropped;
);

function array_try_expand (newsize)
  local (expand) global (_memtop_ptr, A, B, C, D)(

  expand = newsize - this.size;

  ((this.ptr + this.size) == _memtop_ptr) && (expand > 0) ? (
    _memtop_ptr += expand;
    memset (this.ptr + this.size, 0, expand);
    this.size = newsize;
  ) : (
    expand = 0;
  );
  expand;
);

function array_alias (other*) global()(
    this.ptr = other.ptr;
    this.size = other.size;
);

// sometimes inside functions some globals are inaccessible, so this overload is
// provided for such cases. prefer the overload taking a namespace when possible.
function array_alias (other_ptr, other_size) global()(
    this.ptr = other_ptr;
    this.size = other_size;
);

// array 2d --------------------------------------------------------------------
function array2d_init (size_a, size_b)global()(
    this.ptr = mem_reserve (size_a * size_b);
    this.size_a = size_a;
    this.size_b = size_b;
);

function array2d_ptr (pos_a) global()(
    this.ptr + pos_a * this.size_b;
);

function array2d_get (pos_a, pos_b) global()(
    this.ptr[pos_a * this.size_b + pos_b];
);

function array2d_set (pos_a, pos_b, val) global()(
    this.ptr[pos_a * this.size_b + pos_b] = val;
);

// mem functions ---------------------------------------------------------------
function range_get_max (src_ptr, size) local (maxv, i) global()(
    maxv = src_ptr[0];
    i = 1;
    loop (size - 1,
        maxv = max (maxv, src_ptr[i]);
        i += 1;
    );
    maxv;
);

function range_get_min (src_ptr, size) local (minv, i) global()(
    minv = src_ptr[0];
    i = 1;
    loop (size - 1,
        minv = max (minv, src_ptr[i]);
        i += 1;
    );
    minv;
);

function range_get_max_pos (src_ptr, size) local (maxv, ret, i) global()(
    maxv = src_ptr[0];
    ret  = 0;
    i = 1;
    loop (size - 1,
        (src_ptr[i] > maxv) ? (
            maxv = src_ptr[i];
            ret = i;
        );
        i += 1;
    );
    ret;
);

function range_get_min_pos (src_ptr, size) local (minv, ret, i) global()(
    minv = src_ptr[0];
    ret  = 0;
    i = 1;
    loop (size - 1,
        (src_ptr[i] < minv) ? (
            minv = src_ptr[i];
            ret = i;
        );
        i += 1;
    );
    ret;
);

function range_get_sum (src_ptr, size) local (sum, i) global()(
    sum = i = 0;
    loop (size,
        sum += src_ptr[i];
        i += 1;
    );
    sum;
);

function range_clamp (dst_src_ptr, size, minv, maxv) local (i) global()(
    i = 0;
    loop (size,
        dst_src_ptr[i] = clamp (dst_src_ptr[i], minv, maxv);
        i += 1;
    );
);

function range_mul (dst_ptr, src1_ptr, src2_ptr, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src1_ptr[i] * src2_ptr[i];
        i += 1;
    );
);

function range_mul_k (dst_ptr, src_ptr, k, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src_ptr[i] * k;
        i += 1;
    );
);

function range_add (dst_ptr, src1_ptr, src2_ptr, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src1_ptr[i] + src2_ptr[i];
        i += 1;
    );
);

function range_add_k (dst_ptr, src_ptr, k, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src_ptr[i] + k;
        i += 1;
    );
);

function range_sub (dst_ptr, src1_ptr, src2_ptr, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src1_ptr[i] - src2_ptr[i];
        i += 1;
    );
);

function range_sub_k (dst_ptr, src_ptr, k, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src_ptr[i] - k;
        i += 1;
    );
);

function range_to_int (dst_ptr, src_ptr, size) local (i) global()(
    i = 0;
    loop (size,
        dst_ptr[i] = src_ptr[i] | 0;
        i += 1;
    );
);

function range_reverse_order (src_dst_ptr, size) local (i, hsz) global()(
    hsz = (size / 2) | 0;
    i = 1;
    loop (hsz,
        mem_swap (src_dst_ptr, i - 1, size - i);
        i += 1;
    );
);

function range_swap (src_dst_1_ptr, src_dst_2_ptr, size)
    local (i, tmp)
    global()(

    i = 0;
    loop (size,
        tmp = src_dst_1_ptr[i];
        src_dst_1_ptr[i] = src_dst_2_ptr[i];
        src_dst_2_ptr[i] = tmp;
        i += 1;
    );
);

function range_shift_down (src_dst_ptr, size, count)
    local (i, tmp)
    global()(

    // not reinventing memmove, naive...
    this.tmp.array_init (size);
    memcpy (this.tmp.ptr, src_dst_ptr, size);
    memcpy (src_dst_ptr + count, this.tmp.ptr, size - count);
    memcpy (src_dst_ptr, this.tmp.ptr + size - count, count);
    this.tmp.array_drop_to_size (0);
);

// -----------------------------------------------------------------------------
function ifft_rescale (fft_ptr, fft_size) global() local (i, f, a, b)(
    range_mul_k (fft_ptr, fft_ptr, 1 / fft_size, fft_size * 2);
);
// -----------------------------------------------------------------------------
function deque_init (max_size)
  global() (

  this.array_init (round_next_pow2 (max_size));
  this.mask = this.size - 1;
  this.r = 0;
  this.w = 0;
  this.push_bug_last_r = -1;
  this.push_bug_last_w = -1;
  this.pop_bug_r = -1;
  this.pop_bug_w = -1;
);

function deque_size() global() local (diff) (
  diff = this.w - this.r;
  diff == 0 ? (
    this.r = 0; // resync so it can run forever
    this.w = 0;
  );
  diff;
);

function deque_push (v) global(A) local (sz) (
  sz = this.deque_size();
  (sz < this.size) ? (
    this.ptr[this.w & this.mask] = v;
    this.w += 1;
  ) : (
    this.push_bug_last_r = this.r;
    this.push_bug_last_w = this.w;
  );
);

function deque_pop() global() local (sz, ret) (
  sz = this.deque_size();
  (sz > 0) ? (
    ret     = this.ptr[this.r & this.mask];
    this.r += 1;
  ) : (
    this.pop_bug_r = this.r;
    this.pop_bug_w = this.w;
    ret = -1234567891234567;
  );
  ret;
);

// -----------------------------------------------------------------------------
function gcd (v1, v2) local (a, b, c) global() (
  c = 0;
  a = v1 | 0;
  b = v2 | 0;
  while (b > 0) (
    c = a % b;
    a = b;
    b = c;
  );
  a;
);
// -----------------------------------------------------------------------------
// creates max 4 variables with the contents of memory or zero otherwise.
function debug_4 (ptr, n)
  local()
  global ()(

  this.n = n;
  this.v00 = n >= 1 ? ptr[0] : 0;
  this.v01 = n >= 2 ? ptr[1] : 0;
  this.v02 = n >= 3 ? ptr[2] : 0;
  this.v03 = n >= 4 ? ptr[3] : 0;
);

function debug_4 (arr*) (this.debug_4 (arr.ptr, arr.size));
// -----------------------------------------------------------------------------
// creates max 8 variables with the contents of memory or zero otherwise.
function debug_8 (ptr, n)
  local()
  global ()(

  this.n = n;
  this.v00 = n >= 1 ? ptr[0] : 0;
  this.v01 = n >= 2 ? ptr[1] : 0;
  this.v02 = n >= 3 ? ptr[2] : 0;
  this.v03 = n >= 4 ? ptr[3] : 0;
  this.v04 = n >= 5 ? ptr[4] : 0;
  this.v05 = n >= 6 ? ptr[5] : 0;
  this.v06 = n >= 7 ? ptr[6] : 0;
  this.v07 = n >= 8 ? ptr[7] : 0;
);

function debug_8 (arr*) (this.debug_8 (arr.ptr, arr.size));
// -----------------------------------------------------------------------------
// creates max 16 variables with the contents of memory or zero otherwise.
function debug_16 (ptr, n)
  local()
  global ()(

  this.n = n;
  this.v00 = n >= 1 ? ptr[0] : 0;
  this.v01 = n >= 2 ? ptr[1] : 0;
  this.v02 = n >= 3 ? ptr[2] : 0;
  this.v03 = n >= 4 ? ptr[3] : 0;
  this.v04 = n >= 5 ? ptr[4] : 0;
  this.v05 = n >= 6 ? ptr[5] : 0;
  this.v06 = n >= 7 ? ptr[6] : 0;
  this.v07 = n >= 8 ? ptr[7] : 0;
  this.v08 = n >= 9 ? ptr[8] : 0;
  this.v09 = n >= 10 ? ptr[9] : 0;
  this.v10 = n >= 11 ? ptr[10] : 0;
  this.v11 = n >= 12 ? ptr[11] : 0;
  this.v12 = n >= 13 ? ptr[12] : 0;
  this.v13 = n >= 14 ? ptr[13] : 0;
  this.v14 = n >= 15 ? ptr[14] : 0;
  this.v15 = n >= 16 ? ptr[15] : 0;
);

function debug_16 (arr*) (this.debug_16 (arr.ptr, arr.size));
// -----------------------------------------------------------------------------
// creates max 32 variables with the contents of memory or zero otherwise.
function debug_32 (ptr, n)
  local()
  global ()(

  this.n = n;
  this.v00 = n >= 1 ? ptr[0] : 0;
  this.v01 = n >= 2 ? ptr[1] : 0;
  this.v02 = n >= 3 ? ptr[2] : 0;
  this.v03 = n >= 4 ? ptr[3] : 0;
  this.v04 = n >= 5 ? ptr[4] : 0;
  this.v05 = n >= 6 ? ptr[5] : 0;
  this.v06 = n >= 7 ? ptr[6] : 0;
  this.v07 = n >= 8 ? ptr[7] : 0;
  this.v08 = n >= 9 ? ptr[8] : 0;
  this.v09 = n >= 10 ? ptr[9] : 0;
  this.v10 = n >= 11 ? ptr[10] : 0;
  this.v11 = n >= 12 ? ptr[11] : 0;
  this.v12 = n >= 13 ? ptr[12] : 0;
  this.v13 = n >= 14 ? ptr[13] : 0;
  this.v14 = n >= 15 ? ptr[14] : 0;
  this.v15 = n >= 16 ? ptr[15] : 0;
  this.v16 = n >= 17 ? ptr[16] : 0;
  this.v17 = n >= 18 ? ptr[17] : 0;
  this.v18 = n >= 19 ? ptr[18] : 0;
  this.v19 = n >= 20 ? ptr[19] : 0;
  this.v20 = n >= 21 ? ptr[20] : 0;
  this.v21 = n >= 22 ? ptr[21] : 0;
  this.v22 = n >= 23 ? ptr[22] : 0;
  this.v23 = n >= 24 ? ptr[23] : 0;
  this.v24 = n >= 25 ? ptr[24] : 0;
  this.v25 = n >= 26 ? ptr[25] : 0;
  this.v26 = n >= 27 ? ptr[26] : 0;
  this.v27 = n >= 28 ? ptr[27] : 0;
  this.v28 = n >= 29 ? ptr[28] : 0;
  this.v29 = n >= 30 ? ptr[29] : 0;
  this.v30 = n >= 31 ? ptr[30] : 0;
  this.v31 = n >= 32 ? ptr[31] : 0;
);

function debug_32 (arr*) (this.debug_32 (arr.ptr, arr.size));
// -----------------------------------------------------------------------------
// Arrays that doesn't cross 64K element boundaries for doing FFT ops, as
// instructed on the JSFX manual.
_fftmem_1.array_init (64 * 1024);
_fftmem_2.array_init (64 * 1024);
// -----------------------------------------------------------------------------
// Some reserved library space e.g. for converting from pointer based interfaces
// to value based ones. For some reason at some point trying to increment it
// broke things. It might have been an own bug though.
_libmem.array_init (8);

// Small table of prime numbers ------------------------------------------------
// On C++ it can be stored as unsigned chars
primes.array_init (54);
primes.ptr[0] = 2;
primes.ptr[1] = 3;
primes.ptr[2] = 5;
primes.ptr[3] = 7;
primes.ptr[4] = 11;
primes.ptr[5] = 13;
primes.ptr[6] = 17;
primes.ptr[7] = 19;
primes.ptr[8] = 23;
primes.ptr[9] = 29;
primes.ptr[10] = 31;
primes.ptr[11] = 37;
primes.ptr[12] = 41;
primes.ptr[13] = 43;
primes.ptr[14] = 47;
primes.ptr[15] = 53;
primes.ptr[16] = 59;
primes.ptr[17] = 61;
primes.ptr[18] = 67;
primes.ptr[19] = 71;
primes.ptr[20] = 73;
primes.ptr[21] = 79;
primes.ptr[22] = 83;
primes.ptr[23] = 89;
primes.ptr[24] = 97;
primes.ptr[25] = 101;
primes.ptr[26] = 103;
primes.ptr[27] = 107;
primes.ptr[28] = 109;
primes.ptr[29] = 113;
primes.ptr[30] = 127;
primes.ptr[31] = 131;
primes.ptr[32] = 137;
primes.ptr[33] = 139;
primes.ptr[34] = 149;
primes.ptr[35] = 151;
primes.ptr[36] = 157;
primes.ptr[37] = 163;
primes.ptr[38] = 167;
primes.ptr[39] = 173;
primes.ptr[40] = 179;
primes.ptr[41] = 181;
primes.ptr[42] = 191;
primes.ptr[43] = 193;
primes.ptr[44] = 197;
primes.ptr[45] = 199;
primes.ptr[46] = 211;
primes.ptr[47] = 223;
primes.ptr[48] = 227;
primes.ptr[49] = 229;
primes.ptr[50] = 233;
primes.ptr[51] = 239;
primes.ptr[52] = 241;
primes.ptr[53] = 251;

// table of predictable random numbers from 0 to 1 -----------------------------
rnd_table.array_init (40);
rnd_table.ptr[0] = 0.9171434810105141;
rnd_table.ptr[1] = 0.8569858412166442;
rnd_table.ptr[2] = 0.5178699413011407;
rnd_table.ptr[3] = 0.8658419727056448;
rnd_table.ptr[4] = 0.09615608560228828;
rnd_table.ptr[5] = 0.8657091878698523;
rnd_table.ptr[6] = 0.8569333970393207;
rnd_table.ptr[7] = 0.3780605117952399;
rnd_table.ptr[8] = 0.26031208092491054;
rnd_table.ptr[9] = 0.5635124119976632;
rnd_table.ptr[10] = 0.9790658438505838;
rnd_table.ptr[11] = 0.8562823856318246;
rnd_table.ptr[12] = 0.21556298702180277;
rnd_table.ptr[13] = 0.8600632971753791;
rnd_table.ptr[14] = 0.662714633786504;
rnd_table.ptr[15] = 0.2225621933588111;
rnd_table.ptr[16] = 0.6457530747930535;
rnd_table.ptr[17] = 0.7827105700278855;
rnd_table.ptr[18] = 0.6705869303441022;
rnd_table.ptr[19] = 0.5154710337106151;
rnd_table.ptr[20] = 0.815454332575039;
rnd_table.ptr[21] = 0.6179902227520485;
rnd_table.ptr[22] = 0.7115313466684177;
rnd_table.ptr[23] = 0.9378033055153567;
rnd_table.ptr[24] = 0.21433529585823752;
rnd_table.ptr[25] = 0.8701474992411431;
rnd_table.ptr[26] = 0.7086038807361402;
rnd_table.ptr[27] = 0.30052303721084295;
rnd_table.ptr[28] = 0.28393219786694557;
rnd_table.ptr[29] = 0.5983530311667046;
rnd_table.ptr[30] = 0.20020536916058207;
rnd_table.ptr[31] = 0.6392286472751323;
rnd_table.ptr[32] = 0.37143886775293566;
rnd_table.ptr[33] = 0.6898805855917455;
rnd_table.ptr[34] = 0.1884387811019529;
rnd_table.ptr[35] = 0.5686068227042015;
rnd_table.ptr[36] = 0.9620012698662417;
rnd_table.ptr[37] = 0.4707056753390745;
rnd_table.ptr[38] = 0.5257648252025556;
rnd_table.ptr[39] = 0.6742146878570825;
