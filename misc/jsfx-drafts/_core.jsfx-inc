@init

_memtop_ptr = 0;

// memory  helper --------------------------------
function mem_reserve (size) local (ret) global (_memtop_ptr) (
    ret = _memtop_ptr;
    _memtop_ptr += size;
    ret;
);

// misc ------------------------------------------------------------------------
function mem_swap(ptr, idx1, idx2) local (tmp) (
    tmp = ptr[idx1];
    ptr[idx1] = ptr[idx2];
    ptr[idx2] = tmp;
);

function round_next_pow2 (x)(
    ceil (pow (2, ceil (log (x) / log (2))));
);

function clamp (x, minv, maxv)(
    max (min (x, maxv), minv);
);

function interp_catmull_rom (y0, y1, y2, y3, x) local (r, x2, x3)(
  x2 = x * x;
  x3 = x2 * x;

  r = x3 * (-y0 + 3 * y1 - 3 * y2 + y3) * 0.5;
  r += x2 * (2 * y0 - 5 * y1 + 4 * y2 - y3) * 0.5;
  r += x * (-y0 + y2) * 0.5;
  r += y1;
);

// array -----------------------------------------------------------------------
function array_init (size)(
    this.ptr = mem_reserve (size);
    this.size = size;
);

function array_alias (other*) (
    this.ptr = other.ptr;
    this.size = other.size;
);

// array 2d --------------------------------------------------------------------
function array2d_init (size_a, size_b) (
    this.ptr = mem_reserve (size_a * size_b);
    this.size_a = size_a;
    this.size_b = size_b;
);

function array2d_ptr (pos_a) (
    this.ptr + pos_a * this.size_b;
);

function array2d_get (pos_a, posb) (
    this.ptr[pos_a * this.size_b + pos_b];
);

function array2d_set (pos_a, pos_b, val) (
    this.ptr[pos_a * this.size_b + pos_b] = val;
);

// mem functions ---------------------------------------------------------------
function range_get_max (src_ptr, size) local (maxv, i)(
    maxv = src_ptr[0];
    i = 1;
    loop (size - 1,
        maxv = maxv > src_ptr[i] ? maxv : src_ptr[i];
        i += 1;
    );
    maxv;
);

function range_get_sum (src_ptr, size) local (sum, i)(
    sum = i = 0;
    loop (size,
        sum += src_ptr[i];
        i += 1;
    );
    sum;
);

function range_clamp (dst_src_ptr, size, minv, maxv) local (i)(
    i = 0;
    loop (size,
        dst_src_ptr[i] = clamp (dst_src_ptr[i], minv, maxv);
        i += 1;
    );
);

function range_mul (dst_ptr, src1_ptr, src2_ptr, size) local (i)(
    i = 0;
    loop (size,
        dst_ptr[i] = src1_ptr[i] * src2_ptr[i];
        i += 1;
    );
);

function range_mul_k (dst_ptr, src_ptr, k, size) local (i)(
    i = 0;
    loop (size,
        dst_ptr[i] = src_ptr[i] * k;
        i += 1;
    );
);

function range_add (dst_ptr, src1_ptr, src2_ptr, size) local (i)(
    i = 0;
    loop (size,
        dst_ptr[i] = src1_ptr[i] + src2_ptr[i];
        i += 1;
    );
);

function range_add_k (dst_ptr, src_ptr, k, size) local (i)(
    i = 0;
    loop (size,
        dst_ptr[i] = src_ptr[i] + k;
        i += 1;
    );
);

// Small table of prime numbers ------------------------------------------------
// On C++ it can be stored as unsigned chars
primes.array_init (54);
primes.ptr[0] = 2;
primes.ptr[1] = 3;
primes.ptr[2] = 5;
primes.ptr[3] = 7;
primes.ptr[4] = 11;
primes.ptr[5] = 13;
primes.ptr[6] = 17;
primes.ptr[7] = 19;
primes.ptr[8] = 23;
primes.ptr[9] = 29;
primes.ptr[10] = 31;
primes.ptr[11] = 37;
primes.ptr[12] = 41;
primes.ptr[13] = 43;
primes.ptr[14] = 47;
primes.ptr[15] = 53;
primes.ptr[16] = 59;
primes.ptr[17] = 61;
primes.ptr[18] = 67;
primes.ptr[19] = 71;
primes.ptr[20] = 73;
primes.ptr[21] = 79;
primes.ptr[22] = 83;
primes.ptr[23] = 89;
primes.ptr[24] = 97;
primes.ptr[25] = 101;
primes.ptr[26] = 103;
primes.ptr[27] = 107;
primes.ptr[28] = 109;
primes.ptr[29] = 113;
primes.ptr[30] = 127;
primes.ptr[31] = 131;
primes.ptr[32] = 137;
primes.ptr[33] = 139;
primes.ptr[34] = 149;
primes.ptr[35] = 151;
primes.ptr[36] = 157;
primes.ptr[37] = 163;
primes.ptr[38] = 167;
primes.ptr[39] = 173;
primes.ptr[40] = 179;
primes.ptr[41] = 181;
primes.ptr[42] = 191;
primes.ptr[43] = 193;
primes.ptr[44] = 197;
primes.ptr[45] = 199;
primes.ptr[46] = 211;
primes.ptr[47] = 223;
primes.ptr[48] = 227;
primes.ptr[49] = 229;
primes.ptr[50] = 233;
primes.ptr[51] = 239;
primes.ptr[52] = 241;
primes.ptr[53] = 251;

// table of predictable random numbers from 0 to 1 -----------------------------
rnd_table.array_init (40);
rnd_table.ptr[0] = 0.9171434810105141;
rnd_table.ptr[1] = 0.8569858412166442;
rnd_table.ptr[2] = 0.5178699413011407;
rnd_table.ptr[3] = 0.8658419727056448;
rnd_table.ptr[4] = 0.09615608560228828;
rnd_table.ptr[5] = 0.8657091878698523;
rnd_table.ptr[6] = 0.8569333970393207;
rnd_table.ptr[7] = 0.3780605117952399;
rnd_table.ptr[8] = 0.26031208092491054;
rnd_table.ptr[9] = 0.5635124119976632;
rnd_table.ptr[10] = 0.9790658438505838;
rnd_table.ptr[11] = 0.8562823856318246;
rnd_table.ptr[12] = 0.21556298702180277;
rnd_table.ptr[13] = 0.8600632971753791;
rnd_table.ptr[14] = 0.662714633786504;
rnd_table.ptr[15] = 0.2225621933588111;
rnd_table.ptr[16] = 0.6457530747930535;
rnd_table.ptr[17] = 0.7827105700278855;
rnd_table.ptr[18] = 0.6705869303441022;
rnd_table.ptr[19] = 0.5154710337106151;
rnd_table.ptr[20] = 0.815454332575039;
rnd_table.ptr[21] = 0.6179902227520485;
rnd_table.ptr[22] = 0.7115313466684177;
rnd_table.ptr[23] = 0.9378033055153567;
rnd_table.ptr[24] = 0.21433529585823752;
rnd_table.ptr[25] = 0.8701474992411431;
rnd_table.ptr[26] = 0.7086038807361402;
rnd_table.ptr[27] = 0.30052303721084295;
rnd_table.ptr[28] = 0.28393219786694557;
rnd_table.ptr[29] = 0.5983530311667046;
rnd_table.ptr[30] = 0.20020536916058207;
rnd_table.ptr[31] = 0.6392286472751323;
rnd_table.ptr[32] = 0.37143886775293566;
rnd_table.ptr[33] = 0.6898805855917455;
rnd_table.ptr[34] = 0.1884387811019529;
rnd_table.ptr[35] = 0.5686068227042015;
rnd_table.ptr[36] = 0.9620012698662417;
rnd_table.ptr[37] = 0.4707056753390745;
rnd_table.ptr[38] = 0.5257648252025556;
rnd_table.ptr[39] = 0.6742146878570825;

golden_ratio.array_init (32);
golden_ratio.ptr[0] = 1/1;
golden_ratio.ptr[1] = 2/1;
golden_ratio.ptr[2] = 3/2;
golden_ratio.ptr[3] = 5/3;
golden_ratio.ptr[4] = 8/5;
golden_ratio.ptr[5] = 13/8;
golden_ratio.ptr[6] = 21/13;
golden_ratio.ptr[7] = 34/21;
golden_ratio.ptr[8] = 55/34;
golden_ratio.ptr[9] = 89/55;
golden_ratio.ptr[10] = 144/89;
golden_ratio.ptr[11] = 233/144;
golden_ratio.ptr[12] = 377/233;
golden_ratio.ptr[13] = 610/377;
golden_ratio.ptr[14] = 987/610;
golden_ratio.ptr[15] = 1597/987;
golden_ratio.ptr[16] = 2584/1597;
golden_ratio.ptr[17] = 4181/2584;
golden_ratio.ptr[18] = 6765/4181;
golden_ratio.ptr[19] = 10946/6765;
golden_ratio.ptr[20] = 17711/10946;
golden_ratio.ptr[21] = 28657/17711;
golden_ratio.ptr[22] = 46368/28657;
golden_ratio.ptr[23] = 75025/46368;
golden_ratio.ptr[24] = 121393/75025;
golden_ratio.ptr[25] = 196418/121393;
golden_ratio.ptr[26] = 317811/196418;
golden_ratio.ptr[27] = 514229/317811;
golden_ratio.ptr[28] = 832040/514229;
golden_ratio.ptr[29] = 1346269/832040;
golden_ratio.ptr[30] = 2178309/1346269;
golden_ratio.ptr[31] = 3524578/2178309;
