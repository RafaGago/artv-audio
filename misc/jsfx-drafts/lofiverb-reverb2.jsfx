slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:damp=0.3<0,1,0.01> Damping
slider7:hp=0<0,1,0.01> HP

slider9:stereo=1<-1,1, 0.01> Stereo

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<0, 30, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 15000;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 2;
lfo.lfo_bank_init (n_lfos, 1);
lfo.ret.array_init (n_lfos);
lfo.lfo_bank_reset_phase (0);

er_lfo.lfo_bank_init (n_lfos, 1);
er_lfo.ret.array_init (n_lfos);
er_lfo.lfo_bank_reset_phase (0);



feedback = 0;

@slider

// TODO: predelay

// TODO: dc block?

lfo.lfo_bank_reset_freq (0, 0.2 + mod * .2, k.src.srate);
er_lfo.lfo_bank_reset_freq (0, 0.2 + mod * 0.2, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

decay = decay_p * 0.75;


@sample

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  m = (src.ins.ptr[0] + src.ins.ptr[1]) * 0.5;
  s = (src.ins.ptr[0] - src.ins.ptr[1]) * 0.5;

  //  a = lfo.ret.ptr[0];
  er_lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);

//  er = m;
//  er = ap3 (er, 337, 207, 121, 0.27, 0.21, -0.14, lfo.ret.ptr[0], 4, lfo.ret.ptr[1], 3, lfo.ret.ptr[0], -3);

  lfo.lfo_bank_tick_sin (lfo.ret.ptr, 0);

(1) ? (
  x = m;

  x = ap (x, 5, 0.1 + 0.8 * character);
  x = ap (x, 53, 0.1 + 0.7 * character);
  x = ap (x, 157, 0.1 + 0.6 * character);
  x = ap (x, 173, (0.1 + 0.5 * character));

  x += fb;
//  x = ap2 (x, 331, 478, -0.27, 0 * decay * 0.015, lfo.ret.ptr[0] * mod, 27);
  x = ap (x, 331, -0.27);
  x *= 0.6 + decay * 0.2;
  x0 = x;
  x = delay (x, 72);
  x = ap (x, 201, 0.2);
  x *= 0.4 + decay * 0.2;
  x = ap (x, 131, -0.35, lfo.ret.ptr[1] * mod, 13);
//  x = f1.ap1_2_lp (x, 1009, 704, 433, 0.1 + decay_p * 0.07, 0.1 + decay_p * 0.04, 0.1, sqrt (damp) * 0.5);
  x = dampfilter (x, damp * 0.8);
  x = delay (x, 72);
  x1 = x;
//  x = f2.ap1_2_lp (x, 226, 317, 615, -0.1 + decay_p * -0.07, 0.1 + decay_p * 0.04, -0.1, sqrt (damp) * 0.5);
//  x = ap3 (x, 615, 317, 226, -(0.2 + decay_p * 0.07), (0.14 + decay_p * 0.04), 0.1);
  x2 = x;
  fb = x2;

//  r = x;
//  l = x;
  mix = character * 0.5;
  o = (1 - mix) * x0;
  o += mix * x1;

  l = o;
  l = ap (l, 19, 0.5 + 0.4 * character);
  l = ap (l, 27, -(0.3 + 0.5 * character));
  l = ap (l, 48, 0.5 + 0.25 * character);
  l = ap (l, 77, 0.3 + 0.4 * character);

  r = o;
  r = ap (r, 17, -(0.5 + 0.4 * character));
  r = ap (r, 31, 0.5 + 0.3 * character);
  r = ap (r, 47, 0.5 + 0.25 * character);
  r = ap (r, 79, 0.3 + 0.4 * character);

//  r = l;
//  l = r;
//  l = r = x2;

) : (
  // datorro (impl check)
  decayv = decay + 0.6;
  x = m;
  x = ap (x, /*142*/160, 0.75);
  x = ap (x, /*107*/121, 0.75);
  x = ap (x, /*379*/428, 0.625);
  x = ap (x, /*277*/313, 0.625);

  d = x;
//  d = m;

  x = ap (d + fb * decayv, /*908*/1026, 0.7, lfo.ret.ptr[1], /*48*/18*1);
  x = delay (x, /*4217*/4761);
  x = ap (x * decayv, /*2656*/2999, 0.5);
  x = delay (x, /*3163*//*3571*/3571);

  x = ap (d + x * decayv, /*672*/759, 0.7, lfo.ret.ptr[0], /*24*/18*1);
  x = delay (x, /*4453*/5027);
  x = ap (x * decayv, /*1800*/2031, 0.5);
  x = delay (x, /*3720*//*4201*/4201);

  fb = x;
);

  easy_ap_next_sample(); // prepare next iteration

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
