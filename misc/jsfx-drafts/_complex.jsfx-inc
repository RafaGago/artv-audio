// Some complex functions to add as needed. Not written for performance, so
// maybe they won't have to be used in tight loops.
//
// To be added on an as-needed basis.
@init
//------------------------------------------------------------------------------
function complex_init (re, im) local() global() (
  this.re = re;
  this.im = im;
);

function complex_load (ptr) local() global() (
  this.re = ptr[0];
  this.im = ptr[1];
);

function complex_store (ptr) local() global() (
  ptr[0] = this.re;
  ptr[1] = this.im;
);
//------------------------------------------------------------------------------
// this = a + b
function complex_add (complex_a*, complex_b*)
  local () global() (

  this.re = complex_a.re + complex_b.re;
  this.im = complex_a.im + complex_b.im;
);

// this += b
function complex_add (complex_b*)
  local () global() (

  this.re += complex_b.re;
  this.im += complex_b.im;
);
//------------------------------------------------------------------------------
// this = a * b
function complex_mul (complex_a*, complex_b*)
  local (a_im, a_re, b_im, b_re) global() (

  //  "a" or/and "b" can point to this
  a_re = complex_a.re;
  b_re = complex_b.re;

  this.re = a_re * b_re - complex_a.im * complex_b.im;
  this.im = a_re * complex_b.im + b_re * complex_a.im;
);

// this *= b
function complex_mul (complex_b*)
  local (re) global() (

  this.complex_mul (this, complex_b);
);
//------------------------------------------------------------------------------
// e ^ (a + i b) = (e ^ a)(cos (b) + i sin (b));

// this = exp (i * im)
function complex_exp_im (im)
  local () global() (

  this.re = cos (im);
  this.im = sin (im);
);

// this = exp (re + i * im)
function complex_exp (complex_a*)
  local (fac) global() (

  fac = exp (complex_a.re);
  this.complex_exp_im (complex_a.im);
  this.re *= fac;
  this.im *= fac;
);

//------------------------------------------------------------------------------
// x ^ (a + i b) = (x ^ a)(cos (b * ln (x)) + i sin (b * ln (x)));

// this = x ** (i * im)
function complex_pow_re_base_im (x, im)
  local () global() (

  this.complex_exp_im (im * log (x));
);

// this = x ** (re + i * im)
function complex_pow_re_base (x, complex_a*)
  local (fac) global() (

  fac = pow (x, complex_a.re);
  this.complex_pow_re_base_im (x, complex_a.im);
  this.re *= fac;
  this.im *= fac;
);
//------------------------------------------------------------------------------
function complex_abs (complex_v*)
  local () global() (

  sqrt (complex_v.re * complex_v.re + complex_v.im * complex_v.im);
);

function complex_abs()
  local () global() (

  complex_abs (this);
);
//------------------------------------------------------------------------------
