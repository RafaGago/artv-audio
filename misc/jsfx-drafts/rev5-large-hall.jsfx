slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc
import _filters.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 20000;
k.src.srate = BYPASS_SRC ? srate : 44100;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

mtx.array_init (4);
mtxcp.array_init (4);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 4;
lfo.lfo_bank_init (n_lfos, 1);
lfo.ret.array_init (n_lfos);
lfo.lfo_bank_reset_phase (0);

eq1l.svf_bell (313, 0.38, 1.75, k.src.srate);
eq1r.svf_bell (313, 0.38, 1.75, k.src.srate);

@slider

lfo.lfo_bank_reset_freq (0, 0.1 + mod * 0.15, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);


decay1 = 1 + decay_p * 9;
decay2 = 1 + decay_p * 5;
sumgain = 0.125;
g1 = 1;


g1 = 1;
g2 = 0.75;
g3 = 0.5;
g4 = 0.25;


flo = 0.90 + lo * lo * 0.05;
glo = 0.9 + lo * 0.09;
fhi = 0.82 - hi * hi * 0.1;
ghi = 0.75 + hi * 0.2;

flo2 = 0.90 + lo * lo * 0.05;
glo2 = 0.9 + lo * 0.04;
fhi2 = 0.82 - hi * hi * 0.2;
ghi2 = 0.7 + hi * 0.25;

@sample

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  m_lfo.lfo_bank_tick_tri (m_lfo.ret.ptr, 0);
  lfo.lfo_bank_tick_tri (lfo.ret.ptr, 0);

  // https://gearspace.com/board/attachments/geekzone/1002613d1643923850-reverb-subculture-new3.jpg

  // halving an additional time to leave headroom
  in = (src.ins.ptr[0] + src.ins.ptr[1]) * 0.5 * 0.5;
  m = in;
  m = fi1.lp (m, 0.3);
  m = fi2.hp (m, 0.987);

  cx3 = 0.5 + (character * 3);
  cx2 = 0.5 + (character * 2);

  cg1 = 0.65 * ((cx3 >= 1.) ? 1. : cx3);
  cg2 = 0.7 * ((cx2 >= 1.) ? 1. : cx2);
  cg3 = 0.5 + 0.2 * character;

  // ER
  l = m;
  l = delay(l, 18 + 14) * g1; // assign
  l += delay(l, 895) * g1;
  l += delay(l, 1238) * g2;
  l += delay(l, 1870) * g2;
  l += delay(l, 2724) * g3;
  l += delay(l, 3365) * g4;

  r = m;
  r = delay(r, 18 + 14) * g1; // assign
  r += delay(r, 695) * g1;
  r += delay(r, 1487) * g2;
  r += delay(r, 1936) * g2;
  r += delay(r, 2635) * g3;
  r += delay(r, 3609) * g4;

  mi = m * g4;
  mi = ap (mi, 1257, cg3);
  mi = ap (mi, 978, cg2);

  p = fm1 + mi;
  fm1 = delay_fb (p, 2076 - 1 + 1, lfo.ret.ptr[1] * mod, 33, decay1, k.src.srate);
  fm1 = fm1.crossv2 (fm1, flo, fhi, glo, ghi * 0.85);
  lt = delay (p, 949);// asign
  rt = delay (p, 837);// asign

  p = fm2 + mi;
  fm2 = delay_fb (p, 2894, lfo.ret.ptr[3] * mod, 33, decay1, k.src.srate);
  fm2 = fm2.crossv2 (fm2, flo, fhi, glo, ghi * 0.90);
  lt += delay (p, 1330);
  rt += delay (p, 1412);

  p = fm3 + mi;
  fm3 = delay_fb (p, 3295 + 3 - 3, lfo.ret.ptr[0] * mod, 33, decay1, k.src.srate);
  fm3 = fm3.crossv2 (fm3, flo, fhi, glo, ghi * 0.95);
  lt += delay (p, 2393);
  rt += delay (p, 2704);

  p = fm4 + mi;
  fm4 = delay_fb (p, 3919 + 3 - 3, lfo.ret.ptr[2] * mod, 33, decay1, k.src.srate);
  fm4 = fm4.crossv2 (fm4, flo, fhi, glo, ghi * 0.97);
  lt += delay (p, 3263);
  rt += delay (p, 3011);

  p = fm5 + mi;
  fm5 = delay_fb (p, 4570 + 4 - 4, decay1, k.src.srate);
  fm5 = fm5.crossv2 (fm5, flo, fhi, glo, ghi);
  lt += delay (p, 3667);
  rt += delay (p, 3667);

  si = delay (m, 533, character, 2411) * g4;
  si = ap (si, 1212, cg3);
  si = ap (si, 960, cg2);

  p = fs1 + si;
  fs1 = delay_fb (p, 3169, 84, decay2, k.src.srate);
  fs1 = fs1.crossv2 (fs1, flo2, fhi2, glo2, ghi2 * 0.85);
  lt += delay (p, 1757);// asign
  rt += delay (p, 1644);// asign

  p = fs2 + si;
  fs2 = delay_fb (p, 3753 + 1 - 1, decay2, k.src.srate);
  fs2 = fs2.crossv2 (fs2, flo2, fhi2, glo2, ghi2 * 0.90);
  lt += delay (p, 1900);
  rt += delay (p, 1981);

  p = fs3 + si;
  fs3 = delay_fb (p, 4280, 73, decay2, k.src.srate);
  fs3 = fs3.crossv2 (fs3, flo2, fhi2, glo2, ghi2 * 0.95);
  lt += delay (p, 2838);
  rt += delay (p, 3148);

  p = fs4 + si;
  fs4 = delay_fb (p, 4491, decay2, k.src.srate);
  fs4 = fs4.crossv2 (fs4, flo2, fhi2, glo2, ghi2 * 0.97);
  lt += delay (p, 3798);
  rt += delay (p, 3545);

  p = fs5 + si;
  fs5 = delay_fb (p, 5091 - 5 + 5, decay2, k.src.srate);
  fs5 = fs5.crossv2 (fs5, flo2, fhi2, glo2, ghi2);
  lt += delay (p, 4298);
  rt += delay (p, 4298);

  lt = ap (lt, 682, 0.65 + 0.1 * lfo.ret.ptr[0]);
  lt = ap (lt, 830, cg1 + 0.05 * lfo.ret.ptr[1]);
//  lt = ap (lt, 682, -0.75);
//  lt = ap (lt, 830, cg1);
  l += lt;

  rt = ap (rt, 695, 0.65 + 0.1 * lfo.ret.ptr[2]);
  rt = ap (rt, 844, cg1 + 0.05 * lfo.ret.ptr[3]);
//  rt = ap (rt, 695, -0.75);
//  rt = ap (rt, 844, cg1);
  r += rt;

 // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

//  l = eq1l.svf_tick (l);
//  r = eq1r.svf_tick (r);

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
