//desc: echo verb
slider1:decay_p=0.8<0,1,0.01> Decay

slider3:mod=0.5<0,1,0.01> Mod
slider4:character=0.5<0,1,0.01> Character

slider6:hi=0.5<0,1,0.01> highs
slider7:lo=0.5<0,1,0.01> lows

slider9:stereo=1<-1,1, 0.01> Stereo
slider10:predelay=1<1, 2400, 1> Predelay

slider21:db_wet=-12<-40, 12,0.1> Wet dB
slider20:db_dry=0<-60, 0,0.1> Dry dB

slider23:offset=0<-50, 50, 1> Offset

import _core.jsfx-inc
import _easy_allpass_reverb.jsfx-inc
import _easy_fdn.jsfx-inc
import _reverb.jsfx-inc
import _lfo.jsfx-inc
import _fir.jsfx-inc
import _filters.jsfx-inc

@init

// SRC stuff -------------------------------------------------------------------
BYPASS_SRC = 0;

k.src.kaiser_att_db = 210;
k.src.taps_branch = 32;
k.src.taps_branch_frac = 16;
k.src.cutoff = 10500;
k.src.srate = BYPASS_SRC ? srate : 23400;

src.down.resampler_2c_init(
  k.src.srate,
  srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.up.resampler_2c_init(
  srate,
  k.src.srate,
  k.src.taps_branch,
  k.src.taps_branch_frac,
  k.src.cutoff,
  k.src.kaiser_att_db,
  1
  );

src.out_q.deque_init(
  src.up.resampler_2c_max_n_out_samples() * 2
  );

src.ins.array_init (src.down.resampler_2c_max_n_out_samples() * 2);
src.outs.array_init (src.up.resampler_2c_max_n_out_samples() * 2);

src.ins.array_clear();
src.outs.array_clear();

mtxa.array_init (8);
mtxb.array_init (8);

// TODO how many?
loop(floor (srate / 44100) * 2,
  src.out_q.deque_push (0);
  src.out_q.deque_push (0);
);

// Actual reverb stuff ---------------------------------------------------------
n_lfos = 2;
lfo1.lfo_bank_init (n_lfos, 1);
lfo1.ret.array_init (n_lfos);
lfo1.lfo_bank_reset_phase (0);

lfo2.lfo_bank_init (n_lfos, 1);
lfo2.ret.array_init (n_lfos);
lfo2.lfo_bank_reset_phase (0);

eq1l.svf_bell (360, 0.45, 2.6, k.src.srate);
eq1r.svf_bell (360, 0.45, 2.6, k.src.srate);

@slider

lfo1.lfo_bank_reset_freq (0, 1.73 - mod * 0.63, k.src.srate);
lfo2.lfo_bank_reset_freq (0, 1.53 - mod * 0.43, k.src.srate);

dry_gain  = (dry_gain == -60) ? 0. : db_to_lin (db_dry);
wet_gain = db_to_lin (db_wet);

decay = 1 - decay_p;
decay *= decay;
decay = 1 - decay;
decay = 0.05 + decay * 0.95;

flo = 0.90 + lo * lo * 0.05;
glo = 0.75 + lo * 0.23;
fhi = 0.65 - hi * hi * 0.24;
ghi = 0.65 + 0.06 * decay2 + hi * hi * 0.28;

@sample

// decay = 1;

// Downsampling
n_spls_down = src.down.resampler_2c_tick (src.ins.ptr, spl0, spl1);

(n_spls_down) ? (
  lfo1.lfo_bank_tick_tri (lfo1.ret.ptr, 0);
  lfo2.lfo_bank_tick_tri (lfo2.ret.ptr, 0);

  // halving an additional time to leave headroom
  l = src.ins.ptr[0] * 0.5;
  r = src.ins.ptr[1] * 0.5;

  l = fil1.lp (l, 0.26);
  l = fil2.hp (l, 0.975);
  r = fir1.lp (r, 0.26);
  r = fir2.hp (r, 0.974);

//  l = ap (l, 171, 0.2 + 0.6 * character);
//  l = ap (l, 271, 0.2 + 0.6 * character);
//  l = ap (l, 377, 0.2 + 0.6 * character);

//  r = ap (r, 173, 0.2 + 0.6 * character);
//  r = ap (r, 269, 0.2 + 0.6 * character);
//  r = ap (r, 391, 0.2 + 0.6 * character);

  m = (l + r) * 0.5;
  s = (l - r) * 0.5;

  // end of boilerplate, reverb algo
  k1 = 0.4 + character * 0.2;
  k2 = 0.4 + character * 0.15;

  // approx 3ms ((23400/1000)*3 = 70.2 spls) -> 1meter
  a = l * 0.75 + m * 0.25 + fb;
  a = ap (a, 376, k1, lfo1.ret.ptr[0] * mod, 27);
  a1 = a;
  a = delay (a, 1007);

  b = a;
  b = bf.crossv2 (b, flo, fhi, glo, ghi);
  b = ap (b, 363, k1);
  b1 = b;
  b = delay (b, 1107);
  b *= decay;

  c = b + s;
  c = ap (c, 414, -k2, lfo2.ret.ptr[0] * mod, 23);
  c1 = c;
  c = delay (c, 1207);

  d = c;
  d = df.crossv2 (d, flo, fhi, glo, ghi);
  d = ap (d, 477, k2);
  d1 = d;
  d = delay (d, 1307);
  d *= decay;

  e = r * 0.75 + m * 0.25 + d;
  e = ap (e, 420, k1, lfo1.ret.ptr[1] * mod, 21);
  e1 = e;
  e = delay (e, 1407);

  f = e;
  f = ff.crossv2 (f, flo, fhi, glo, ghi);
  f = ap (f, 252, k1);
  f1 = f;
  f = delay (f, 1507);
  f *= decay;

  g = f + s;
  g = ap (g, 413, k2, lfo2.ret.ptr[1] * mod, 22);
  g1 = g;
  g = delay (g, 1607);

  h = g;
  h = hf.crossv2 (h, flo, fhi, glo, ghi);
  h = ap (h, 833, k2);
  h1 = h;
  h = delay (h, 1447);
  fb = h * decay;

  (1) ? (
  l = a1;
  r = delay (a1, 400) * 0.4;

  l += delay (b1, 777) * 0.4;
  r += b1;

  l -= c1;
  r -= delay (c1, 1001) * 0.42;

  l += delay (d1, 777) * 0.42;
  r -= d1 * 0.49;

  l += e1 * 0.49;
  r -= delay (e1, 0801 - 37);

  l += delay (f1, 777);
  r += f1 ;

  l -= g1 ;
  r -= delay (g1, 1001 - 27);

  l += h1 * 0.2;
  r += delay (h1, 1001) * 0.2;
  ) : (
  mtxb.ptr[0] = a1;
  mtxb.ptr[1] = c1;
  mtxb.ptr[2] = e1;
  mtxb.ptr[3] = g1;
  mtxb.ptr[4] = b1;
  mtxb.ptr[5] = d1;
  mtxb.ptr[6] = f1;
  mtxb.ptr[7] = h1;
  hadamard_8 (mtxa.ptr, mtxb.ptr);
  l =  mtxa.ptr[0];
  r =  mtxa.ptr[7];
  );

  // more boilerplate (summing + downsample)
  easy_ap_next_sample();
  easy_fdn_next_sample();

  l = r * (1 - abs (stereo)) + l * abs (stereo);
  stereo < 0 ? (
    tmp = r;
    r = l;
    l = tmp;
  );

// l = eq1l.svf_tick (l);
//  r = eq1r.svf_tick (r);

  // Upsampling
  n_spls_up = src.up.resampler_2c_tick (src.outs.ptr, l, r);
  i = 0;
  loop (n_spls_up * 2, // *2 : two channels
    src.out_q.deque_push (src.outs.ptr[i]);
    i += 1;
  );
);

spl0 *= dry_gain;
spl1 *= dry_gain;
spl0 += src.out_q.deque_pop() * wet_gain;
spl1 += src.out_q.deque_pop() * wet_gain;
