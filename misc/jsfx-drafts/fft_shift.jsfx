desc: fractional circular FFT delay

import _core.jsfx-inc
import _complex.jsfx-inc

@init


// test of https://dsp.stackexchange.com/questions/10250/how-to-circularly-shift-a-signal-by-a-fraction-of-a-sample
// and https://dsp.stackexchange.com/questions/60476/how-to-do-fft-fractional-time-delay-solved
// to see if it can be use to shift minphase kernels

FFT_SIZE = 16;
FFT_MASK = FFT_SIZE - 1;
DELAY_SPLS = 0.5;

outbuff.array_init (FFT_SIZE);
n.array_init (FFT_SIZE);
inbuff.array_init (FFT_SIZE * 2);

// Shift zero-frequency component to center of spectrum as:
// https://numpy.org/doc/stable/reference/generated/numpy.fft.fftshift.html

i = 0;
loop (FFT_SIZE,
  inbuff.ptr[i * 2] = sin ($pi * i * 0.5);
  n.ptr[i] = (i >= FFT_SIZE / 2) ? -FFT_SIZE + i : i;
  i += 1;
);

// nv.debug_16(n);

fft (inbuff.ptr, FFT_SIZE);
fft_permute (inbuff.ptr, FFT_SIZE);
i = 0;
loop (FFT_SIZE,
    time_corr.complex_exp_im (-$pi * 2 * DELAY_SPLS * n.ptr[i] / FFT_SIZE);
    bucket.complex_load (inbuff.ptr + i * 2);
    bucket.complex_mul (time_corr);
    bucket.complex_store (inbuff.ptr + i * 2);
    i += 1;
);
fft_ipermute (inbuff.ptr, FFT_SIZE);
ifft (inbuff.ptr, FFT_SIZE);
ifft_rescale (inbuff.ptr, FFT_SIZE);

i = 0;
loop (FFT_SIZE,
  outbuff.ptr[i] = inbuff.ptr[i * 2];
  i += 1;
);

result.debug_16 (outbuff);
