import _core.jsfx-inc
import _complex.jsfx-inc
import _fft.jsfx-inc
import _fft-big.jsfx-inc

@init

// Ported from liquid DSP
// https://github.com/jgaeddert/liquid-dsp

// float sincf(float _x) {
//     // _x ~ 0 approximation
//     //if (fabsf(_x) < 0.01f)
//     //    return expf(-lngammaf(1+_x) - lngammaf(1-_x));
//
//     // _x ~ 0 approximation
//     // from : http://mathworld.wolfram.com/SincFunction.html
//     // sinc(z) = \prod_{k=1}^{\infty} { cos(\pi z / 2^k) }
//     if (fabsf(_x) < 0.01f)
//         return cosf(M_PI*_x/2.0f)*cosf(M_PI*_x/4.0f)*cosf(M_PI*_x/8.0f);
//
//     return sinf(M_PI*_x)/(M_PI*_x);
// }
//------------------------------------------------------------------------------
function sinc_function (x) (
    // I guess that with double precision the regular sin form is enough..
    abs (x) < 0.01 ?
        cos ($pi * x / 2) * cos ($pi * x / 4) * cos ($pi * x /8) :
        sin ($pi * x) / ($pi * x)
        ;
);

// Ported from liquid DSP
// https://github.com/jgaeddert/liquid-dsp

// float liquid_lngammaf(float _z)
// {
//     float g;
//     if (_z < 0) {
//         fprintf(stderr,"error: liquid_lngammaf(), undefined for z <= 0\n");
//         exit(1);
//     } else if (_z < 10.0f) {
//         // Use recursive formula:
//         //    gamma(z+1) = z * gamma(z)
//         // therefore:
//         //    log(Gamma(z)) = log(gamma(z+1)) - ln(z)
//         return liquid_lngammaf(_z + 1.0f) - logf(_z);
//     } else {
//         // high value approximation
//         g = 0.5*( logf(2*M_PI)-log(_z) );
//         g += _z*( logf(_z+(1/(12.0f*_z-0.1f/_z)))-1);
//     }
//     return g;
// }
//------------------------------------------------------------------------------
// JSFX doesn't suppor recursion, the non recursive version seems nicer too.
function log_gamma_function (z) global() local (z_cp, correction, g) (
  // z has to be GT 0
  g = -1; // error

  (z > 0) ? (
    correction = 0;
    z_cp = z;

    while (z_cp < 10) (
      correction += log (z_cp);
      z_cp += 1;
    );

    g = 0.5 * (log (2 * $PI) - log (z_cp));
    g += z_cp * (log (z_cp + (1 / (12 * z_cp - 0.1 / z_cp))) - 1);
    g -= correction;
  );
  g;
);
//------------------------------------------------------------------------------
// Ported from liquid DSP
// https://github.com/jgaeddert/liquid-dsp

// float liquid_besseli0f(float _z)
// {
//     // TODO : use better low-signal approximation
//     if (_z == 0.0f)
//         return 1.0f;
//
//     unsigned int k;
//     float t, y=0.0f;
//     for (k=0; k<NUM_BESSELI0_ITERATIONS; k++) {
// #if 0
//         t = powf(_z/2, (float)k) / tgamma((float)k+1);
//         y += t*t;
// #else
//         t = k * logf(0.5f*_z) - liquid_lngammaf((float)k + 1.0f);
//         y += expf(2*t);
// #endif
//     }
//     return y;
// }

function bessel_i0_function (z) global() local (y, t, k, NUM_BESSELI0_ITERATIONS) (
  // original was float32 and 32, just in case. TODO: check/learn what this is
  NUM_BESSELI0_ITERATIONS = 64;
  y = 1;
  z != 0 ? (
      k = 0;
      y = 0;
      loop (NUM_BESSELI0_ITERATIONS,
        t = k * log (0.5 * z) - log_gamma_function (k + 1);
        y += exp (2 * t);
        k += 1;
      );
  );
  y;
);
//------------------------------------------------------------------------------
// Ported from liquid DSP
// https://github.com/jgaeddert/liquid-dsp


// // returns the Kaiser window beta factor give the filter's target
// // stop-band attenuation (As) [Vaidyanathan:1993]
// //  _As     :   target filter's stop-band attenuation [dB], _As > 0
// float kaiser_beta_As(float _As)
// {
//     _As = fabsf(_As);
//     float beta;
//     if (_As > 50.0f)
//         beta = 0.1102f*(_As - 8.7f);
//     else if (_As > 21.0f)
//         beta = 0.5842*powf(_As - 21, 0.4f) + 0.07886f*(_As - 21);
//     else
//         beta = 0.0f;
//
//     return beta;
// }

function kaiser_beta_estimate (att)
  global()
  local (beta) (

  att = abs (att);

  beta = 0;
  (att > 50) ? (
      beta = 0.1102 * (att - 8.7);
  ) : (att > 21) ? (
      beta = 0.5842 * pow (att - 21, 0.4) + 0.07886 * (att - 21);
  );
  beta;
);
// "dst" is an array defined with "array_init"
//------------------------------------------------------------------------------
// Ported from liquid DSP
// https://github.com/jgaeddert/liquid-dsp

// Kaiser window [Kaiser:1980]
//  _n      :   sample index
//  _N      :   window length (samples)
//  _beta   :   window taper parameter
//  _mu     :   fractional sample offset

// float kaiser(unsigned int _n,
//              unsigned int _N,
//              float _beta,
//              float _mu)
// {
//     // validate input
//     if (_n > _N) {
//         fprintf(stderr,"error: kaiser(), sample index must not exceed window length\n");
//         exit(1);
//     } else if (_beta < 0) {
//         fprintf(stderr,"error: kaiser(), beta must be greater than or equal to zero\n");
//         exit(1);
//     } else if (_mu < -0.5 || _mu > 0.5) {
//         fprintf(stderr,"error: kaiser(), fractional sample offset must be in [-0.5,0.5]\n");
//         exit(1);
//     }
//
//     float t = (float)_n - (float)(_N-1)/2 + _mu;
//     float r = 2.0f*t/(float)(_N);
//     float a = liquid_besseli0f(_beta*sqrtf(1-r*r));
//     float b = liquid_besseli0f(_beta);
//     return a / b;
// }

function _kaiser (n, n_count, beta, mu, den_as_factor)
  global() local (t, r, a, b) (

  t = n - (n_count - 1) / 2 + mu;
  r = 2 * t / n_count;
  a = bessel_i0_function (beta * sqrt (1 - r * r));
  a * den_as_factor;
);

function kaiser (n, n_count, beta, mu)  global() local () (

  _kaiser  (n, n_count, beta, mu, 1 / bessel_i0_function (beta));
);
//------------------------------------------------------------------------------
function apply_kaiser_window (dst_ptr, dst_size, beta, mu)
  global() local (i, b) (

  i = 0;
  b = 1 / bessel_i0_function (beta);

  loop (dst_size,
    dst_ptr[i] *= _kaiser (i, dst_size, beta, mu, b);
    i += 1;
  );
);

function apply_kaiser_window (dst*, beta, mu)
  global() (

  apply_kaiser_window (dst.ptr, dst.size, beta, mu);
);
////------------------------------------------------------------------------------
// cosh not on JSFX.
//function cosh_w (n, n_count, alpha, mu)
//  global()
//  local (t, r, n, d) (
//
//  t = n - (n_count - 1) / 2 + mu;
//  r = 2 * t / n_count;
//  cosh (alpha * sqrt (1 - r * r)) / cosh (alpha);
//);
////------------------------------------------------------------------------------
//function apply_cosh_window (dst*, alpha, mu)
//  global() local (i) (
//
//  i = 0;
//  loop (dst.size,
//    dst.ptr[i] *= cosh_w (i, dst.size, alpha, mu);
//    i += 1;
//  );
//);
////------------------------------------------------------------------------------
function exp_w (n, n_count, alpha, mu)
  global()
  local (t, r, n, d) (

  t = n - (n_count - 1) / 2 + mu;
  r = 2 * t / n_count;
  exp (alpha * sqrt (1 - r * r)) / exp (alpha);
);
//------------------------------------------------------------------------------
function apply_exp_window (dst*, alpha, mu)
  global() local (i) (

  i = 0;
  loop (dst.size,
    dst.ptr[i] *= exp_w (i, dst.size, alpha, mu);
    i += 1;
  );
);
//------------------------------------------------------------------------------
function blackman (x)(
  0.42 - 0.5 * cos (2 * $pi * x) + 0.08 * cos (4 * $pi * x);
);
//------------------------------------------------------------------------------
// "dst" is an array defined with "array_init"
function apply_blackman_window (dst*)
  global() local(i) (

  i = 0;
  loop (dst.size,
    dst.ptr[i] *= blackman (i);
    i += 1;
  );
);

//------------------------------------------------------------------------------
function set_sinc_lowpass (dst_ptr, dst_size, fc, mu)
  global()
  local (t, n)(

  n = 0;
  loop (dst_size,
    t = n - (dst_size - 1) / 2 + mu;
    dst_ptr[n] = sinc_function (fc * t);
    n += 1;
  );
);

function set_sinc_lowpass (dst_arr*, fc, mu)
  global() local ()(

  set_sinc_lowpass (dst_arr.ptr, dst_arr.size, fc, mu);
);
//------------------------------------------------------------------------------
// normalized 0 to 1 sinc. mu is a fractional delay
// "dst" is an array defined with "array_init"
// "mu" is a fractional delay in samples
function get_sinc_lowpass (dst*, freq, srate, taps, mu)
  global()
  local (fc, halfsize, t, n)(

  dst.array_init (taps);
  set_sinc_lowpass (dst, 2.0 * freq / srate, mu);
);
//------------------------------------------------------------------------------
function fir_kernel_normalize (k_ptr, k_size) local (g, i) global ()(
  g = 0;
  i = 0;
  loop (k_size,
    g += k_ptr[i];
    i += 1;
  );
  i = 0;
  g = abs (1 / g);
  loop (k_size,
    k_ptr[i] *= g;
    i += 1;
  );
);

// "dst" is an array defined with "array_init"
function fir_kernel_normalize (dst*) global ()(
  fir_kernel_normalize (dst.ptr, dst.size);
);
//------------------------------------------------------------------------------
// mu is a phase shift in samples. Ideally from 0 to 1. Note that it uses FFT
// circular rotation, so it needs as many zero samples on the tail as the
// rotation.
function fir_kernel_to_minphase (kernel_ptr, kernel_size)
  local (fft_size, i, n) global ()(

  // log cepstrum method (Mystran's post):
  // https://www.kvraudio.com/forum/viewtopic.php?f=33&t=556692&start=45

  fft_size = max (kernel_size * 32, 32 * 1024);
  this.work.array_init_fft (fft_size * 2);

 // regular fft of the impulse
  i = 0;
  loop (kernel_size,
    this.work.ptr[i * 2] = kernel_ptr[i];
    i += 1;
  );
  fft_big (this.work.ptr, fft_size);

  // replace real part by log of magnitude, leave imaginary part to 0.
  i = 0;
  loop (fft_size * 2,
    this.bucket.complex_load (this.work.ptr + i);
    this.bucket.re = log (max (this.bucket.complex_abs(), 1e-12));
    this.bucket.im = 0;
    this.bucket.complex_store (this.work.ptr + i);
    i += 2;
  );

  // from log spectrum to log cepstrum
  ifft_big (this.work.ptr, fft_size);
  ifft_rescale (this.work.ptr, fft_size);

  //  multiply elements in range [1, N/2-1] by 2 and zero the elements in range
  // [N/2+1, N-1], bins 0 and N/2 are left "as-is", then FFT again.
  i = 2;
  loop ((fft_size / 2) - 1,
    this.work.ptr[i] *= 2;
    this.work.ptr[i + 1] = 0; // should be real already...
    i += 2;
  );
  memset (this.work.ptr + fft_size + 2, 0, fft_size - 2);
  fft_big (this.work.ptr, fft_size);

  // complex "exp" of each bin, IFFT and truncate.
  i = 0;
  loop (fft_size * 2,
    this.bucket.complex_load (this.work.ptr + i);
    this.bucket.complex_exp (this.bucket);
    this.bucket.complex_store (this.work.ptr + i);
    i += 2;
  );

  ifft_big (this.work.ptr, fft_size);
  ifft_rescale (this.work.ptr, fft_size);

  i = 0;
  loop (kernel_size,
    kernel_ptr[i] = this.work.ptr[i * 2];
    i += 1;
  );

  this.work.array_size_drop_to (0);
);

function fir_kernel_to_minphase (kernel*)(
  fir_kernel_to_minphase (kernel.ptr, kernel.size);
);
//------------------------------------------------------------------------------
// https://www.dsprelated.com/freebooks/filters/Numerical_Computation_Group_Delay.html
// fc norm freq from 0 to 0.5
function get_group_delay (kernel*, fc)
  local (FFT_SIZE, b, br, br_re, br_im, b_re, b_im, bucket, i)
  global ()(

  FFT_SIZE = 32 * 1024;

  bucket = (2 * fc * 2 * (FFT_SIZE - 1));
  bucket = (bucket + 0.5) | 0;

  this.b.array_init_fft (FFT_SIZE * 2);
  this.br.array_init_fft (FFT_SIZE * 2);

  i = 0;
  loop (kernel.size,
    this.b.ptr[i * 2] = kernel.ptr[i];
    this.br.ptr[i * 2] = kernel.ptr[i] * i; // ramped polynomial
    i += 1;
  );

  fft (this.b.ptr, FFT_SIZE);
  fft (this.br.ptr, FFT_SIZE);

  fft_permute (this.b.ptr, FFT_SIZE);
  fft_permute (this.br.ptr, FFT_SIZE);

  // real part of complex division
  br_re = this.br.ptr[bucket];
  br_im = this.br.ptr[bucket + 1];
  b_re  = this.b.ptr[bucket];
  b_im  = this.b.ptr[bucket + 1];

  this.br.array_size_drop_to (0);
  this.b.array_size_drop_to (0);

  (br_re * b_re + br_im * b_im) / (b_re * b_re + b_im * b_im);
);
//------------------------------------------------------------------------------
// "dst" is an array defined with "array_init"
function get_kaiser_lp_kernel_2(
  dst*, cutoff_hz, srate, taps, beta, mu, minphase
  )
  global()
  local (frac)(

  get_sinc_lowpass (dst, cutoff_hz, srate, taps, mu);
  apply_kaiser_window (dst, beta, mu);
  (minphase != 0) ? (
    // as of now mu is ignored on minphase kernels.
    fir_kernel_to_minphase (dst);
  );
  fir_kernel_normalize (dst);
);
//------------------------------------------------------------------------------
// "dst" is an array defined with "array_init"
function get_kaiser_lp_kernel (dst*, cutoff_hz, srate, taps, att, mu, minphase)
  global()(
  get_kaiser_lp_kernel_2(
    dst, cutoff_hz, srate, taps, kaiser_beta_estimate (att), mu, minphase
    );
);
//------------------------------------------------------------------------------
// Regular FIR filter, "kernel" is an array containing the kernel. It allocates
// memory, so it only can be used once from "init".
function fir_2ch_init (kernel*)
  global() (

  this.kernel.array_alias (kernel);
  // mantaining two contiguous delay lines and switching between them. It is
  // simple and cache-friendly.
  this.z_l.array_init (kernel.size * 2);
  this.z_r.array_init (kernel.size * 2);
  this.z_l.array_clear();
  this.z_r.array_clear();
  this.head = 0;
);

function fir_2ch_tick (outs_ptr, in1, in2)
  local (l_ptr, r_ptr, i)
  global(kv, A) (

  this.head = this.head == 0 ? this.kernel.size : this.head;
  this.head -= 1;

  l_ptr = this.z_l.ptr + this.head;
  r_ptr = this.z_r.ptr + this.head;

  l_ptr[0] = in1;
  r_ptr[0] = in2;

  i = 0;
  outs_ptr[0] = outs_ptr[1] = 0;
  loop (this.kernel.size,
    outs_ptr[0] += l_ptr[i] * this.kernel.ptr[i];
    outs_ptr[1] += r_ptr[i] * this.kernel.ptr[i];
    i += 1;
  );
  // inserting the bottom samples for the second delay line now that just the
  //previous position has been touched
  l_ptr[this.kernel.size] = in1;
  r_ptr[this.kernel.size] = in2;
);
//------------------------------------------------------------------------------
// Polyphase FIR interpolator. "kernel" is an array containing the kernel,
// "ratio" is an integer ratio. It allocates memory, so it only can be used once
// from "init".
function fir_2ch_interpolator_init (kernel*, ratio)
  local (ksize, subksize, subk, src, dst, offset)
  global() (

  // To make it polyphase, we ensure that the coefficients are multiples of
  // "ratio" the unused parts of the kernel will have zeros that don't
  // contribute to the response.

  this.ratio    = ratio;
  this.subksize = ceil (kernel.size / ratio);
  ksize         = this.subksize * ratio;

  this.kernel.array_init (ksize);
  memset (this.kernel.ptr, 0, this.kernel.size);

  // interleave the kernel coefficients
  subk = 0;
  offset = 0;
  loop (ratio,
    src = subk;
    dst = 0;
    while (src < kernel.size)(
      this.kernel.ptr[offset + dst] = kernel.ptr[src];
      this.kernel.ptr[offset + dst] *= ratio; // energy loss compensation
      dst += 1;
      src += ratio;
    );
    subk += 1;
    offset += this.subksize;
  );

  // sharing delay lines between subfilters
  this.z_l.array_init (this.subksize * 2);
  this.z_r.array_init (this.subksize * 2);
  this.z_l.array_clear();
  this.z_r.array_clear();
  this.head = 0;
);

// outputs an interleaved set of ratio sample pairs.
// each channel
function fir_2ch_interpolator_tick (outs_ptr, in1, in2)
  global()
  local (l_ptr, r_ptr, i, s, offset) (

  this.head = this.head == 0 ? this.subksize : this.head;
  this.head -= 1;

  l_ptr = this.z_l.ptr + this.head;
  r_ptr = this.z_r.ptr + this.head;

  l_ptr[0] = in1;
  r_ptr[0] = in2;

  memset (outs_ptr, 0, 2 * this.ratio);

  s = 0;
  offset = 0;
  loop (this.ratio,
    i = 0;
    loop (this.subksize,
      outs_ptr[s] += this.kernel.ptr[offset + i] * l_ptr[i];
      outs_ptr[s + 1] += this.kernel.ptr[offset + i] * r_ptr[i];
      i += 1;
    );
    offset += this.subksize;
    s += 2;
  );
  // inserting the bottom samples for the second delay line now that just the
  //previous position has been touched
  l_ptr[this.subksize] = in1;
  r_ptr[this.subksize] = in2;
);
//------------------------------------------------------------------------------
// Polyphase FIR decimator. "kernel" is an array containing the kernel, "ratio"
// is an integer ratio. It does allocate memory, so it only can be used once
// from "init".
function fir_2ch_decimator_init (kernel*, ratio)
  local (ksize, offset)
  global() (

  // To make it polyphase, we ensure that the coefficients are multiples of
  // "ratio" the unused parts of the kernel will have zeros that don't
  // contribute to the response.

  this.ratio    = ratio;
  ksize         = ceil (kernel.size / ratio) * ratio;
  this.kernel.array_init (ksize);
  // On the decimator the zero coefficients only added for the filter to be
  // polyphase decomposable have to be at the front.
  offset = this.kernel.size - kernel.size;
  memset (this.kernel.ptr, 0, offset);
  memcpy (this.kernel.ptr + offset, kernel.ptr, kernel.size);

  this.z_l.array_init (kernel.size * 2);
  this.z_r.array_init (kernel.size * 2);
  this.z_l.array_clear();
  this.z_r.array_clear();
  this.head = 0;
);

// outputs 2 samples, one for each channel. Takes a contiguous stream of
// interleaved samples for each channel, where N sample pairs = ratio.
function fir_2ch_decimator_tick (outs_ptr, ins_ptr)
  global()
  local (l_ptr, r_ptr, i, s, in1, in2) (

  s = 0;
  loop (this.ratio,
    this.head = this.head == 0 ? this.kernel.size : this.head;
    this.head -= 1;
    l_ptr = this.z_l.ptr + this.head;
    r_ptr = this.z_r.ptr + this.head;
    in1 = ins_ptr[s];
    in2 = ins_ptr[s + 1];
    l_ptr[0] = in1;
    r_ptr[0] = in2;
    l_ptr[this.kernel.size] = in1;
    r_ptr[this.kernel.size] = in2;
    s += 2;
  );

  i = 0;
  outs_ptr[0] = outs_ptr[1] = 0;
  loop (this.kernel.size,
    outs_ptr[0] += l_ptr[i] * this.kernel.ptr[i];
    outs_ptr[1] += r_ptr[i] * this.kernel.ptr[i];
    i += 1;
  );
);
//------------------------------------------------------------------------------
// Naive sinc interpolator. Useful for integer rates with lowish
// perodicity (e.g 44 to 48KHz), as it stores the tables in memory without
// interpolation. It does allocate memory, so it only can be used once  from
// "init".
function sinc_resampler_2c_init_2(
  tgt_srate, src_srate, taps, cutoff_hz, beta, minphase
  )
  local (gcd_v, i, j, k, t1, t2, n1, n2, t_in_spl, k_ptr, mu_c, k_oversz)
  global () (

  gcd_v = gcd (tgt_srate, src_srate);

  this.rate_tgt = tgt_srate / gcd_v;
  this.rate_src = src_srate / gcd_v;
  this.ratio    = this.rate_tgt / this.rate_src;
  this.taps     = taps;

  this.kernels.array_init (taps * this.rate_tgt);
  this.z_l.array_init (taps * 2); // 2x size (easier code)
  this.z_r.array_init (taps * 2); // 2x size (easier code)
  this.n_spls.array_init (this.rate_src);

  (cutoff_hz * 2) <= tgt_srate ? (
    this.fc = 2 * cutoff_hz / tgt_srate;
    this.ratio < 1 ? this.fc *= this.ratio;
  ) : (
    this.bug_fc = 1;
  );

  // Precompute the number of output samples for each sample and the phases. The
  // phases are just a temporary for easier debugging on JSFX (no debugger). The
  // kernels could be initialized in place.

  this.mu.array_init (this.rate_tgt); // mu = phase

  // t1 = time of output sample
  // t2 = time of previous output sample
  // n1 = number of input samples at t1
  // n2 = number of input samples at t2

  i = 0;
  j = 0;
  t1 = this.rate_src * this.rate_tgt;
  t2 = t1 - this.rate_tgt;
  n2 = floor (t2 / this.rate_src);

  loop (this.rate_src,
    n1 = floor (t1 / this.rate_src);
    k = 1;
    this.n_spls.ptr[i] = n1 - n2;

    loop (this.n_spls.ptr[i],
      t_in_spl = (n2 + k) * this.rate_src;
//      this.mu.ptr[j] = (t1 - t_in_spl) / this.rate_tgt;
      this.mu.ptr[j] = (t1 - t_in_spl);
      // Kernels could be initialized here without using the table.
      j += 1;
      k += 1;
    );

    n2 = n1;
    t1 += this.rate_tgt;
    i += 1;
  );

  this.bug_tbl =
    range_get_sum (this.n_spls.ptr, this.n_spls.size) != this.rate_tgt;


  // TODO, fractional delay compensation on the sinc, have to figure out how
  // to compute the latency first. This below worked for 2x downsampling
  // ratios.

  // taps % 2 == 0 ? (
  //   mu_c = this.ratio > 1 ? -1/2 : 1/2;
  // ) : (
  //   mu_c = 0;
  // );

  // unfortunately the log cepstrum conversion was not friendly to timing
  // information. An oversized sinc is created instead and then interleaved
  // to each branch.
  
  this.bigkernel.array_init (this.kernels.size);

  set_sinc_lowpass (this.bigkernel, this.fc / this.rate_tgt, this.rate_tgt);
  apply_kaiser_window (this.bigkernel, beta, this.rate_tgt);
  minphase ? (
    fir_kernel_to_minphase (this.bigkernel);
  );

  i = 0;
  loop (this.rate_tgt,
    k_ptr = this.kernels.ptr + (i * taps);
    j = this.rate_tgt - this.mu.ptr[i] - 1;
    k = 0;
    loop (taps,
      k_ptr[k] = this.bigkernel.ptr[j];
      k += 1;
      j += this.rate_tgt;
    );
    fir_kernel_normalize (k_ptr, taps);
    i += 1;
  );

  this.bigkernel.array_size_drop_to (0);
  this.mu.array_size_drop_to (0); // deallocate, it was only created for debugging.

  this.n_spls_out = 0;
  this.n_spls_in  = 0;
);

function sinc_resampler_2c_init(
  tgt_srate, src_srate, taps, cutoff_hz, att, minphase
  )
  global() local() (

  this.sinc_resampler_2c_init_2(
    tgt_srate, src_srate, taps, cutoff_hz, kaiser_beta_estimate (att), minphase
    );
);
//------------------------------------------------------------------------------
function sinc_resampler_2c_max_n_out_samples() global() (
  ceil (this.ratio);
);
// TODO: delay on should be (taps * tgt_rate - 1) / (2 * src_rate)

//------------------------------------------------------------------------------
function sinc_resampler_2c_tick (out_ptr, in_l, in_r)
  local (ph, n_spls, spl, i, l, r, kpos, l_ptr, r_ptr)
  global () (

  this.z.pos = this.z.pos == 0 ? this.taps : this.z.pos;
  this.z.pos -= 1;

  l_ptr = this.z_l.ptr + this.z.pos;
  r_ptr = this.z_r.ptr + this.z.pos;

  l_ptr[0] = in_l;
  r_ptr[0] = in_r;

  n_spls = this.n_spls.ptr[this.n_spls_in];

  spl    = 0;
  loop (n_spls,
    kpos = this.n_spls_out * this.taps;
    i    = 0;
    l    = 0;
    r    = 0;

    loop (this.taps,
      l += this.kernels.ptr[kpos + i] * l_ptr[i];
      r += this.kernels.ptr[kpos + i] * r_ptr[i];
      i += 1;
    );

    out_ptr[spl] = l;
    spl += 1;
    out_ptr[spl] = r;
    spl += 1;

    this.n_spls_out += 1;
  );

  // storing at the tail to avoid wrapping, done after probably having touched
  // the surrounding memory.
  l_ptr[this.taps] = in_l;
  r_ptr[this.taps] = in_r;

  this.n_spls_in += 1;
  this.n_spls_in >= this.n_spls.size ? (
    // resync
    this.n_spls_in = 0;
    this.n_spls_out = 0;
  );

  n_spls;
);
//------------------------------------------------------------------------------
// may belong somewhere else
function get_nearest_pow2_int_ratio (rate1, rate2)
  local (LN2_RECIP, rem_log2, rate_rem, ret, big_rate, small_rate)
  global () (

  LN2_RECIP = 1 / log (2);

  big_rate   = max (rate1, rate2);
  small_rate = min (rate1, rate2);

  rem_log2 = log (big_rate) * LN2_RECIP  - log (small_rate) * LN2_RECIP;
  rem_log2 = floor (rem_log2);

  rate_rem = big_rate;
  ret      = 1;

  while (rem_log2 && rate_rem % 2 == 0) (
    rate_rem *= 0.5;
    rem_log2 -= 1;
    ret      *= 2;
  );

  ret;
);
//------------------------------------------------------------------------------
// Polyphase FIR + sinc interpolator combined. The regular FIR handles the
// big chunk of the resampling job and the sinc interpolator the fractional part
//
// As of now "minphase" only affects the integer resamplers.
function resampler_2c_init_2(
  tgt_srate, src_srate, taps, taps_frac, cutoff_hz, beta, minphase
  )
  local (integ_ratio, integ_mask, frac_srate, beta, fracb_spls, intb_spls)
  global () (

  intb_spls = 1;
  fracb_spls = 1;

 this.integ_ratio = get_nearest_pow2_int_ratio (tgt_srate, src_srate);
  this.is_downsampler = tgt_srate <= src_srate;

  this.is_downsampler ? (
    frac_srate = src_srate;

    (this.integ_ratio != 1) ? (
      frac_srate /= this.integ_ratio;
      intb_spls = this.integ_ratio;

      // TODO: correct fractional delay?
      get_kaiser_lp_kernel_2(
        this.kernel,
        cutoff_hz,
        src_srate,
        taps * this.integ_ratio,
        beta,
        0, //taps % 2 == 0 ? 1 / pow (2, this.integ_rati  * 4) : 0,
        minphase);
      this.integ.fir_2ch_decimator_init (this.kernel, this.integ_ratio);
    );

    this.has_fractional = tgt_srate != frac_srate;

    (this.has_fractional) ? (
      this.frac.sinc_resampler_2c_init_2(
        tgt_srate, frac_srate, taps_frac, cutoff_hz, beta, minphase
        );
    );
  ) : (
    frac_srate = tgt_srate;

    (this.integ_ratio != 1) ? (
      frac_srate /= this.integ_ratio;
      intb_spls = this.integ_ratio;

      // TODO: correct fractional delay?
      get_kaiser_lp_kernel_2(
        this.kernel,
        cutoff_hz,
        tgt_srate,
        taps * this.integ_ratio,
        beta,
        0,
        minphase);
      this.integ.fir_2ch_interpolator_init (this.kernel, this.integ_ratio);
    );

    this.has_fractional = src_srate != frac_srate;

    this.has_fractional ? (
      this.frac.sinc_resampler_2c_init_2(
        frac_srate,
        src_srate,
        taps_frac,
        cutoff_hz * (frac_srate / src_srate),
        beta,
        minphase
        );
      fracb_spls = this.frac.sinc_resampler_2c_max_n_out_samples();
    );
  );

  this.intb.array_init (intb_spls * 2);
  this.fracb.array_init (fracb_spls * 2);
  this.spl_idx = 0;
);

// Alternate initialization specifying the Kaiser Window att.
function resampler_2c_init(
  tgt_srate, src_srate, taps, taps_frac, cutoff_hz, att_db, minphase
  )
  global() local () (

  this.resampler_2c_init_2(
    tgt_srate,
    src_srate,
    taps,
    taps_frac,
    cutoff_hz,
    kaiser_beta_estimate (att_db),
    minphase
    );
);

function resampler_2c_max_n_out_samples()(
  this.is_downsampler ? 1 : (this.intb.size * this.fracb.size) / 2;
);

// TODO: latency; have to figure out the latency of the sinc_resampler.

// processing function when it is know that "resampler_2c_init" was called as a
// downsampler.
function resampler_2c_tick_downsampler (dst_ptr, in_l, in_r)
  local (n_spls, spl_idx)
  global () (

  n_spls = 1;
  this.fracb.ptr[0] = in_l; // this handles the no-change case.
  this.fracb.ptr[1] = in_r;

  this.integ_ratio > 1 ? (
    n_spls  = 0;
    spl_idx = this.spl_idx & this.integ_ratio - 1;
    this.intb.ptr[spl_idx * 2] = in_l;
    this.intb.ptr[spl_idx * 2 + 1] = in_r;

    spl_idx == (this.integ_ratio - 1) ? (
      this.integ.fir_2ch_decimator_tick (this.fracb.ptr, this.intb.ptr);
      n_spls = 1;
    );
  );

  this.has_fractional && n_spls != 0 ? (
    // a downsampler will have at most 1 out.
    n_spls = this.frac.sinc_resampler_2c_tick(
      this.fracb.ptr, this.fracb.ptr[0], this.fracb.ptr[1]
      );
  );

  n_spls != 0 ? (
    memcpy (dst_ptr, this.fracb.ptr, 2);
  );

  this.spl_idx += 1;
  n_spls;
);

// processing function when it is know that "resampler_2c_init" was called as an
// upsampler.
function resampler_2c_tick_upsampler (dst_ptr, in_l, in_r)
  local (n_spls, i)
  global () (

  n_spls = 1;
  this.fracb.ptr[0] = in_l;
  this.fracb.ptr[1] = in_r;

  this.has_fractional ? (
    // 1 or 2 outs.
    n_spls = this.frac.sinc_resampler_2c_tick(
      this.fracb.ptr, this.fracb.ptr[0], this.fracb.ptr[1]
      );
  );

  this.integ_ratio > 1 ? (
    i = 0;
    loop (n_spls,
      this.integ.fir_2ch_interpolator_tick(
        this.intb.ptr, this.fracb.ptr[i * 2], this.fracb.ptr[i * 2 + 1]
        );
      memcpy (dst_ptr + i * this.intb.size, this.intb.ptr, this.intb.size);
      i += 1;
    );
    n_spls *= this.integ_ratio;
  ) : (
    memcpy (dst_ptr, this.fracb.ptr, n_spls * 2);
  );
  n_spls;
);

// processing function when it is unknow if a given resampler is an up or
// downsampler.
function resampler_2c_tick (dst_ptr, in_l, in_r)
  local (n_spls) global () (

  this.is_downsampler ? (
    n_spls = this.resampler_2c_tick_downsampler (dst_ptr, in_l, in_r);
  ) : (
    n_spls = this.resampler_2c_tick_upsampler (dst_ptr, in_l, in_r);
  );
  n_spls;
);
//------------------------------------------------------------------------------
