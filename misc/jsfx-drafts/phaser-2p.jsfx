desc:Artv phaser 2p (ZDF)

slider1:f_center=0.4<0, 1, 0.001>Freq Center(%)
slider2:f_width=0.5<0, 1, 0.001>Freq Width(%)
slider3:depth=0.5<0, 1, 0.001>Depth(%)
slider4:f_detune=0.9<0, 1, 0.001>Freq Detune(%)
slider5:f_mode=2<0, 10, 1>Range Curve

slider10:lfo_freq=0.25<0, 1, 0.001>Lfo Freq(%)
slider11:lfo_depth=0.85<0, 1, 0.001>Lfo Depth(%)
slider12:lfo_phase_diff=0<0, 1, 0.001>Lfo St Diff(%)

slider20:feedback=0.9<-1, 1, 0.001>Feedback(%)
slider21:hp=0.05<0, 1, 0.001>Feedback HP(%)
slider22:lp=0.1<0, 1, 0.001>Feedback LP(%)
slider23:bp=0.15<0, 1, 0.001>Feedback BP(%)
slider23:hardness=0.15<0, 15, 0.001>Hardness

slider33:n_stages=6<1, 16, 1>N Stages
slider34:out_stage=6<1, 16, 1>Out Stage
slider35:n_invert=0<0, 16, 1>N Inverting Stages
slider36:mix=0.5<0, 1, 0.0001>Mix
slider37:trim_db=0<0, 30, 0.1>Trim(dB)
slider38:dc_block=0<0, 1, 1>DC blocker
slider39:onepole=0<0, 1, 1>Single Pole

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import _delay-line.jsfx-inc
import _lfo.jsfx-inc
import _filters.jsfx-inc

@init

k.n_stages = 16;
k.n_channels = 2;

lfo.lfo_bank_init (k.n_channels, 1);
lfov.array_init (k.n_channels);

l_ap.ap_2p_cascade_init (16);
r_ap.ap_2p_cascade_init (16);

l_ap1.ap_1p_cascade_init (16);
r_ap1.ap_1p_cascade_init (16);

GS1.array_init(k.n_stages * k.n_channels);
GS2.array_init(3 * k.n_channels);

freqs_l.array_init(k.n_stages);
freqs_r.array_init(k.n_stages);

l_dc.tpt_1p_reset (20., srate);
r_dc.tpt_1p_reset (20., srate);

// initial/old implementation
function get_freqs_legacy(
  ptr, lfo, lfo_depth, n_stages, f_center, f_width, f_mode, f_detune, depth
  )
  global()
  local (norm_center, freq_lo, freq_hi, freq_hz, detune, detune_mul, freq, freqv, factor i) (

  norm_center = f_center * f_center * f_center * f_center;
  loop(f_mode,
    norm_center *= f_center;
  );

  lfo = exp (lfo * lfo_depth * 3.);

  freq_hz = 40 + 20000 * norm_center;
  // spread of 4 octaves maximum
  freq_hi = exp (log(2) * 2 * f_width);
  freq_lo = 1 / freq_hi;
  freq_lo *= freq_hz;
  freq_hi *= freq_hz;
  factor = pow (freq_hi / freq_lo, 1. / n_stages);

  detune = 0.3444 * f_detune;
  detune_mul = -1 - 0.09 * f_detune;
  freq = freq_lo;

  i = 0;
  loop(n_stages,
    freqv = freq * lfo;
    freqv *= 1 + detune;
    freqv = max(freqv, 1);
    freqv -= max(freqv - 14000, 0);
    freq *= factor;
    detune *= detune_mul;
    ptr[i] = freqv;
    i += 1;
  );
);

// run modulation from 0 to 1 in linear scale, then whaveshape.
function get_freqs_ws(
  ptr, lfo, lfo_depth, n_stages, f_center, f_width, f_mode, f_detune, depth
  )
  global()
  local (i, f, fv, minv, maxv, lfo_lim, rangered, max_excur) (

  f_center *= 0.3;
  f_center += 0.3;
  lfo *= 0.5 * lfo_depth;
  f_width *= 0.2 / n_stages;
  f_detune = 1 - f_detune * 0.005;

  f = f_center - lfo -  max_excur;

  i = 0;
  loop (n_stages,
    fv = f * f_detune;
    f_detune *= 0.999999;
    fv = (fv < 0) ? 0 : fv;
    fv = (fv > 1) ? 1 : fv;
    loop (f_mode,
      fv *= fv;
    );
   ptr[i] = 10 + fv * (1200 + depth * 17500);
   f += f_width;
   i += 1;
  );
);

function get_zdf_sample(
  in,
  ap2*,
  ap1*,
  lshelf*,
  hshelf*,
  dc*,
  zdf*,
  k,
  h,
  dc_block,
  onepole,
  n_stages,
  n_invert
  )
  local (i, j, stages)
  global (GS1.ptr, GS2.ptr)
(
  i = 0;
  j = 0;
  (onepole == 1) ? (
    loop(n_stages,
        GS.ptr[j]     = ap1.ap_1p_cascade_get_g (i);
        GS.ptr[j + 1] = ap1.ap_1p_cascade_get_s (i);
        (i < n_invert) ? (
          GS.ptr[j] = -GS.ptr[j];
          GS.ptr[j + 1] = -GS.ptr[j + 1];
        );
        j += 2;
        i += 1;
    );
  ) : (
    loop(n_stages,
        GS.ptr[j]     = ap2.ap_2p_cascade_get_g (i);
        GS.ptr[j + 1] = ap2.ap_2p_cascade_get_s (i);
        (i < n_invert) ? (
          GS.ptr[j] = -GS.ptr[j];
          GS.ptr[j + 1] = -GS.ptr[j + 1];
        );
        j += 2;
        i += 1;
    );
  );
  (lshelf.k != 0) ? (
    GS2.ptr[0] = lshelf.lshelf_1p_get_g();
    GS2.ptr[1] = lshelf.lshelf_1p_get_s();
  ) : (
    GS2.ptr[0] = 1;
    GS2.ptr[1] = 0;
  );
  (hshelf.k != 0) ? (
    GS2.ptr[2] = hshelf.hshelf_1p_get_g();
    GS2.ptr[3] = hshelf.hshelf_1p_get_s();
  ) : (
    GS2.ptr[2] = 1;
    GS2.ptr[3] = 0;
  );
  (dc_block == 1) ? (
    GS2.ptr[4] = dc.tpt_1p_get_g_hp();
    GS2.ptr[5] = dc.tpt_1p_get_s_hp();
  );
 zdf.get_zdf_sqrt_sigmoid_before_fb_junction_pp(
    in, k * 0.995, h, GS1.ptr, GS2.ptr, n_stages, 2 + dc_block
    );
);

@slider

lfo_hz = lfo_freq * lfo_freq * lfo_freq * 10;
lfo.lfo_bank_reset_freq (0, lfo_hz, srate);

lfo_phase_diff != lfo_phase_diff_prev ? (
  lfo_phase_diff_prev = lfo_phase_diff;
  lfo.lfo_bank_reset_phase (0, 0, 0);
  lfo.lfo_bank_reset_phase (0, 1, lfo_phase_diff);
);

trim = exp(-trim_db * log(10)/20);

fb_scaled = pow (abs (feedback), 1/6);
lim_hardness = 1 / sqrt (hardness);
// the sigmoid is applying gain reduction. Compensate
g_hardness = (fb_scaled > lim_hardness) ? fb_scaled / lim_hardness : 1;
fb_scaled = (feedback < 0) ? -fb_scaled : fb_scaled;

s_depth = 0.008 + depth * depth * 10;
@sample

out0 = spl0;
out1 = spl1;

lfo.lfo_bank_tick_tri (lfov.ptr, 0);
get_freqs_legacy(
  freqs_l.ptr, lfov.ptr[0], lfo_depth, n_stages, f_center, f_width, f_mode, f_detune
  );
get_freqs_legacy(
  freqs_r.ptr, lfov.ptr[1], lfo_depth, n_stages, f_center, f_width, f_mode, f_detune
);

out0 = get_zdf_sample(
  out0,
  l_ap,
  l_ap1,
  l_lshelf,
  l_hshelf,
  l_dc,
  l_zdf,
  fb_scaled,
  hardness,
  dc_block,
  onepole,
  n_stages,
  n_invert);

out1 = get_zdf_sample(
  out1,
  r_ap,
  r_ap1,
  r_lshelf,
  r_hshelf,
  r_dc,
  r_zdf,
  fb_scaled,
  hardness,
  dc_block,
  onepole,
  n_stages,
  n_invert);

phased0 = out0;
phased1 = out1;

phased0 = out0;
phased1 = out1;

i = 0;
loop (n_stages,
 (onepole == 1) ? (
    l_ap1.ap_1p_cascade_reset_no_prewarp (i, freqs_l.ptr[i], srate);
    r_ap1.ap_1p_cascade_reset_no_prewarp (i, freqs_r.ptr[i], srate);
    phased0 = l_ap1.ap_1p_cascade_tick (i, phased0);
    phased1 = r_ap1.ap_1p_cascade_tick (i, phased1);
  ) : (
    l_ap.ap_2p_cascade_reset_no_prewarp (i, freqs_l.ptr[i], s_depth, srate);
    r_ap.ap_2p_cascade_reset_no_prewarp (i, freqs_r.ptr[i], s_depth, srate);
    phased0 = l_ap.ap_2p_cascade_tick (i, phased0);
    phased1 = r_ap.ap_2p_cascade_tick (i, phased1);
  );
  (i < n_invert) ? (
    phased0 = -phased0;
    phased1 = -phased1;
  );
  i += 1;
  (i == out_stage) ? (
    out0 = phased0;
    out1 = phased1;
  );
);

(i < out_stage) ? (
  out0 = phased0;
  out1 = phased1;
);

// modulate shelves on the feedback path
g_db = hp * -8;
fshelf = max (freqs_l.ptr[0], 160);
l_lshelf.lshelf_1p_reset_no_prewarp(fshelf, g_db, srate);
r_lshelf.lshelf_1p_reset_no_prewarp(fshelf, g_db, srate);

g_db = lp * -1.3;
fshelf = max (freqs_l.ptr[n_stages - 1] * 2, 3700);
l_hshelf.hshelf_1p_reset_no_prewarp(fshelf, g_db, srate);
r_hshelf.hshelf_1p_reset_no_prewarp(fshelf, g_db, srate);

(dc_block == 1) ? (
  l_dc.tpt_1p_tick_hp (l_hshelf.hshelf_1p_tick (l_lshelf.lshelf_1p_tick (out0)));
  r_dc.tpt_1p_tick_hp (r_hshelf.hshelf_1p_tick (r_lshelf.lshelf_1p_tick (out1)));
) : (
// tick shelves and DC on the feedback path to update the states.
  l_hshelf.hshelf_1p_tick (l_lshelf.lshelf_1p_tick (out0));
  r_hshelf.hshelf_1p_tick (r_lshelf.lshelf_1p_tick (out1));
);


g_wet = mix * g_hardness;
g_dry = (1 - mix) * (1 + abs (fb_scaled));

spl0 = out0 * g_wet + spl0 * g_dry;
spl1 = out1 * g_wet + spl1 * g_dry;
spl0 *= trim;
spl1 *= trim;

spl0 = min (spl0, 6);
spl1 = min (spl1, 6);
spl0 = max (spl0, -6);
spl1 = max (spl1, -6);
