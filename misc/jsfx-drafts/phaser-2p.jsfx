desc:Artv phaser 2p (ZDF)

slider1:f_center=0.4<0, 1, 0.001>Freq Center(%)
slider2:f_width=0.5<0, 1, 0.001>Notches Width(%)
slider3:f_detune=0<-1, 1, 0.001>Detune(%)
slider4:f_mode=0.8<0, 0.999, 0.001>Range Curve

slider10:lfo_freq=0.25<0, 1, 0.001>Lfo Freq(%)
slider11:lfo_depth=0.85<0, 1, 0.001>Lfo Depth(%)
slider12:lfo_phase_diff=0<0, 1, 0.001>Lfo St Diff(%)

slider14:env_depth=0<-1, 1, 0.001>Env Depth(%)
slider15:env_speed=0<0, 1, 0.001>Env Speed(%)

slider20:feedback=0.9<-1, 1, 0.001>Feedback(%)
slider21:hp=0.05<0, 1, 0.001>Feedback HP(%)
slider22:lp=0.1<0, 1, 0.001>Feedback LP(%)

slider24:hardness=0.15<0, 15, 0.001>Hardness
slider25:focus=0.<0, 1, 0.001>Focus(BP)

slider33:n_stages=6<1, 16, 1>N Stages
slider34:out_stage=6<1, 16, 1>Out Stage
slider35:n_invert=0<0, 16, 1>N Inverting Stages
slider36:mix=0.5<0, 1, 0.0001>Mix
slider37:trim_db=0<0, 30, 0.1>Trim(dB)
slider38:dc_block=0<0, 1, 1>DC blocker
slider39:onepole=0<0, 1, 1>Single Pole

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

import _delay-line.jsfx-inc
import _lfo.jsfx-inc
import _filters.jsfx-inc
import _dynamics.jsfx-inc

@init

k.n_stages = 16;
k.n_channels = 2;

lfo.lfo_bank_init (k.n_channels, 1);
lfov.array_init (k.n_channels);

l_ap.ap_2p_cascade_init (16);
r_ap.ap_2p_cascade_init (16);

l_ap1.ap_1p_cascade_init (16);
r_ap1.ap_1p_cascade_init (16);

GS1.array_init(k.n_stages * k.n_channels);
GS2.array_init(3 * k.n_channels);

freqs_l.array_init(k.n_stages);
freqs_r.array_init(k.n_stages);
qs_l.array_init(k.n_stages);
qs_r.array_init(k.n_stages);

l_dc.tpt_1p_reset (20., srate);
r_dc.tpt_1p_reset (20., srate);


function get_coeffs_ws(
  f_ptr,
  q_ptr,
  modv,
  n_stages,
  f_center,
  f_mode,
  f_detune,
  f_width
  )
  global()
  local (i, f, modlim, mod, f_det, f_detc, q, q_det, f1, p) (

  modlim = min (f_center, 0.5);
  modlim = min (1 - f_center, modlim);

  mod = modv * modlim;

  f = f_center + mod;
  p = f_mode;
  f = ((-1+f)/(1-f_mode*f))+1;
  f *= 0.98;
  f += 0.02;
  f_det = f_detune * ((0.1 * f) / n_stages);
  q_det = abs(f_detune) * ((4 * f) / n_stages);

  q = 0.01 + 0.99 * f_width;

  i = 0;
  loop (n_stages,
   f_ptr[i] = f * 22000;
   q_ptr[i] = 0.06 + q * q * 5;
   f += f_det;
   q += q_det;
   i += 1;
  );
);

function get_zdf_sample(
  in,
  ap2*,
  ap1*,
  lshelf*,
  hshelf*,
  dc*,
  zdf*,
  k,
  h,
  dc_block,
  onepole,
  n_stages,
  n_invert
  )
  local (i, j, stages)
  global (GS1.ptr, GS2.ptr)
(
  i = 0;
  j = 0;
  (onepole == 1) ? (
    loop(n_stages,
        GS1.ptr[j]     = ap1.ap_1p_cascade_get_g (i);
        GS1.ptr[j + 1] = ap1.ap_1p_cascade_get_s (i);
        (i < n_invert) ? (
          GS1.ptr[j] = -GS1.ptr[j];
          GS1.ptr[j + 1] = -GS1.ptr[j + 1];
        );
        j += 2;
        i += 1;
    );
  ) : (
    loop(n_stages,
        GS1.ptr[j]     = ap2.ap_2p_cascade_get_g (i);
        GS1.ptr[j + 1] = ap2.ap_2p_cascade_get_s (i);
        (i < n_invert) ? (
          GS1.ptr[j] = -GS1.ptr[j];
          GS1.ptr[j + 1] = -GS1.ptr[j + 1];
        );
        j += 2;
        i += 1;
    );
  );
  (lshelf.k != 0) ? (
    GS2.ptr[0] = lshelf.lshelf_1p_get_g();
    GS2.ptr[1] = lshelf.lshelf_1p_get_s();
  ) : (
    GS2.ptr[0] = 1;
    GS2.ptr[1] = 0;
  );
  (hshelf.k != 0) ? (
    GS2.ptr[2] = hshelf.hshelf_1p_get_g();
    GS2.ptr[3] = hshelf.hshelf_1p_get_s();
  ) : (
    GS2.ptr[2] = 1;
    GS2.ptr[3] = 0;
  );
  (dc_block == 1) ? (
    GS2.ptr[4] = dc.tpt_1p_get_g_hp();
    GS2.ptr[5] = dc.tpt_1p_get_s_hp();
  );
  zdf.get_zdf_sqrt_sigmoid_before_fb_junction_pp(
    in, k * 0.995, h, GS1.ptr, GS2.ptr, n_stages, 2 + dc_block
    );
);

@slider

lfo_hz = lfo_freq * lfo_freq * lfo_freq * 10;
lfo.lfo_bank_reset_freq (0, lfo_hz, srate);

lfo_phase_diff != lfo_phase_diff_prev ? (
  lfo_phase_diff_prev = lfo_phase_diff;
  lfo.lfo_bank_reset_phase (0, 0, 0);
  lfo.lfo_bank_reset_phase (0, 1, lfo_phase_diff);
);

trim = exp(-trim_db * log(10)/20);

fb_scaled = pow (abs (feedback), 1/6);
lim_hardness = 1 / sqrt (hardness);
// the sigmoid is applying gain reduction. Compensate
g_hardness = (fb_scaled > lim_hardness) ? fb_scaled / lim_hardness : 1;
fb_scaled = (feedback < 0) ? -fb_scaled : fb_scaled;


envl.slew_limiter_init(0.0003 + env_speed * 0.05, 0.0009 + env_speed * 0.6, srate);
envr.slew_limiter_init(0.0003 + env_speed * 0.05, 0.0009 + env_speed * 0.6, srate);

envlfilt.cytomic_smooth1_init (15, 0.9, srate);
envrfilt.cytomic_smooth1_init (15, 0.9, srate);

@sample

out0 = spl0;
out1 = spl1;

efl = envl.slew_limiter_tick (out0 * out0);
efr = envl.slew_limiter_tick (out1 * out1);
efl = envlfilt.cytomic_smooth1_tick (efl);
efr = envlfilt.cytomic_smooth1_tick (efr);
efl = sqrt (efl);
efr = sqrt (efr);

lfo.lfo_bank_tick_tri (lfov.ptr, 0);

efl *= env_depth * env_depth * 24 * sign(env_depth);
efr *= env_depth * env_depth * 24 * sign(env_depth);
efl = clamp (efl, -1, 1);
efr = clamp (efr, -1, 1);

lfol = lfov.ptr[0] * lfo_depth;
lfor = lfov.ptr[1] * lfo_depth;
modl = clamp (lfol + efl, -1, 1);
modr = clamp (lfor + efr, -1, 1);

get_coeffs_ws(
  freqs_l.ptr, qs_l.ptr, modr, n_stages, f_center, f_mode, f_detune, f_width
  );
get_coeffs_ws(
  freqs_r.ptr, qs_r.ptr, modl, n_stages, f_center, f_mode, f_detune, f_width
);

l_half_stages = freqs_l.ptr[n_stages / 2];
r_half_stages = freqs_r.ptr[n_stages / 2];

q = 0.0001 + focus * 0.2;
ga = 6;
l_pre_emph.svf_bell_bp (l_half_stages, q, ga, srate);
r_pre_emph.svf_bell_bp (r_half_stages, q, ga, srate);

out0 = l_pre_emph.svf_tick (out0);
out1 = r_pre_emph.svf_tick (out1);

out0 = get_zdf_sample(
  out0,
  l_ap,
  l_ap1,
  l_lshelf,
  l_hshelf,
  l_dc,
  l_zdf,
  fb_scaled,
  hardness,
  dc_block,
  onepole,
  n_stages,
  n_invert);

out1 = get_zdf_sample(
  out1,
  r_ap,
  r_ap1,
  r_lshelf,
  r_hshelf,
  r_dc,
  r_zdf,
  fb_scaled,
  hardness,
  dc_block,
  onepole,
  n_stages,
  n_invert);

phased0 = out0;
phased1 = out1;

phased0 = out0;
phased1 = out1;

i = 0;
loop (n_stages,
 (onepole == 1) ? (
    l_ap1.ap_1p_cascade_reset_no_prewarp (i, freqs_l.ptr[i], srate);
    r_ap1.ap_1p_cascade_reset_no_prewarp (i, freqs_r.ptr[i], srate);
    phased0 = l_ap1.ap_1p_cascade_tick (i, phased0);
    phased1 = r_ap1.ap_1p_cascade_tick (i, phased1);
  ) : (
    l_ap.ap_2p_cascade_reset_no_prewarp(i, freqs_l.ptr[i], qs_l.ptr[i], srate);
    r_ap.ap_2p_cascade_reset_no_prewarp(i, freqs_r.ptr[i], qs_r.ptr[i], srate);
    phased0 = l_ap.ap_2p_cascade_tick (i, phased0);
    phased1 = r_ap.ap_2p_cascade_tick (i, phased1);
  );
  (i < n_invert) ? (
    phased0 = -phased0;
    phased1 = -phased1;
  );
  i += 1;
  (i == out_stage) ? (
    out0 = phased0;
    out1 = phased1;
  );
);

(i < out_stage) ? (
  out0 = phased0;
  out1 = phased1;
);

// modulate shelves on the feedback path
g_db = hp * -4;

//fshelf = max (freqs_l.ptr[(n_stages * 0.5) | 0] , 310);
fshelf = 3;
l_lshelf.lshelf_1p_reset_no_prewarp(fshelf, g_db, srate);
//fshelf = max (freqs_r.ptr[(n_stages * 0.5) | 0] , 110);
r_lshelf.lshelf_1p_reset_no_prewarp(fshelf, g_db, srate);

g_db = lp * -1.6;
fshelf = max (freqs_l.ptr[(n_stages * 0.5) | 0] , 1100);
l_hshelf.hshelf_1p_reset_no_prewarp(fshelf, g_db, srate);
fshelf = max (freqs_r.ptr[(n_stages * 0.5) | 0] , 1100);
r_hshelf.hshelf_1p_reset_no_prewarp(fshelf, g_db, srate);

// run the feedback to prepare the states
fbl = out0 * fb_scaled;
fbr = out1 * fb_scaled;
(hardness != 0) ? (
  fbl = fbl / sqrt (fbl * fbl * hardness + 1);
  fbr = fbr / sqrt (fbr * fbr * hardness + 1);
);
(dc_block == 1) ? (
  l_dc.tpt_1p_tick_hp (l_hshelf.hshelf_1p_tick (l_lshelf.lshelf_1p_tick (fbl)));
  r_dc.tpt_1p_tick_hp (r_hshelf.hshelf_1p_tick (r_lshelf.lshelf_1p_tick (fbr)));
) : (
// tick shelves and DC on the feedback path to update the states.
  l_hshelf.hshelf_1p_tick (l_lshelf.lshelf_1p_tick (fbl));
  r_hshelf.hshelf_1p_tick (r_lshelf.lshelf_1p_tick (fbr));
);

g_wet = mix * g_hardness;
g_dry = (1 - mix) * (1 + abs (fb_scaled));

spl0 = out0 * g_wet + spl0 * g_dry;
spl1 = out1 * g_wet + spl1 * g_dry;
spl0 *= trim;
spl1 *= trim;

spl0 = min (spl0, 6);
spl1 = min (spl1, 6);
spl0 = max (spl0, -6);
spl1 = max (spl1, -6);
