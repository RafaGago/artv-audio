#pragma once

#include "artv-common/misc/short_ints.hpp"
#include "artv-common/misc/xspan.hpp"
#include <array>

namespace artv {

template <uint os_factor>
struct linear_phase_fir_coeffs;

// -----------------------------------------------------------------------------
// Linear phase coefficients for an acceptable realtime and perceptual
// performance but with non perfect specs when measured/plotted.
//
// All the coefficients are made to result on filters that:
//
// - Are linear phase.
// - All have a latency of 32 samples at base rate.
// - (-96dB) of aliasing rejection at 18kHz 441KHz SR (worst case). More
//   aliasing upwards 18kHz (inaudible range).
// - The number of coefficients minus one is divisible by 4, so some
//   coefficients become 0. (Especially interesting for the half band filters/
//   decimators).
//

template <>
struct linear_phase_fir_coeffs<2> {
  static xspan<const float> data()
  {
    // scripts/fir-oversampling.py -s 88200 -c 22050 -t 4250 -a 96 --float
    static const std::array<float, 65> coeffs = {
      0.f,
      -1.5768439223934172e-05f,
      0.f,
      6.6889797875575697e-05f,
      0.f,
      -0.0001891994422765877f,
      0.f,
      0.00043771388083732452f,
      0.f,
      -0.00089068061946700723f,
      0.f,
      0.0016533371535721252f,
      0.f,
      -0.0028619878696746238f,
      0.f,
      0.0046904394738955489f,
      0.f,
      -0.0073635720174037526f,
      0.f,
      0.011188779810681339f,
      0.f,
      -0.01663093164729575f,
      0.f,
      0.024500352219974555f,
      0.f,
      -0.036479173564725575f,
      0.f,
      0.056928059671974562f,
      0.f,
      -0.1019330844730868f,
      0.f,
      0.31689821147403752f,
      0.50000122918061085f,
      0.31689821147403752f,
      0.f,
      -0.1019330844730868f,
      0.f,
      0.056928059671974562f,
      0.f,
      -0.036479173564725575f,
      0.f,
      0.024500352219974555f,
      0.f,
      -0.01663093164729575f,
      0.f,
      0.011188779810681339f,
      0.f,
      -0.0073635720174037526f,
      0.f,
      0.0046904394738955489f,
      0.f,
      -0.0028619878696746238f,
      0.f,
      0.0016533371535721252f,
      0.f,
      -0.00089068061946700723f,
      0.f,
      0.00043771388083732452f,
      0.f,
      -0.0001891994422765877f,
      0.f,
      6.6889797875575697e-05f,
      0.f,
      -1.5768439223934172e-05f,
      0.f,
    };
    return coeffs;
  }
  static uint latency() { return (data().size() - 1) / (2 * 2); };
};

template <>
struct linear_phase_fir_coeffs<4> {
  static xspan<const float> data()
  {
    // scripts/fir-oversampling.py -s 176400 -c 22050 -t 4250 -a 96 --float
    static const std::array<float, 129> coeffs = {
      0.f,
      -3.3757343844821705e-06f,
      -7.8842272207168862e-06f,
      -8.5289378908861047e-06f,
      0.f,
      1.7370467541127441e-05f,
      3.3444931214142466e-05f,
      3.1467757109597355e-05f,
      0.f,
      -5.2787832452548945e-05f,
      -9.4599812432758567e-05f,
      -8.3745060951582613e-05f,
      0.f,
      0.00012724662573523868f,
      0.00021885715162887502f,
      0.00018673536269290034f,
      0.f,
      -0.0002662303415107633f,
      -0.00044534073951389523f,
      -0.00037036663424960218f,
      0.f,
      0.00050443718659484358f,
      0.00082666937457134468f,
      0.0006744417242537039f,
      0.f,
      -0.00088715040524486931f,
      -0.0014309953158331936f,
      -0.0011501938176466419f,
      0.f,
      0.0014721965025929326f,
      0.0023452220002269679f,
      0.0018629794385263277f,
      0.f,
      -0.0023338695595501624f,
      -0.003681789561848533f,
      -0.0028981744213423411f,
      0.f,
      0.0035719130875168938f,
      0.005594395304266012f,
      0.0043749505859399787f,
      0.f,
      -0.0053327832530155996f,
      -0.0083154738485764056f,
      -0.006479407691523476f,
      0.f,
      0.0078620670227195436f,
      0.012250187932149725f,
      0.0095494113499173892f,
      0.f,
      -0.011646244814654401f,
      -0.01823960438466956f,
      -0.014321932235873138f,
      0.f,
      0.017869822796680222f,
      0.02846405730550132f,
      0.022845903218541578f,
      0.f,
      -0.030445091442562706f,
      -0.050966591422345817f,
      -0.043780498610159937f,
      0.f,
      0.074279410032780532f,
      0.15844925865000961f,
      0.22482978636871745f,
      0.25000085585605136f,
      0.22482978636871745f,
      0.15844925865000961f,
      0.074279410032780532f,
      0.f,
      -0.043780498610159937f,
      -0.050966591422345817f,
      -0.030445091442562706f,
      0.f,
      0.022845903218541578f,
      0.02846405730550132f,
      0.017869822796680222f,
      0.f,
      -0.014321932235873138f,
      -0.01823960438466956f,
      -0.011646244814654401f,
      0.f,
      0.0095494113499173892f,
      0.012250187932149725f,
      0.0078620670227195436f,
      0.f,
      -0.006479407691523476f,
      -0.0083154738485764056f,
      -0.0053327832530155996f,
      0.f,
      0.0043749505859399787f,
      0.005594395304266012f,
      0.0035719130875168938f,
      0.f,
      -0.0028981744213423411f,
      -0.003681789561848533f,
      -0.0023338695595501624f,
      0.f,
      0.0018629794385263277f,
      0.0023452220002269679f,
      0.0014721965025929326f,
      0.f,
      -0.0011501938176466419f,
      -0.0014309953158331936f,
      -0.00088715040524486931f,
      0.f,
      0.0006744417242537039f,
      0.00082666937457134468f,
      0.00050443718659484358f,
      0.f,
      -0.00037036663424960218f,
      -0.00044534073951389523f,
      -0.0002662303415107633f,
      0.f,
      0.00018673536269290034f,
      0.00021885715162887502f,
      0.00012724662573523868f,
      0.f,
      -8.3745060951582613e-05f,
      -9.4599812432758567e-05f,
      -5.2787832452548945e-05f,
      0.f,
      3.1467757109597355e-05f,
      3.3444931214142466e-05f,
      1.7370467541127441e-05f,
      0.f,
      -8.5289378908861047e-06f,
      -7.8842272207168862e-06f,
      -3.3757343844821705e-06f,
      0.f,
    };
    return coeffs;
  }
  static uint latency() { return (data().size() - 1) / (2 * 4); };
};

template <>
struct linear_phase_fir_coeffs<8> {
  static xspan<const float> data()
  {
    static const std::array<float, 257> coeffs = {
      0.f,
      -6.8031726386727811e-07f,
      -1.6878676095679164e-06f,
      -2.8681236907042252e-06f,
      -3.942114585049929e-06f,
      -4.5390030294820845e-06f,
      -4.264469999837213e-06f,
      -2.7976277804110216e-06f,
      0.f,
      3.9872739777004368e-06f,
      8.685235917996353e-06f,
      1.3282802232306168e-05f,
      1.672246974171738e-05f,
      1.7867527472950616e-05f,
      1.5733882445015701e-05f,
      9.7508224766215787e-06f,
      0.f,
      -1.2625221478435967e-05f,
      -2.6393922752196342e-05f,
      -3.8882575801773752e-05f,
      -4.7299917911327834e-05f,
      -4.8964842989854965e-05f,
      -4.1872540828815849e-05f,
      -2.5252055997341239e-05f,
      0.f,
      3.1123238789085307e-05f,
      6.3623328598546333e-05f,
      9.176854385362787e-05f,
      0.00010942860287076101f,
      0.0001111590129699467f,
      9.3367704431701653e-05f,
      5.5354443893147051e-05f,
      0.f,
      -6.6090461189891573e-05f,
      -0.00013311520366823918f,
      -0.00018929431422523221f,
      -0.00022267042481241659f,
      -0.00022325550396751537f,
      -0.00018518336291155924f,
      -0.0001084708982623236f,
      0.f,
      0.00012658517901636913f,
      0.00025221865565871825f,
      0.00035494019450818125f,
      0.00041333478948308227f,
      0.00041040160759096817f,
      0.00033722094550504335f,
      0.00019573250856277618f,
      0.f,
      -0.00022447959004014375f,
      -0.00044357531229684185f,
      -0.00061922850936342838f,
      -0.00071549783482409977f,
      -0.00070506141057748726f,
      -0.00057509705101659991f,
      -0.00033143014282597161f,
      0.f,
      0.00037495541821128603f,
      0.00073609843329748635f,
      0.0010210990149612366f,
      0.0011726112900427123f,
      0.0011486295699640122f,
      0.00093148994957491747f,
      0.00053381173939983566f,
      0.f,
      -0.00059746679223115812f,
      -0.0011669350683008587f,
      -0.001610741499322815f,
      -0.0018408952360873202f,
      -0.0017949042162716965f,
      -0.0014490875689594155f,
      -0.00082685322551763842f,
      0.f,
      0.00091792623944597824f,
      0.0017859569853379673f,
      0.0024561222845145714f,
      0.0027971983437428899f,
      0.0027181699404438511f,
      0.0021874758338254171f,
      0.0012444109576215179f,
      0.f,
      -0.0013738631738140093f,
      -0.0026663922857757647f,
      -0.0036584871801037364f,
      -0.0041577379522927662f,
      -0.0040325479353159705f,
      -0.0032397046467817154f,
      -0.001840259672823171f,
      0.f,
      0.0020270483159693276f,
      0.0039310344833116927f,
      0.0053908907498484461f,
      0.0061250954805103985f,
      0.0059410057863833882f,
      0.0047747068555093908f,
      0.0027141051358329279f,
      0.f,
      -0.0029971134606024174f,
      -0.0058231238470999704f,
      -0.0080041510233810516f,
      -0.0091198044472148836f,
      -0.0088752806256464315f,
      -0.0071609678884925181f,
      -0.0040891506806425369f,
      0.f,
      0.0045669702286763895f,
      0.0089349136075057827f,
      0.012378954126327148f,
      0.014232032171633808f,
      0.013993221851349665f,
      0.011422954433606861f,
      0.006610257532407543f,
      0.f,
      -0.0076270675148614794f,
      -0.015222549485070826f,
      -0.021581327168648818f,
      -0.025483302011942956f,
      -0.025849134006993083f,
      -0.021890254717465741f,
      -0.013233111432811943f,
      0.f,
      0.017166256567550567f,
      0.037139714199219034f,
      0.058408876039402369f,
      0.079224648913372706f,
      0.097782132771513278f,
      0.11241492097905215f,
      0.12177852096955781f,
      0.12500045883450503f,
      0.12177852096955781f,
      0.11241492097905215f,
      0.097782132771513278f,
      0.079224648913372706f,
      0.058408876039402369f,
      0.037139714199219034f,
      0.017166256567550567f,
      0.f,
      -0.013233111432811943f,
      -0.021890254717465741f,
      -0.025849134006993083f,
      -0.025483302011942956f,
      -0.021581327168648818f,
      -0.015222549485070826f,
      -0.0076270675148614794f,
      0.f,
      0.006610257532407543f,
      0.011422954433606861f,
      0.013993221851349665f,
      0.014232032171633808f,
      0.012378954126327148f,
      0.0089349136075057827f,
      0.0045669702286763895f,
      0.f,
      -0.0040891506806425369f,
      -0.0071609678884925181f,
      -0.0088752806256464315f,
      -0.0091198044472148836f,
      -0.0080041510233810516f,
      -0.0058231238470999704f,
      -0.0029971134606024174f,
      0.f,
      0.0027141051358329279f,
      0.0047747068555093908f,
      0.0059410057863833882f,
      0.0061250954805103985f,
      0.0053908907498484461f,
      0.0039310344833116927f,
      0.0020270483159693276f,
      0.f,
      -0.001840259672823171f,
      -0.0032397046467817154f,
      -0.0040325479353159705f,
      -0.0041577379522927662f,
      -0.0036584871801037364f,
      -0.0026663922857757647f,
      -0.0013738631738140093f,
      0.f,
      0.0012444109576215179f,
      0.0021874758338254171f,
      0.0027181699404438511f,
      0.0027971983437428899f,
      0.0024561222845145714f,
      0.0017859569853379673f,
      0.00091792623944597824f,
      0.f,
      -0.00082685322551763842f,
      -0.0014490875689594155f,
      -0.0017949042162716965f,
      -0.0018408952360873202f,
      -0.001610741499322815f,
      -0.0011669350683008587f,
      -0.00059746679223115812f,
      0.f,
      0.00053381173939983566f,
      0.00093148994957491747f,
      0.0011486295699640122f,
      0.0011726112900427123f,
      0.0010210990149612366f,
      0.00073609843329748635f,
      0.00037495541821128603f,
      0.f,
      -0.00033143014282597161f,
      -0.00057509705101659991f,
      -0.00070506141057748726f,
      -0.00071549783482409977f,
      -0.00061922850936342838f,
      -0.00044357531229684185f,
      -0.00022447959004014375f,
      0.f,
      0.00019573250856277618f,
      0.00033722094550504335f,
      0.00041040160759096817f,
      0.00041333478948308227f,
      0.00035494019450818125f,
      0.00025221865565871825f,
      0.00012658517901636913f,
      0.f,
      -0.0001084708982623236f,
      -0.00018518336291155924f,
      -0.00022325550396751537f,
      -0.00022267042481241659f,
      -0.00018929431422523221f,
      -0.00013311520366823918f,
      -6.6090461189891573e-05f,
      0.f,
      5.5354443893147051e-05f,
      9.3367704431701653e-05f,
      0.0001111590129699467f,
      0.00010942860287076101f,
      9.176854385362787e-05f,
      6.3623328598546333e-05f,
      3.1123238789085307e-05f,
      0.f,
      -2.5252055997341239e-05f,
      -4.1872540828815849e-05f,
      -4.8964842989854965e-05f,
      -4.7299917911327834e-05f,
      -3.8882575801773752e-05f,
      -2.6393922752196342e-05f,
      -1.2625221478435967e-05f,
      0.f,
      9.7508224766215787e-06f,
      1.5733882445015701e-05f,
      1.7867527472950616e-05f,
      1.672246974171738e-05f,
      1.3282802232306168e-05f,
      8.685235917996353e-06f,
      3.9872739777004368e-06f,
      0.f,
      -2.7976277804110216e-06f,
      -4.264469999837213e-06f,
      -4.5390030294820845e-06f,
      -3.942114585049929e-06f,
      -2.8681236907042252e-06f,
      -1.6878676095679164e-06f,
      -6.8031726386727811e-07f,
      0.f,
    };
    return coeffs;
  }
  static uint latency() { return (data().size() - 1) / (2 * 8); };
};

// scripts/fir-oversampling.py -s 352800 -c 22050 -t 4226 -a 96 --float

template <>
struct linear_phase_fir_coeffs<16> {
  static xspan<const float> data()
  {
    // scripts/fir-oversampling.py -s 705600 -c 22050 -t 4226 -a 96 --float
    static const std::array<float, 513> coeffs = {
      0.f,
      -1.4730805046392069e-07f,
      -3.401586530401738e-07f,
      -5.7489834423494684e-07f,
      -8.4393385714928572e-07f,
      -1.1355643240954324e-06f,
      -1.4340619343343499e-06f,
      -1.7200304620008608e-06f,
      -1.9710574148272822e-06f,
      -2.1626593300243811e-06f,
      -2.2695016555615538e-06f,
      -2.266855579683826e-06f,
      -2.1322351322218554e-06f,
      -1.8471400030303494e-06f,
      -1.3988139770006444e-06f,
      -7.8191682633796353e-07f,
      0.f,
      9.333255746083047e-07f,
      1.9936371125535862e-06f,
      3.1454598052894896e-06f,
      4.3426182284536838e-06f,
      5.5292348444005789e-06f,
      6.641401528246003e-06f,
      7.6095157440723223e-06f,
      8.3612353896657332e-06f,
      8.8249671362485063e-06f,
      8.9337642908072484e-06f,
      8.6294739497590605e-06f,
      7.8669417106444217e-06f,
      6.6180576370081211e-06f,
      4.8754115408256368e-06f,
      2.655320681296842e-06f,
      0.f,
      -3.0213351675902185e-06f,
      -6.3126111309097573e-06f,
      -9.7524144612185826e-06f,
      -1.319696219495766e-05f,
      -1.6484532236136816e-05f,
      -1.9441289107201164e-05f,
      -2.1888362769092219e-05f,
      -2.364996042312243e-05f,
      -2.4562216948059187e-05f,
      -2.4482423014039541e-05f,
      -2.3298215024936227e-05f,
      -2.0936271713484524e-05f,
      -1.7370041841988521e-05f,
      -1.2626028782104212e-05f,
      -6.7881826469669301e-06f,
      0.f,
      7.5359953029028063e-06f,
      1.556162036012703e-05f,
      2.3769364613657337e-05f,
      3.1811666273158096e-05f,
      3.9312972584228464e-05f,
      4.5884274773891408e-05f,
      5.1139662400759704e-05f,
      5.4714304830353306e-05f,
      5.6283147022677801e-05f,
      5.5579509933631343e-05f,
      5.2412719203275892e-05f,
      4.6683855112541533e-05f,
      3.8398726440261895e-05f,
      2.7677223663920056e-05f,
      1.4758303897704651e-05f,
      0.f,
      -1.6125973771629977e-05f,
      -3.3045232645372388e-05f,
      -5.0097320086740816e-05f,
      -6.6557605963958448e-05f,
      -8.1663928627093456e-05f,
      -9.4647162985386408e-05f,
      -0.00010476465145280906f,
      -0.00011133521931445729f,
      -0.00011377432288076181f,
      -0.00011162775891015849f,
      -0.0001046023066955633f,
      -9.2591687201009512e-05f,
      -7.5696311255882533e-05f,
      -5.4235452496422247e-05f,
      -2.8750718513491269e-05f,
      0.f,
      3.1058556466469691e-05f,
      6.3292593435432362e-05f,
      9.543120221955172e-05f,
      0.00012610933565432859f,
      0.00015391966020407444f,
      0.00017747010826594926f,
      0.00019544501409553109f,
      0.0002066674075650656f,
      0.00021015981750623739f,
      0.00020520081652800794f,
      0.00019137453419711803f,
      0.00016861048321464866f,
      0.00013721128660171714f,
      9.7866260353900454e-05f,
      5.1649287290416222e-05f,
      0.f,
      -5.5312045430406509e-05f,
      -0.00011223980198444941f,
      -0.00016852661721254451f,
      -0.00022178766991014391f,
      -0.00026960234307230209f,
      -0.00030961427389299801f,
      -0.00033963527871897484f,
      -0.00035774893961004587f,
      -0.0003624093856499323f,
      -0.0003525307271629543f,
      -0.0003275627186761668f,
      -0.0002875485433504253f,
      -0.00023316112585578116f,
      -0.00016571508169545577f,
      -8.7152279401283992e-05f,
      0.f,
      9.2698209849888835e-05f,
      0.00018747772073846492f,
      0.00028057158047952699f,
      0.00036804923948586344f,
      0.00044597056475086599f,
      0.00051054953915975244f,
      0.0005583213027712115f,
      0.00058630568140108992f,
      0.00059216010013088112f,
      0.0005743148206177178f,
      0.00053208378559028177f,
      0.00046574500368651219f,
      0.00037658535181488964f,
      0.00026690588626118511f,
      0.00013998520069677565f,
      0.f,
      -0.00014809618615653944f,
      -0.0002987334146517155f,
      -0.00044592033617795151f,
      -0.00058346757035406091f,
      -0.00070523169322989218f,
      -0.00080537079963393233f,
      -0.00087860163302370443f,
      -0.00092044767515660035f,
      -0.00092746740138834884f,
      -0.00089745216382193797f,
      -0.00082958387568846559f,
      -0.00072454382943699274f,
      -0.00058456556199446648f,
      -0.00041342663841156574f,
      -0.0002163764964381957f,
      0.f,
      0.00022798100409572713f,
      0.0004589631482012346f,
      0.00068376643570077964f,
      0.00089297854807748954f,
      0.0010773264219688667f,
      0.0012280612184573663f,
      0.0013373415634370151f,
      0.0013985992586532557f,
      0.0014068716029804081f,
      0.0013590850545519158f,
      0.001254276212812918f,
      0.0010937379847781546f,
      0.00088108127379314324f,
      0.00062220551741804485f,
      0.00032517480456484841f,
      0.f,
      -0.00034166884149654746f,
      -0.00068693162953048688f,
      -0.0010220971122650536f,
      -0.0013331962256114944f,
      -0.0016065317405179027f,
      -0.0018292437035547747f,
      -0.0019898685643068787f,
      -0.0020788691051383187f,
      -0.0020891124028864184f,
      -0.002016274092765957f,
      -0.0018591491708468636f,
      -0.0016198524239012259f,
      -0.0013038952376120078f,
      -0.00092012989350480768f,
      -0.00048055737601398427f,
      0.f,
      0.00050435436047110939f,
      0.0010135242208729189f,
      0.0015074052001332317f,
      0.0019655173636144094f,
      0.0023678030109900885f,
      0.0026954455421741648f,
      0.0029316778799811159f,
      0.00306254793028351f,
      0.0030776088065648287f,
      0.0029705030775087054f,
      0.0027394131058822565f,
      0.0023873535758878114f,
      0.0019222874453972074f,
      0.0013570526521203457f,
      0.00070909374836445672f,
      0.f,
      -0.00074514090522267594f,
      -0.0014985568232852953f,
      -0.0022307488388241406f,
      -0.0029115621042097631f,
      -0.0035113335645619308f,
      -0.0040020757600156831f,
      -0.0043586527380967332f,
      -0.0045599025065452409f,
      -0.0045896605305507151f,
      -0.0044376405881747742f,
      -0.0041001328393435801f,
      -0.0035804841664120418f,
      -0.0028893325713808139f,
      -0.0020445754671853146f,
      -0.0010710608218938789f,
      0.f,
      0.0011318885497209863f,
      0.0022834852560263763f,
      0.0034105955142268718f,
      0.0044674570809545367f,
      0.0054083817430360557f,
      0.0061894774472150147f,
      0.0067703920212233738f,
      0.0071160165273592511f,
      0.0071980853429885316f,
      0.0069966113598081969f,
      0.0065010982569694963f,
      0.0057114775711954143f,
      0.004638726116216311f,
      0.0033051289712840151f,
      0.0017441644683426451f,
      0.f,
      -0.0018733993658817129f,
      -0.0038135339940570524f,
      -0.0057509757068657163f,
      -0.0076112752148081103f,
      -0.0093171178293516635f,
      -0.010790664253875301f,
      -0.011956005090574449f,
      -0.012741651796579372f,
      -0.013082983428655357f,
      -0.012924567805454208f,
      -0.01222227777008165f,
      -0.010945128037868101f,
      -0.0090767655512349471f,
      -0.0066165561269572555f,
      -0.0035802221734630552f,
      0.f,
      0.0040756997087608845f,
      0.0085831288163506127f,
      0.013444520477917919f,
      0.018569858251852315f,
      0.023859049069442674f,
      0.029204439831810088f,
      0.034493605503257099f,
      0.039612326914595174f,
      0.04444766942898596f,
      0.048891069419402987f,
      0.052841334327102037f,
      0.056207463977148042f,
      0.058911205776445569f,
      0.060889264262902316f,
      0.062095095961792038f,
      0.062500233295335078f,
      0.062095095961792038f,
      0.060889264262902316f,
      0.058911205776445569f,
      0.056207463977148042f,
      0.052841334327102037f,
      0.048891069419402987f,
      0.04444766942898596f,
      0.039612326914595174f,
      0.034493605503257099f,
      0.029204439831810088f,
      0.023859049069442674f,
      0.018569858251852315f,
      0.013444520477917919f,
      0.0085831288163506127f,
      0.0040756997087608845f,
      0.f,
      -0.0035802221734630552f,
      -0.0066165561269572555f,
      -0.0090767655512349471f,
      -0.010945128037868101f,
      -0.01222227777008165f,
      -0.012924567805454208f,
      -0.013082983428655357f,
      -0.012741651796579372f,
      -0.011956005090574449f,
      -0.010790664253875301f,
      -0.0093171178293516635f,
      -0.0076112752148081103f,
      -0.0057509757068657163f,
      -0.0038135339940570524f,
      -0.0018733993658817129f,
      0.f,
      0.0017441644683426451f,
      0.0033051289712840151f,
      0.004638726116216311f,
      0.0057114775711954143f,
      0.0065010982569694963f,
      0.0069966113598081969f,
      0.0071980853429885316f,
      0.0071160165273592511f,
      0.0067703920212233738f,
      0.0061894774472150147f,
      0.0054083817430360557f,
      0.0044674570809545367f,
      0.0034105955142268718f,
      0.0022834852560263763f,
      0.0011318885497209863f,
      0.f,
      -0.0010710608218938789f,
      -0.0020445754671853146f,
      -0.0028893325713808139f,
      -0.0035804841664120418f,
      -0.0041001328393435801f,
      -0.0044376405881747742f,
      -0.0045896605305507151f,
      -0.0045599025065452409f,
      -0.0043586527380967332f,
      -0.0040020757600156831f,
      -0.0035113335645619308f,
      -0.0029115621042097631f,
      -0.0022307488388241406f,
      -0.0014985568232852953f,
      -0.00074514090522267594f,
      0.f,
      0.00070909374836445672f,
      0.0013570526521203457f,
      0.0019222874453972074f,
      0.0023873535758878114f,
      0.0027394131058822565f,
      0.0029705030775087054f,
      0.0030776088065648287f,
      0.00306254793028351f,
      0.0029316778799811159f,
      0.0026954455421741648f,
      0.0023678030109900885f,
      0.0019655173636144094f,
      0.0015074052001332317f,
      0.0010135242208729189f,
      0.00050435436047110939f,
      0.f,
      -0.00048055737601398427f,
      -0.00092012989350480768f,
      -0.0013038952376120078f,
      -0.0016198524239012259f,
      -0.0018591491708468636f,
      -0.002016274092765957f,
      -0.0020891124028864184f,
      -0.0020788691051383187f,
      -0.0019898685643068787f,
      -0.0018292437035547747f,
      -0.0016065317405179027f,
      -0.0013331962256114944f,
      -0.0010220971122650536f,
      -0.00068693162953048688f,
      -0.00034166884149654746f,
      0.f,
      0.00032517480456484841f,
      0.00062220551741804485f,
      0.00088108127379314324f,
      0.0010937379847781546f,
      0.001254276212812918f,
      0.0013590850545519158f,
      0.0014068716029804081f,
      0.0013985992586532557f,
      0.0013373415634370151f,
      0.0012280612184573663f,
      0.0010773264219688667f,
      0.00089297854807748954f,
      0.00068376643570077964f,
      0.0004589631482012346f,
      0.00022798100409572713f,
      0.f,
      -0.0002163764964381957f,
      -0.00041342663841156574f,
      -0.00058456556199446648f,
      -0.00072454382943699274f,
      -0.00082958387568846559f,
      -0.00089745216382193797f,
      -0.00092746740138834884f,
      -0.00092044767515660035f,
      -0.00087860163302370443f,
      -0.00080537079963393233f,
      -0.00070523169322989218f,
      -0.00058346757035406091f,
      -0.00044592033617795151f,
      -0.0002987334146517155f,
      -0.00014809618615653944f,
      0.f,
      0.00013998520069677565f,
      0.00026690588626118511f,
      0.00037658535181488964f,
      0.00046574500368651219f,
      0.00053208378559028177f,
      0.0005743148206177178f,
      0.00059216010013088112f,
      0.00058630568140108992f,
      0.0005583213027712115f,
      0.00051054953915975244f,
      0.00044597056475086599f,
      0.00036804923948586344f,
      0.00028057158047952699f,
      0.00018747772073846492f,
      9.2698209849888835e-05f,
      0.f,
      -8.7152279401283992e-05f,
      -0.00016571508169545577f,
      -0.00023316112585578116f,
      -0.0002875485433504253f,
      -0.0003275627186761668f,
      -0.0003525307271629543f,
      -0.0003624093856499323f,
      -0.00035774893961004587f,
      -0.00033963527871897484f,
      -0.00030961427389299801f,
      -0.00026960234307230209f,
      -0.00022178766991014391f,
      -0.00016852661721254451f,
      -0.00011223980198444941f,
      -5.5312045430406509e-05f,
      0.f,
      5.1649287290416222e-05f,
      9.7866260353900454e-05f,
      0.00013721128660171714f,
      0.00016861048321464866f,
      0.00019137453419711803f,
      0.00020520081652800794f,
      0.00021015981750623739f,
      0.0002066674075650656f,
      0.00019544501409553109f,
      0.00017747010826594926f,
      0.00015391966020407444f,
      0.00012610933565432859f,
      9.543120221955172e-05f,
      6.3292593435432362e-05f,
      3.1058556466469691e-05f,
      0.f,
      -2.8750718513491269e-05f,
      -5.4235452496422247e-05f,
      -7.5696311255882533e-05f,
      -9.2591687201009512e-05f,
      -0.0001046023066955633f,
      -0.00011162775891015849f,
      -0.00011377432288076181f,
      -0.00011133521931445729f,
      -0.00010476465145280906f,
      -9.4647162985386408e-05f,
      -8.1663928627093456e-05f,
      -6.6557605963958448e-05f,
      -5.0097320086740816e-05f,
      -3.3045232645372388e-05f,
      -1.6125973771629977e-05f,
      0.f,
      1.4758303897704651e-05f,
      2.7677223663920056e-05f,
      3.8398726440261895e-05f,
      4.6683855112541533e-05f,
      5.2412719203275892e-05f,
      5.5579509933631343e-05f,
      5.6283147022677801e-05f,
      5.4714304830353306e-05f,
      5.1139662400759704e-05f,
      4.5884274773891408e-05f,
      3.9312972584228464e-05f,
      3.1811666273158096e-05f,
      2.3769364613657337e-05f,
      1.556162036012703e-05f,
      7.5359953029028063e-06f,
      0.f,
      -6.7881826469669301e-06f,
      -1.2626028782104212e-05f,
      -1.7370041841988521e-05f,
      -2.0936271713484524e-05f,
      -2.3298215024936227e-05f,
      -2.4482423014039541e-05f,
      -2.4562216948059187e-05f,
      -2.364996042312243e-05f,
      -2.1888362769092219e-05f,
      -1.9441289107201164e-05f,
      -1.6484532236136816e-05f,
      -1.319696219495766e-05f,
      -9.7524144612185826e-06f,
      -6.3126111309097573e-06f,
      -3.0213351675902185e-06f,
      0.f,
      2.655320681296842e-06f,
      4.8754115408256368e-06f,
      6.6180576370081211e-06f,
      7.8669417106444217e-06f,
      8.6294739497590605e-06f,
      8.9337642908072484e-06f,
      8.8249671362485063e-06f,
      8.3612353896657332e-06f,
      7.6095157440723223e-06f,
      6.641401528246003e-06f,
      5.5292348444005789e-06f,
      4.3426182284536838e-06f,
      3.1454598052894896e-06f,
      1.9936371125535862e-06f,
      9.333255746083047e-07f,
      0.f,
      -7.8191682633796353e-07f,
      -1.3988139770006444e-06f,
      -1.8471400030303494e-06f,
      -2.1322351322218554e-06f,
      -2.266855579683826e-06f,
      -2.2695016555615538e-06f,
      -2.1626593300243811e-06f,
      -1.9710574148272822e-06f,
      -1.7200304620008608e-06f,
      -1.4340619343343499e-06f,
      -1.1355643240954324e-06f,
      -8.4393385714928572e-07f,
      -5.7489834423494684e-07f,
      -3.401586530401738e-07f,
      -1.4730805046392069e-07f,
      0.f,
    };
    return coeffs;
  }
  static uint latency() { return (data().size() - 1) / (2 * 16); };
};

// -----------------------------------------------------------------------------
// Minimum phase low latency oversampling.
//
// Optimized for low latency at the expense of CPU and phase performace.
//
// It goes up to 4x by using 2 path polyphase IIR halfband filters. Once the
// transition width requirements are relaxed(*) it uses FIR filters with a low
// number of coefficients (latency).
//
// (*) Cascading half-band filters results in decreasing transition width
// requirements. Quoting from the HIIR lib (Soras).
//
// "For example, let’s suppose one wants 16x downsampling, with 96 dB of
//  stopband attenuation and a 0.49*Fs passband. You’ll need the following
//  specifications for the TBW of each stage:
//
//   2x <-> 1x: TBW = (0.50-0.49)                      = 0.01
//   4x <-> 2x: TBW = (0.50-0.49)/2 + 1/4              = 0.255
//   8x <-> 4x: TBW = (0.50-0.49)/4 + 1/8  + 1/4       = 0.3775
//  16x <-> 8x: TBW = (0.50-0.49)/8 + 1/16 + 1/8 + 1/4 = 0.43865"

template <uint os_factor>
struct min_phase_coeffs;

template <>
struct min_phase_coeffs<2> {
  static xspan<const xspan<const float>> iir()
  {
    // filter from the IIR docs (oversampling.txt):
    //
    // 2x, 118 dB
    // ¯¯¯¯¯¯¯¯¯¯
    //
    // Total GD : 4.0 spl
    // Bandwidth: 19052 Hz
    //
    // Coefficients: 8
    // Attenuation : 118.478 dB
    // Trans BW:     0.0679698
    // Group delay:  4 spl
    // GD rel freq:  0.0113379
    // Coefficient list:
    //         ...
    static const std::array<float, 8> x2 = {
      0.029771566661791642f,
      0.11293802507590323f,
      0.23389457050522444f,
      0.37412196640361606f,
      0.51845353417401152f,
      0.65849242953158127f,
      0.79323734846738669f,
      0.92851085864352823f};
    static const std::array<xspan<const float>, 1> range = {x2};
    return range;
  };

  static xspan<const float> fir() { return {}; }

  static uint latency() { return 4; };
};

template <>
struct min_phase_coeffs<4> {
  static xspan<const xspan<const float>> iir()
  {
    // filter from the IIR docs (oversampling.txt):
    //
    // 4x, 103 dB
    // ¯¯¯¯¯¯¯¯¯¯
    //
    // Total GD : 5.0 spl
    // Bandwidth: 20041 Hz
    //
    // Coefficients: 4
    // Attenuation : 105.433 dB
    // Trans BW:     0.216404
    // Group delay:  2.65 spl
    // GD rel freq:  0.00566893
    // Coefficient list:
    //   ...
    //
    // Coefficients: 8
    // Attenuation : 103.419 dB
    // Trans BW:     0.0455352
    // Group delay:  3.675 spl
    // GD rel freq:  0.0113379
    // Coefficient list:
    //         ...

    static const std::array<float, 4> x4 = {
      0.046884154411851092,
      0.18507704297612981,
      0.41449099059428018,
      0.75938167397962619};

    static const std::array<float, 8> x2 = {
      0.03780557945623593,
      0.14087155204706456,
      0.28399647240907816,
      0.43963962549399588,
      0.58794744313411706,
      0.72007394134794878,
      0.8366526760248606,
      0.94507809950113342};

    static const std::array<xspan<const float>, 2> range = {x2, x4};
    return range;
  };

  static xspan<const float> fir() { return {}; }

  static uint latency() { return 5; };
};

template <>
struct min_phase_coeffs<8> {
  static xspan<const xspan<const float>> iir()
  {
    return min_phase_coeffs<4>::iir();
  }

  static xspan<const float> fir()
  {
    // scripts/fir-oversampling.py -s 352800 -c 88200 -t 66850 -a 95 --float
    static const std::array<float, 34> coeffs = {
      0.f,
      -0.00049213485052400829f,
      0.f,
      0.00898310420722679f,
      0.f,
      -0.055116636092137232f,
      0.f,
      0.29662801941721662f,
      0.49999529463643572f,
      0.29662801941721662f,
      0.f,
      -0.055116636092137232f,
      0.f,
      0.00898310420722679f,
      0.f,
      -0.00049213485052400829f,
      0.f};
    return coeffs;
  }

  static uint latency()
  {
    return ((fir().size() - 1) / 2 * 8) + min_phase_coeffs<4>::latency();
  };
};

template <>
struct min_phase_coeffs<16> {
  static xspan<const xspan<const float>> iir()
  {
    return min_phase_coeffs<4>::iir();
  }

  static xspan<const float> fir()
  {
    // scripts/fir-oversampling.py -s 705600 -c 88200 -t 66850 -a 95 --float
    static const std::array<float, 33> coeffs = {
      0.f,
      -5.3320211196815005e-05f,
      -0.00024606732601848108f,
      -0.00043447861139870572f,
      0.f,
      0.0017864204765752306f,
      0.0044915502920877355f,
      0.0053135775351163921f,
      0.f,
      -0.013024889643956981f,
      -0.027558306931291559f,
      -0.028708215581807511f,
      0.f,
      0.063967601354860085f,
      0.14831394989083752f,
      0.22115340551141113f,
      0.24999754648956388f,
      0.22115340551141113f,
      0.14831394989083752f,
      0.063967601354860085f,
      0.f,
      -0.028708215581807511f,
      -0.027558306931291559f,
      -0.013024889643956981f,
      0.f,
      0.0053135775351163921f,
      0.0044915502920877355f,
      0.0017864204765752306f,
      0.f,
      -0.00043447861139870572f,
      -0.00024606732601848108f,
      -5.3320211196815005e-05f,
      0.f,
    };
    return coeffs;
  }

  static uint latency()
  {
    return ((fir().size() - 1) / 2 * 16) + min_phase_coeffs<4>::latency();
  };
};

} // namespace artv
