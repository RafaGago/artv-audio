#pragma once
// Generated by jsfx2cpp.py. To be manually corrected.
// includes for environment function calls
#include <algorithm>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <vector>

#include "artv-common/dsp/own/classes/plugin_context.hpp"
#include "artv-common/dsp/types.hpp"
#include "artv-common/juce/parameter_definitions.hpp"
#include "artv-common/juce/parameter_types.hpp"
#include "artv-common/misc/misc.hpp"
#include "artv-common/misc/mp11.hpp"
#include "artv-common/misc/range.hpp"
#include "artv-common/misc/short_ints.hpp"

namespace artv { namespace smashed_transistors {

class ze_little_scanner_chorus {
public:
  //----------------------------------------------------------------------------
  static constexpr dsp_types dsp_type  = dsp_types::modulation;
  static constexpr bus_types bus_type  = bus_types::stereo;
  static constexpr uint      n_inputs  = 1;
  static constexpr uint      n_outputs = 1;

private:
  //----------------------------------------------------------------------------
  // definitions for environment function calls
  static double eel2_eq (double lhs, double rhs)
  {
    return (double) (std::fabs (lhs - rhs) < 0.00001);
  }
  static double eel2_or (double lhs, double rhs)
  {
    return (double) ((uint64_t) lhs | (uint64_t) rhs);
  }
  std::vector<float> heapmem;
  inline float&      heap (std::size_t value) { return heapmem[value]; }
  void               heap_reset (std::size_t s)
  {
    heapmem.resize (s);
    std::memset (heapmem.data(), 0, heapmem.size() * sizeof heapmem[0]);
  }
  void jsfx_memset (size_t idx, int val, size_t size)
  {
    std::memset (&heapmem[idx], val, size * sizeof heapmem[0]);
  }

  //----------------------------------------------------------------------------
  // stubs for JSFX special variables
  double jsfx_specialvar_get_srate() { return _plugcontext->get_sample_rate(); }

  //----------------------------------------------------------------------------
public:
#if 0
  void set_sl_lfoa_slider (float v)
  {
    // Original slider line: slider1:sl_lfoA=7<0.2500,20,0.0001>LFO A Rate
    // Range: min:0.25, max:20.0, default: 7.0, step: 0.0001
    if (v == sl_lfoa) {
      return;
    }
    sl_lfoa = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_lfoa_tag {};

  void set (sl_lfoa_tag, float v)
  {
    // Original slider line: slider1:sl_lfoA=7<0.2500,20,0.0001>LFO A Rate
    // Range: min:0.25, max:20.0, default: 7.0, step: 0.0001
    if (v == sl_lfoa) {
      return;
    }
    sl_lfoa = v;
    slider();
  }

  static constexpr auto get_parameter (sl_lfoa_tag)
  {
    // Original slider line: slider1:sl_lfoA=7<0.2500,20,0.0001>LFO A Rate
    return float_param ("", 0.25, 20.0, 7.0, 0.0001);
  }

#endif
#if 0
  void set_sl_lfob_slider (float v)
  {
    // Original slider line: slider2:sl_lfoB=3.25<0.0625,10,0.0001>LFO B Rate
    // Range: min:0.0625, max:10.0, default: 3.25, step: 0.0001
    if (v == sl_lfob) {
      return;
    }
    sl_lfob = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_lfob_tag {};

  void set (sl_lfob_tag, float v)
  {
    // Original slider line: slider2:sl_lfoB=3.25<0.0625,10,0.0001>LFO B Rate
    // Range: min:0.0625, max:10.0, default: 3.25, step: 0.0001
    if (v == sl_lfob) {
      return;
    }
    sl_lfob = v;
    slider();
  }

  static constexpr auto get_parameter (sl_lfob_tag)
  {
    // Original slider line: slider2:sl_lfoB=3.25<0.0625,10,0.0001>LFO B Rate
    return float_param ("", 0.0625, 10.0, 3.25, 0.0001);
  }

#endif
#if 0
  void set_sl_lfom_slider (float v)
  {
    // Original slider line: slider3:sl_lfoM=0.2<0,1,0.0001>LFO A B Mix
    // Range: min:0.0, max:1.0, default: 0.2, step: 0.0001
    if (v == sl_lfom) {
      return;
    }
    sl_lfom = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_lfom_tag {};

  void set (sl_lfom_tag, float v)
  {
    // Original slider line: slider3:sl_lfoM=0.2<0,1,0.0001>LFO A B Mix
    // Range: min:0.0, max:1.0, default: 0.2, step: 0.0001
    if (v == sl_lfom) {
      return;
    }
    sl_lfom = v;
    slider();
  }

  static constexpr auto get_parameter (sl_lfom_tag)
  {
    // Original slider line: slider3:sl_lfoM=0.2<0,1,0.0001>LFO A B Mix
    return float_param ("", 0.0, 1.0, 0.2, 0.0001);
  }

#endif
#if 0
  void set_sl_depth_slider (float v)
  {
    // Original slider line: slider4:sl_depth=8<1,17,0.0001>Modulation depth
    // Range: min:1.0, max:17.0, default: 8.0, step: 0.0001
    if (v == sl_depth) {
      return;
    }
    sl_depth = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_depth_tag {};

  void set (sl_depth_tag, float v)
  {
    // Original slider line: slider4:sl_depth=8<1,17,0.0001>Modulation depth
    // Range: min:1.0, max:17.0, default: 8.0, step: 0.0001
    if (v == sl_depth) {
      return;
    }
    sl_depth = v;
    slider();
  }

  static constexpr auto get_parameter (sl_depth_tag)
  {
    // Original slider line: slider4:sl_depth=8<1,17,0.0001>Modulation depth
    return float_param ("", 1.0, 17.0, 8.0, 0.0001);
  }

#endif
#if 0
  void set_sl_f1_slider (float v)
  {
    // Original slider line: slider6:sl_F1=2500<200,5000,0.0001>F1
    // Range: min:200.0, max:5000.0, default: 2500.0, step: 0.0001
    if (v == sl_f1) {
      return;
    }
    sl_f1 = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_f1_tag {};

  void set (sl_f1_tag, float v)
  {
    // Original slider line: slider6:sl_F1=2500<200,5000,0.0001>F1
    // Range: min:200.0, max:5000.0, default: 2500.0, step: 0.0001
    if (v == sl_f1) {
      return;
    }
    sl_f1 = v;
    slider();
  }

  static constexpr auto get_parameter (sl_f1_tag)
  {
    // Original slider line: slider6:sl_F1=2500<200,5000,0.0001>F1
    return float_param ("", 200.0, 5000.0, 2500.0, 0.0001);
  }

#endif
#if 0
  void set_sl_f0_slider (float v)
  {
    // Original slider line: slider7:sl_F0=1000<200,5000,0.0001>F0
    // Range: min:200.0, max:5000.0, default: 1000.0, step: 0.0001
    if (v == sl_f0) {
      return;
    }
    sl_f0 = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_f0_tag {};

  void set (sl_f0_tag, float v)
  {
    // Original slider line: slider7:sl_F0=1000<200,5000,0.0001>F0
    // Range: min:200.0, max:5000.0, default: 1000.0, step: 0.0001
    if (v == sl_f0) {
      return;
    }
    sl_f0 = v;
    slider();
  }

  static constexpr auto get_parameter (sl_f0_tag)
  {
    // Original slider line: slider7:sl_F0=1000<200,5000,0.0001>F0
    return float_param ("", 200.0, 5000.0, 1000.0, 0.0001);
  }

#endif
#if 0
  void set_sl_r_slider (float v)
  {
    // Original slider line: slider8:sl_R=0.7<0.3,0.99,0.0001>R
    // Range: min:0.3, max:0.99, default: 0.7, step: 0.0001
    if (v == sl_r) {
      return;
    }
    sl_r = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_r_tag {};

  void set (sl_r_tag, float v)
  {
    // Original slider line: slider8:sl_R=0.7<0.3,0.99,0.0001>R
    // Range: min:0.3, max:0.99, default: 0.7, step: 0.0001
    if (v == sl_r) {
      return;
    }
    sl_r = v;
    slider();
  }

  static constexpr auto get_parameter (sl_r_tag)
  {
    // Original slider line: slider8:sl_R=0.7<0.3,0.99,0.0001>R
    return float_param ("", 0.3, 0.99, 0.7, 0.0001);
  }

#endif
#if 0
  void set_sl_lfof_slider (float v)
  {
    // Original slider line: slider9:sl_lfoF=0.125<0.0,20,0.0001>LFO F Rate
    // Range: min:0.0, max:20.0, default: 0.125, step: 0.0001
    if (v == sl_lfof) {
      return;
    }
    sl_lfof = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_lfof_tag {};

  void set (sl_lfof_tag, float v)
  {
    // Original slider line: slider9:sl_lfoF=0.125<0.0,20,0.0001>LFO F Rate
    // Range: min:0.0, max:20.0, default: 0.125, step: 0.0001
    if (v == sl_lfof) {
      return;
    }
    sl_lfof = v;
    slider();
  }

  static constexpr auto get_parameter (sl_lfof_tag)
  {
    // Original slider line: slider9:sl_lfoF=0.125<0.0,20,0.0001>LFO F Rate
    return float_param ("", 0.0, 20.0, 0.125, 0.0001);
  }

#endif
#if 0
  void set_sl_fb_slider (float v)
  {
    // Original slider line: slider11:sl_fb=0<0,0.5>Feedback
    // Range: min:0.0, max:0.5, default: 0.0, step: None
    if (v == sl_fb) {
      return;
    }
    sl_fb = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_fb_tag {};

  void set (sl_fb_tag, float v)
  {
    // Original slider line: slider11:sl_fb=0<0,0.5>Feedback
    // Range: min:0.0, max:0.5, default: 0.0, step: None
    if (v == sl_fb) {
      return;
    }
    sl_fb = v;
    slider();
  }

  static constexpr auto get_parameter (sl_fb_tag)
  {
    // Original slider line: slider11:sl_fb=0<0,0.5>Feedback
    return float_param ("", 0.0, 0.5, 0.0, 0.001);
  }

#endif
#if 0
  void set_sl_fbtype_slider (float v)
  {
    // Original slider line:
    // slider12:sl_fbType=0<0,4,1{Short,Medium,Long,Delay,Long Delay}>Fb Type
    // Range: min:0.0, max:4.0, default: 0.0, step: 1.0
    if (v == sl_fbtype) {
      return;
    }
    sl_fbtype = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_fbtype_tag {};

  void set (sl_fbtype_tag, int v)
  {
    // Original slider line:
    // slider12:sl_fbType=0<0,4,1{Short,Medium,Long,Delay,Long Delay}>Fb Type
    // Range: min:0.0, max:4.0, default: 0.0, step: 1.0
    if (v == (int) sl_fbtype) {
      return;
    }
    sl_fbtype = (double) v;
    slider();
  }

  static constexpr auto get_parameter (sl_fbtype_tag)
  {
    // Original slider line:
    // slider12:sl_fbType=0<0,4,1{Short,Medium,Long,Delay,Long Delay}>Fb Type
    return choice_param (
      0, make_cstr_array ("Short", "Medium", "Long", "Delay", "Long Delay"));
  }

#endif
#if 0
  void set_sl_fblp_slider (float v)
  {
    // Original slider line: slider13:sl_fbLp=1<0,1>Feedback LP
    // Range: min:0.0, max:1.0, default: 1.0, step: None
    if (v == sl_fblp) {
      return;
    }
    sl_fblp = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_fblp_tag {};

  void set (sl_fblp_tag, float v)
  {
    // Original slider line: slider13:sl_fbLp=1<0,1>Feedback LP
    // Range: min:0.0, max:1.0, default: 1.0, step: None
    if (v == sl_fblp) {
      return;
    }
    sl_fblp = v;
    slider();
  }

  static constexpr auto get_parameter (sl_fblp_tag)
  {
    // Original slider line: slider13:sl_fbLp=1<0,1>Feedback LP
    return float_param ("", 0.0, 1.0, 1.0, 0.01);
  }

#endif
#if 0
  void set_sl_type_slider (float v)
  {
    // Original slider line: slider15:sl_type=1<0,3,1{Vibrato,Chorus,Double
    // chorus,Triple chorus}>Type Range: min:0.0, max:3.0, default: 1.0,
    // step: 1.0
    if (v == sl_type) {
      return;
    }
    sl_type = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_type_tag {};

  void set (sl_type_tag, float v)
  {
    // Original slider line: slider15:sl_type=1<0,3,1{Vibrato,Chorus,Double
    // chorus,Triple chorus}>Type Range: min:0.0, max:3.0, default: 1.0,
    // step: 1.0
    if (v == sl_type) {
      return;
    }
    sl_type = v;
    slider();
  }

  static constexpr auto get_parameter (sl_type_tag)
  {
    // Original slider line: slider15:sl_type=1<0,3,1{Vibrato,Chorus,Double
    // chorus,Triple chorus}>Type
    return choice_param (
      1,
      make_cstr_array ("Vibrato", "Chorus", "Double Chorus", "Triple Chorus"));
  }

#endif
#if 0
  void set_sl_selfpm_slider (float v)
  {
    // Original slider line: slider17:sl_selfPM=0<0,1>Self PM (dist)
    // Range: min:0.0, max:1.0, default: 0.0, step: None
    if (v == sl_selfpm) {
      return;
    }
    sl_selfpm = v;
    slider();
  }
#else
  // Snippet for parameter boilerplate in the authors framework....
  struct sl_selfpm_tag {};

  void set (sl_selfpm_tag, float v)
  {
    // Original slider line: slider17:sl_selfPM=0<0,1>Self PM (dist)
    // Range: min:0.0, max:1.0, default: 0.0, step: None
    if (v == sl_selfpm) {
      return;
    }
    sl_selfpm = v;
    slider();
  }

  static constexpr auto get_parameter (sl_selfpm_tag)
  {
    // Original slider line: slider17:sl_selfPM=0<0,1>Self PM (dist)
    return float_param ("", 0.0, 1.0, 0.0, 0.001);
  }

#endif
#if 0
#else
  // Snippet for parameter boilerplate in the authors framework....
  using parameters = mp_list<
    sl_lfoa_tag,
    sl_lfob_tag,
    sl_lfom_tag,
    sl_depth_tag,
    sl_f1_tag,
    sl_f0_tag,
    sl_r_tag,
    sl_lfof_tag,
    sl_fb_tag,
    sl_fbtype_tag,
    sl_fblp_tag,
    sl_type_tag,
    sl_selfpm_tag>;
#endif
  //----------------------------------------------------------------------------
private:
  // global/stateful variables for section "init"
  double _srate;
  double ad;
  double dccoef;
  double fcoef;
  double lfocoef1;
  double lfocoef2;
  double lfocoef3;
  double scl$vrb1$dcy;
  double scl$vrb1$g;
  double scl$vrb1$len;
  double scl$vrb1$r;
  double scl$vrb1$t;
  double scl$vrb1$w;
  double scl$vrb1$y;
  double scl$vrb2$dcy;
  double scl$vrb2$g;
  double scl$vrb2$len;
  double scl$vrb2$r;
  double scl$vrb2$t;
  double scl$vrb2$w;
  double scl$vrb2$y;
  double scl$vrb3$dcy;
  double scl$vrb3$g;
  double scl$vrb3$len;
  double scl$vrb3$r;
  double scl$vrb3$t;
  double scl$vrb3$w;
  double scl$vrb3$y;
  double scl$vrb4$dcy;
  double scl$vrb4$g;
  double scl$vrb4$len;
  double scl$vrb4$r;
  double scl$vrb4$t;
  double scl$vrb4$w;
  double scl$vrb4$y;
  double scl$vrb5$dcy;
  double scl$vrb5$g;
  double scl$vrb5$len;
  double scl$vrb5$r;
  double scl$vrb5$t;
  double scl$vrb5$w;
  double scl$vrb5$y;
  double scl$y;
  double scr$vrb1$dcy;
  double scr$vrb1$g;
  double scr$vrb1$len;
  double scr$vrb1$r;
  double scr$vrb1$t;
  double scr$vrb1$w;
  double scr$vrb1$y;
  double scr$vrb2$dcy;
  double scr$vrb2$g;
  double scr$vrb2$len;
  double scr$vrb2$r;
  double scr$vrb2$t;
  double scr$vrb2$w;
  double scr$vrb2$y;
  double scr$vrb3$dcy;
  double scr$vrb3$g;
  double scr$vrb3$len;
  double scr$vrb3$r;
  double scr$vrb3$t;
  double scr$vrb3$w;
  double scr$vrb3$y;
  double scr$vrb4$dcy;
  double scr$vrb4$g;
  double scr$vrb4$len;
  double scr$vrb4$r;
  double scr$vrb4$t;
  double scr$vrb4$w;
  double scr$vrb4$y;
  double scr$vrb5$dcy;
  double scr$vrb5$g;
  double scr$vrb5$len;
  double scr$vrb5$r;
  double scr$vrb5$t;
  double scr$vrb5$w;
  double scr$vrb5$y;
  double scr$y;
  double sl_depth;
  double sl_f0;
  double sl_f1;
  double sl_fb;
  double sl_fblp;
  double sl_fbtype;
  double sl_lfoa;
  double sl_lfob;
  double sl_lfof;
  double sl_lfom;
  double sl_r;
  double sl_selfpm;
  double sl_type;
  //----------------------------------------------------------------------------
  void init_init_variables()
  {
    _srate       = 0;
    ad           = 0;
    dccoef       = 0;
    fcoef        = 0;
    lfocoef1     = 0;
    lfocoef2     = 0;
    lfocoef3     = 0;
    scl$vrb1$dcy = 0;
    scl$vrb1$g   = 0;
    scl$vrb1$len = 0;
    scl$vrb1$r   = 0;
    scl$vrb1$t   = 0;
    scl$vrb1$w   = 0;
    scl$vrb1$y   = 0;
    scl$vrb2$dcy = 0;
    scl$vrb2$g   = 0;
    scl$vrb2$len = 0;
    scl$vrb2$r   = 0;
    scl$vrb2$t   = 0;
    scl$vrb2$w   = 0;
    scl$vrb2$y   = 0;
    scl$vrb3$dcy = 0;
    scl$vrb3$g   = 0;
    scl$vrb3$len = 0;
    scl$vrb3$r   = 0;
    scl$vrb3$t   = 0;
    scl$vrb3$w   = 0;
    scl$vrb3$y   = 0;
    scl$vrb4$dcy = 0;
    scl$vrb4$g   = 0;
    scl$vrb4$len = 0;
    scl$vrb4$r   = 0;
    scl$vrb4$t   = 0;
    scl$vrb4$w   = 0;
    scl$vrb4$y   = 0;
    scl$vrb5$dcy = 0;
    scl$vrb5$g   = 0;
    scl$vrb5$len = 0;
    scl$vrb5$r   = 0;
    scl$vrb5$t   = 0;
    scl$vrb5$w   = 0;
    scl$vrb5$y   = 0;
    scl$y        = 0;
    scr$vrb1$dcy = 0;
    scr$vrb1$g   = 0;
    scr$vrb1$len = 0;
    scr$vrb1$r   = 0;
    scr$vrb1$t   = 0;
    scr$vrb1$w   = 0;
    scr$vrb1$y   = 0;
    scr$vrb2$dcy = 0;
    scr$vrb2$g   = 0;
    scr$vrb2$len = 0;
    scr$vrb2$r   = 0;
    scr$vrb2$t   = 0;
    scr$vrb2$w   = 0;
    scr$vrb2$y   = 0;
    scr$vrb3$dcy = 0;
    scr$vrb3$g   = 0;
    scr$vrb3$len = 0;
    scr$vrb3$r   = 0;
    scr$vrb3$t   = 0;
    scr$vrb3$w   = 0;
    scr$vrb3$y   = 0;
    scr$vrb4$dcy = 0;
    scr$vrb4$g   = 0;
    scr$vrb4$len = 0;
    scr$vrb4$r   = 0;
    scr$vrb4$t   = 0;
    scr$vrb4$w   = 0;
    scr$vrb4$y   = 0;
    scr$vrb5$dcy = 0;
    scr$vrb5$g   = 0;
    scr$vrb5$len = 0;
    scr$vrb5$r   = 0;
    scr$vrb5$t   = 0;
    scr$vrb5$w   = 0;
    scr$vrb5$y   = 0;
    scr$y        = 0;
    sl_depth     = 0;
    sl_f0        = 0;
    sl_f1        = 0;
    sl_fb        = 0;
    sl_fblp      = 0;
    sl_fbtype    = 0;
    sl_lfoa      = 0;
    sl_lfob      = 0;
    sl_lfof      = 0;
    sl_lfom      = 0;
    sl_r         = 0;
    sl_selfpm    = 0;
    sl_type      = 0;
  }
  //----------------------------------------------------------------------------
  // global/stateful variables for section "slider"
  double _sl_fb;
  double g0;
  double g1;
  double g2;
  double g3;
  double r2;
  double scl$lfoa1$dp;
  double scl$lfoa1$p;
  double scl$lfoa2$dp;
  double scl$lfoa2$p;
  double scl$lfoa3$dp;
  double scl$lfoa3$p;
  double scl$lfob1$dp;
  double scl$lfob1$p;
  double scl$lfob2$dp;
  double scl$lfob2$p;
  double scl$lfob3$dp;
  double scl$lfob3$p;
  double scl$lfof$dp;
  double scl$lfof$p;
  double scl$lpfb;
  double scr$lfoa1$dp;
  double scr$lfoa1$p;
  double scr$lfoa2$dp;
  double scr$lfoa2$p;
  double scr$lfoa3$dp;
  double scr$lfoa3$p;
  double scr$lfob1$dp;
  double scr$lfob1$p;
  double scr$lfob2$dp;
  double scr$lfob2$p;
  double scr$lfob3$dp;
  double scr$lfob3$p;
  double scr$lfof$dp;
  double scr$lfof$p;
  double scr$lpfb;
  //----------------------------------------------------------------------------
  void init_slider_variables()
  {
    _sl_fb       = 0;
    g0           = 0;
    g1           = 0;
    g2           = 0;
    g3           = 0;
    r2           = 0;
    scl$lfoa1$dp = 0;
    scl$lfoa1$p  = 0;
    scl$lfoa2$dp = 0;
    scl$lfoa2$p  = 0;
    scl$lfoa3$dp = 0;
    scl$lfoa3$p  = 0;
    scl$lfob1$dp = 0;
    scl$lfob1$p  = 0;
    scl$lfob2$dp = 0;
    scl$lfob2$p  = 0;
    scl$lfob3$dp = 0;
    scl$lfob3$p  = 0;
    scl$lfof$dp  = 0;
    scl$lfof$p   = 0;
    scl$lpfb     = 0;
    scr$lfoa1$dp = 0;
    scr$lfoa1$p  = 0;
    scr$lfoa2$dp = 0;
    scr$lfoa2$p  = 0;
    scr$lfoa3$dp = 0;
    scr$lfoa3$p  = 0;
    scr$lfob1$dp = 0;
    scr$lfob1$p  = 0;
    scr$lfob2$dp = 0;
    scr$lfob2$p  = 0;
    scr$lfob3$dp = 0;
    scr$lfob3$p  = 0;
    scr$lfof$dp  = 0;
    scr$lfof$p   = 0;
    scr$lpfb     = 0;
  }
  //----------------------------------------------------------------------------
  // global/stateful variables for section "block"
  double e;
  double scl$c;
  double scl$dc;
  double scl$dcout;
  double scl$dm1;
  double scl$dm2;
  double scl$dm3;
  double scl$fg0;
  double scl$fg1;
  double scl$fg2;
  double scl$fg3;
  double scl$fout;
  double scl$k;
  double scl$lfoa1$t;
  double scl$lfoa1$y;
  double scl$lfoa2$t;
  double scl$lfoa2$y;
  double scl$lfoa3$t;
  double scl$lfoa3$y;
  double scl$lfob1$t;
  double scl$lfob1$y;
  double scl$lfob2$t;
  double scl$lfob2$y;
  double scl$lfob3$t;
  double scl$lfob3$y;
  double scl$lfof$t;
  double scl$lfof$y;
  double scl$m1;
  double scl$m2;
  double scl$m3;
  double scl$out;
  double scl$v0;
  double scl$v1;
  double scl$v10;
  double scl$v11;
  double scl$v12;
  double scl$v13;
  double scl$v14;
  double scl$v15;
  double scl$v16;
  double scl$v17;
  double scl$v18;
  double scl$v19;
  double scl$v2;
  double scl$v3;
  double scl$v4;
  double scl$v5;
  double scl$v6;
  double scl$v7;
  double scl$v8;
  double scl$v9;
  double scl$vrb1$u;
  double scl$vrb1$v;
  double scl$vrb2$u;
  double scl$vrb2$v;
  double scl$vrb3$u;
  double scl$vrb3$v;
  double scl$vrb4$u;
  double scl$vrb4$v;
  double scl$vrb5$u;
  double scl$vrb5$v;
  double scl$w0;
  double scl$w1;
  double scl$w10;
  double scl$w11;
  double scl$w12;
  double scl$w13;
  double scl$w14;
  double scl$w15;
  double scl$w16;
  double scl$w17;
  double scl$w18;
  double scl$w19;
  double scl$w2;
  double scl$w3;
  double scl$w4;
  double scl$w5;
  double scl$w6;
  double scl$w7;
  double scl$w8;
  double scl$w9;
  double scl$y0;
  double scl$y1;
  double scl$y10;
  double scl$y11;
  double scl$y12;
  double scl$y13;
  double scl$y14;
  double scl$y15;
  double scl$y16;
  double scl$y17;
  double scl$y18;
  double scl$y19;
  double scl$y2;
  double scl$y3;
  double scl$y4;
  double scl$y5;
  double scl$y6;
  double scl$y7;
  double scl$y8;
  double scl$y9;
  double scr$c;
  double scr$dc;
  double scr$dcout;
  double scr$dm1;
  double scr$dm2;
  double scr$dm3;
  double scr$fg0;
  double scr$fg1;
  double scr$fg2;
  double scr$fg3;
  double scr$fout;
  double scr$k;
  double scr$lfoa1$t;
  double scr$lfoa1$y;
  double scr$lfoa2$t;
  double scr$lfoa2$y;
  double scr$lfoa3$t;
  double scr$lfoa3$y;
  double scr$lfob1$t;
  double scr$lfob1$y;
  double scr$lfob2$t;
  double scr$lfob2$y;
  double scr$lfob3$t;
  double scr$lfob3$y;
  double scr$lfof$t;
  double scr$lfof$y;
  double scr$m1;
  double scr$m2;
  double scr$m3;
  double scr$out;
  double scr$v0;
  double scr$v1;
  double scr$v10;
  double scr$v11;
  double scr$v12;
  double scr$v13;
  double scr$v14;
  double scr$v15;
  double scr$v16;
  double scr$v17;
  double scr$v18;
  double scr$v19;
  double scr$v2;
  double scr$v3;
  double scr$v4;
  double scr$v5;
  double scr$v6;
  double scr$v7;
  double scr$v8;
  double scr$v9;
  double scr$vrb1$u;
  double scr$vrb1$v;
  double scr$vrb2$u;
  double scr$vrb2$v;
  double scr$vrb3$u;
  double scr$vrb3$v;
  double scr$vrb4$u;
  double scr$vrb4$v;
  double scr$vrb5$u;
  double scr$vrb5$v;
  double scr$w0;
  double scr$w1;
  double scr$w10;
  double scr$w11;
  double scr$w12;
  double scr$w13;
  double scr$w14;
  double scr$w15;
  double scr$w16;
  double scr$w17;
  double scr$w18;
  double scr$w19;
  double scr$w2;
  double scr$w3;
  double scr$w4;
  double scr$w5;
  double scr$w6;
  double scr$w7;
  double scr$w8;
  double scr$w9;
  double scr$y0;
  double scr$y1;
  double scr$y10;
  double scr$y11;
  double scr$y12;
  double scr$y13;
  double scr$y14;
  double scr$y15;
  double scr$y16;
  double scr$y17;
  double scr$y18;
  double scr$y19;
  double scr$y2;
  double scr$y3;
  double scr$y4;
  double scr$y5;
  double scr$y6;
  double scr$y7;
  double scr$y8;
  double scr$y9;
  double y0;
  double y1;
  //----------------------------------------------------------------------------
  void init_block_variables()
  {
    e           = 0;
    scl$c       = 0;
    scl$dc      = 0;
    scl$dcout   = 0;
    scl$dm1     = 0;
    scl$dm2     = 0;
    scl$dm3     = 0;
    scl$fg0     = 0;
    scl$fg1     = 0;
    scl$fg2     = 0;
    scl$fg3     = 0;
    scl$fout    = 0;
    scl$k       = 0;
    scl$lfoa1$t = 0;
    scl$lfoa1$y = 0;
    scl$lfoa2$t = 0;
    scl$lfoa2$y = 0;
    scl$lfoa3$t = 0;
    scl$lfoa3$y = 0;
    scl$lfob1$t = 0;
    scl$lfob1$y = 0;
    scl$lfob2$t = 0;
    scl$lfob2$y = 0;
    scl$lfob3$t = 0;
    scl$lfob3$y = 0;
    scl$lfof$t  = 0;
    scl$lfof$y  = 0;
    scl$m1      = 0;
    scl$m2      = 0;
    scl$m3      = 0;
    scl$out     = 0;
    scl$v0      = 0;
    scl$v1      = 0;
    scl$v10     = 0;
    scl$v11     = 0;
    scl$v12     = 0;
    scl$v13     = 0;
    scl$v14     = 0;
    scl$v15     = 0;
    scl$v16     = 0;
    scl$v17     = 0;
    scl$v18     = 0;
    scl$v19     = 0;
    scl$v2      = 0;
    scl$v3      = 0;
    scl$v4      = 0;
    scl$v5      = 0;
    scl$v6      = 0;
    scl$v7      = 0;
    scl$v8      = 0;
    scl$v9      = 0;
    scl$vrb1$u  = 0;
    scl$vrb1$v  = 0;
    scl$vrb2$u  = 0;
    scl$vrb2$v  = 0;
    scl$vrb3$u  = 0;
    scl$vrb3$v  = 0;
    scl$vrb4$u  = 0;
    scl$vrb4$v  = 0;
    scl$vrb5$u  = 0;
    scl$vrb5$v  = 0;
    scl$w0      = 0;
    scl$w1      = 0;
    scl$w10     = 0;
    scl$w11     = 0;
    scl$w12     = 0;
    scl$w13     = 0;
    scl$w14     = 0;
    scl$w15     = 0;
    scl$w16     = 0;
    scl$w17     = 0;
    scl$w18     = 0;
    scl$w19     = 0;
    scl$w2      = 0;
    scl$w3      = 0;
    scl$w4      = 0;
    scl$w5      = 0;
    scl$w6      = 0;
    scl$w7      = 0;
    scl$w8      = 0;
    scl$w9      = 0;
    scl$y0      = 0;
    scl$y1      = 0;
    scl$y10     = 0;
    scl$y11     = 0;
    scl$y12     = 0;
    scl$y13     = 0;
    scl$y14     = 0;
    scl$y15     = 0;
    scl$y16     = 0;
    scl$y17     = 0;
    scl$y18     = 0;
    scl$y19     = 0;
    scl$y2      = 0;
    scl$y3      = 0;
    scl$y4      = 0;
    scl$y5      = 0;
    scl$y6      = 0;
    scl$y7      = 0;
    scl$y8      = 0;
    scl$y9      = 0;
    scr$c       = 0;
    scr$dc      = 0;
    scr$dcout   = 0;
    scr$dm1     = 0;
    scr$dm2     = 0;
    scr$dm3     = 0;
    scr$fg0     = 0;
    scr$fg1     = 0;
    scr$fg2     = 0;
    scr$fg3     = 0;
    scr$fout    = 0;
    scr$k       = 0;
    scr$lfoa1$t = 0;
    scr$lfoa1$y = 0;
    scr$lfoa2$t = 0;
    scr$lfoa2$y = 0;
    scr$lfoa3$t = 0;
    scr$lfoa3$y = 0;
    scr$lfob1$t = 0;
    scr$lfob1$y = 0;
    scr$lfob2$t = 0;
    scr$lfob2$y = 0;
    scr$lfob3$t = 0;
    scr$lfob3$y = 0;
    scr$lfof$t  = 0;
    scr$lfof$y  = 0;
    scr$m1      = 0;
    scr$m2      = 0;
    scr$m3      = 0;
    scr$out     = 0;
    scr$v0      = 0;
    scr$v1      = 0;
    scr$v10     = 0;
    scr$v11     = 0;
    scr$v12     = 0;
    scr$v13     = 0;
    scr$v14     = 0;
    scr$v15     = 0;
    scr$v16     = 0;
    scr$v17     = 0;
    scr$v18     = 0;
    scr$v19     = 0;
    scr$v2      = 0;
    scr$v3      = 0;
    scr$v4      = 0;
    scr$v5      = 0;
    scr$v6      = 0;
    scr$v7      = 0;
    scr$v8      = 0;
    scr$v9      = 0;
    scr$vrb1$u  = 0;
    scr$vrb1$v  = 0;
    scr$vrb2$u  = 0;
    scr$vrb2$v  = 0;
    scr$vrb3$u  = 0;
    scr$vrb3$v  = 0;
    scr$vrb4$u  = 0;
    scr$vrb4$v  = 0;
    scr$vrb5$u  = 0;
    scr$vrb5$v  = 0;
    scr$w0      = 0;
    scr$w1      = 0;
    scr$w10     = 0;
    scr$w11     = 0;
    scr$w12     = 0;
    scr$w13     = 0;
    scr$w14     = 0;
    scr$w15     = 0;
    scr$w16     = 0;
    scr$w17     = 0;
    scr$w18     = 0;
    scr$w19     = 0;
    scr$w2      = 0;
    scr$w3      = 0;
    scr$w4      = 0;
    scr$w5      = 0;
    scr$w6      = 0;
    scr$w7      = 0;
    scr$w8      = 0;
    scr$w9      = 0;
    scr$y0      = 0;
    scr$y1      = 0;
    scr$y10     = 0;
    scr$y11     = 0;
    scr$y12     = 0;
    scr$y13     = 0;
    scr$y14     = 0;
    scr$y15     = 0;
    scr$y16     = 0;
    scr$y17     = 0;
    scr$y18     = 0;
    scr$y19     = 0;
    scr$y2      = 0;
    scr$y3      = 0;
    scr$y4      = 0;
    scr$y5      = 0;
    scr$y6      = 0;
    scr$y7      = 0;
    scr$y8      = 0;
    scr$y9      = 0;
    y0          = 0;
    y1          = 0;
  }
  //----------------------------------------------------------------------------
  plugin_context* _plugcontext;

public:
  //----------------------------------------------------------------------------
  void reset (plugin_context& pc)
  {
    _plugcontext = &pc;

    init_init_variables();
    init_slider_variables();
    init_block_variables();

    sl_lfoa   = 7.0;
    sl_lfob   = 3.25;
    sl_lfom   = 0.2;
    sl_depth  = 8.0;
    sl_f1     = 2500.0;
    sl_f0     = 1000.0;
    sl_r      = 0.7;
    sl_lfof   = 0.125;
    sl_fb     = 0.0;
    sl_fbtype = 0.0;
    sl_fblp   = 1.0;
    sl_type   = 1.0;
    sl_selfpm = 0.0;
    _srate    = 1. / jsfx_specialvar_get_srate();
    fcoef     = 2. * 3.141592653589793 * _srate;
    dccoef    = 0.05 * 44100. * _srate;
    lfocoef1  = 16. * _srate;
    lfocoef2  = 1.13 * lfocoef1;
    lfocoef3  = 0.90 * lfocoef1;
#if 1
    uint           line_size         = 2 * jsfx_specialvar_get_srate();
    constexpr uint n_lines           = 5;
    constexpr uint n_stereo_channels = 2;
    heap_reset (n_stereo_channels * (21 + (n_lines * line_size)));
#endif
    init$sc_init (
      scl$y,
      scl$vrb1$t,
      scl$vrb1$len,
      scl$vrb1$g,
      scl$vrb1$w,
      scl$vrb1$r,
      scl$vrb1$y,
      scl$vrb1$dcy,
      scl$vrb2$t,
      scl$vrb2$len,
      scl$vrb2$g,
      scl$vrb2$w,
      scl$vrb2$r,
      scl$vrb2$y,
      scl$vrb2$dcy,
      scl$vrb3$t,
      scl$vrb3$len,
      scl$vrb3$g,
      scl$vrb3$w,
      scl$vrb3$r,
      scl$vrb3$y,
      scl$vrb3$dcy,
      scl$vrb4$t,
      scl$vrb4$len,
      scl$vrb4$g,
      scl$vrb4$w,
      scl$vrb4$r,
      scl$vrb4$y,
      scl$vrb4$dcy,
      scl$vrb5$t,
      scl$vrb5$len,
      scl$vrb5$g,
      scl$vrb5$w,
      scl$vrb5$r,
      scl$vrb5$y,
      scl$vrb5$dcy);
    init$sc_init (
      scr$y,
      scr$vrb1$t,
      scr$vrb1$len,
      scr$vrb1$g,
      scr$vrb1$w,
      scr$vrb1$r,
      scr$vrb1$y,
      scr$vrb1$dcy,
      scr$vrb2$t,
      scr$vrb2$len,
      scr$vrb2$g,
      scr$vrb2$w,
      scr$vrb2$r,
      scr$vrb2$y,
      scr$vrb2$dcy,
      scr$vrb3$t,
      scr$vrb3$len,
      scr$vrb3$g,
      scr$vrb3$w,
      scr$vrb3$r,
      scr$vrb3$y,
      scr$vrb3$dcy,
      scr$vrb4$t,
      scr$vrb4$len,
      scr$vrb4$g,
      scr$vrb4$w,
      scr$vrb4$r,
      scr$vrb4$y,
      scr$vrb4$dcy,
      scr$vrb5$t,
      scr$vrb5$len,
      scr$vrb5$g,
      scr$vrb5$w,
      scr$vrb5$r,
      scr$vrb5$y,
      scr$vrb5$dcy);
    ;
  }
  //----------------------------------------------------------------------------
private:
  void slider()
  {
    scr$lpfb = (60000. * sl_fblp * sl_fblp * _srate)
      / (1. + 60000. * sl_fblp * sl_fblp * _srate);
    scl$lpfb     = scr$lpfb;
    sl_depth     = std::min (19., std::max (1., sl_depth));
    scr$lfoa1$dp = lfocoef1 * sl_lfoa;
    scl$lfoa1$dp = scr$lfoa1$dp;
    scr$lfoa2$dp = lfocoef2 * sl_lfoa;
    scl$lfoa2$dp = scr$lfoa2$dp;
    scr$lfoa3$dp = lfocoef3 * sl_lfoa;
    scl$lfoa3$dp = scr$lfoa3$dp;
    scr$lfob1$dp = lfocoef1 * sl_lfob;
    scl$lfob1$dp = scr$lfob1$dp;
    scr$lfob2$dp = lfocoef2 * sl_lfob;
    scl$lfob2$dp = scr$lfob2$dp;
    scr$lfob3$dp = lfocoef3 * sl_lfob;
    scl$lfob3$dp = scr$lfob3$dp;
    scr$lfof$dp  = lfocoef1 * sl_lfof;
    scl$lfof$dp  = scr$lfof$dp;
    scr$lfoa1$p  = scl$lfoa1$p + 0.5;
    scl$lfoa2$p  = scr$lfoa2$p + 0.5;
    scl$lfoa3$p  = scr$lfoa3$p + 0.5;
    scl$lfob1$p  = scr$lfob1$p + 0.5;
    scr$lfob2$p  = scl$lfob2$p + 0.5;
    scr$lfob3$p  = scl$lfob3$p + 0.5;
    scl$lfof$p   = scr$lfof$p + 0.5;
    if (eel2_eq (sl_type, 0.)) {
      g0 = 0.00;
      g1 = 0.00;
      g2 = 0.00;
      g3 = 1.00;
    }
    else {
      if (eel2_eq (sl_type, 1.)) {
        g0 = 0.70;
        g1 = 0.00;
        g2 = 0.00;
        g3 = 0.70;
      }
      else {
        if (eel2_eq (sl_type, 2.)) {
          g0 = 0.40;
          g1 = 0.57;
          g2 = 0.00;
          g3 = 0.71;
        }
        else {
          if (eel2_eq (sl_type, 3.)) {
            g0 = 0.48;
            g1 = 0.40;
            g2 = 0.50;
            g3 = 0.60;
          }
        }
      }
    }
    r2     = sl_r * sl_r;
    _sl_fb = 1. - sl_fb;
    if (eel2_eq (sl_fbtype, 0.)) {
      init$vrb_set (0.025, scl$vrb1$r, scl$vrb1$w, scl$vrb1$len);
      init$vrb_set (0.023, scl$vrb2$r, scl$vrb2$w, scl$vrb2$len);
      init$vrb_set (0.015, scl$vrb3$r, scl$vrb3$w, scl$vrb3$len);
      init$vrb_set (0.012, scl$vrb4$r, scl$vrb4$w, scl$vrb4$len);
      init$vrb_set (0.0095, scl$vrb5$r, scl$vrb5$w, scl$vrb5$len);
      init$vrb_set (0.026, scr$vrb1$r, scr$vrb1$w, scr$vrb1$len);
      init$vrb_set (0.022, scr$vrb2$r, scr$vrb2$w, scr$vrb2$len);
      init$vrb_set (0.017, scr$vrb3$r, scr$vrb3$w, scr$vrb3$len);
      init$vrb_set (0.011, scr$vrb4$r, scr$vrb4$w, scr$vrb4$len);
      init$vrb_set (0.0095, scr$vrb5$r, scr$vrb5$w, scr$vrb5$len);
    }
    else {
      if (eel2_eq (sl_fbtype, 1.)) {
        init$vrb_set (0.069, scl$vrb1$r, scl$vrb1$w, scl$vrb1$len);
        init$vrb_set (0.032, scl$vrb2$r, scl$vrb2$w, scl$vrb2$len);
        init$vrb_set (0.015, scl$vrb3$r, scl$vrb3$w, scl$vrb3$len);
        init$vrb_set (0.007, scl$vrb4$r, scl$vrb4$w, scl$vrb4$len);
        init$vrb_set (0.004, scl$vrb5$r, scl$vrb5$w, scl$vrb5$len);
        init$vrb_set (0.067, scr$vrb1$r, scr$vrb1$w, scr$vrb1$len);
        init$vrb_set (0.034, scr$vrb2$r, scr$vrb2$w, scr$vrb2$len);
        init$vrb_set (0.015, scr$vrb3$r, scr$vrb3$w, scr$vrb3$len);
        init$vrb_set (0.009, scr$vrb4$r, scr$vrb4$w, scr$vrb4$len);
        init$vrb_set (0.003, scr$vrb5$r, scr$vrb5$w, scr$vrb5$len);
      }
      else {
        if (eel2_eq (sl_fbtype, 2.)) {
          init$vrb_set (0.120, scl$vrb1$r, scl$vrb1$w, scl$vrb1$len);
          init$vrb_set (0.054, scl$vrb2$r, scl$vrb2$w, scl$vrb2$len);
          init$vrb_set (0.021, scl$vrb3$r, scl$vrb3$w, scl$vrb3$len);
          init$vrb_set (0.009, scl$vrb4$r, scl$vrb4$w, scl$vrb4$len);
          init$vrb_set (0.007, scl$vrb5$r, scl$vrb5$w, scl$vrb5$len);
          init$vrb_set (0.123, scr$vrb1$r, scr$vrb1$w, scr$vrb1$len);
          init$vrb_set (0.051, scr$vrb2$r, scr$vrb2$w, scr$vrb2$len);
          init$vrb_set (0.023, scr$vrb3$r, scr$vrb3$w, scr$vrb3$len);
          init$vrb_set (0.008, scr$vrb4$r, scr$vrb4$w, scr$vrb4$len);
          init$vrb_set (0.005, scr$vrb5$r, scr$vrb5$w, scr$vrb5$len);
        }
        else {
          if (eel2_eq (sl_fbtype, 3.)) {
            init$vrb_set (0.550, scl$vrb1$r, scl$vrb1$w, scl$vrb1$len);
            init$vrb_set (0.244, scl$vrb2$r, scl$vrb2$w, scl$vrb2$len);
            init$vrb_set (0.011, scl$vrb3$r, scl$vrb3$w, scl$vrb3$len);
            init$vrb_set (0.005, scl$vrb4$r, scl$vrb4$w, scl$vrb4$len);
            init$vrb_set (0.004, scl$vrb5$r, scl$vrb5$w, scl$vrb5$len);
            init$vrb_set (0.450, scr$vrb1$r, scr$vrb1$w, scr$vrb1$len);
            init$vrb_set (0.304, scr$vrb2$r, scr$vrb2$w, scr$vrb2$len);
            init$vrb_set (0.013, scr$vrb3$r, scr$vrb3$w, scr$vrb3$len);
            init$vrb_set (0.009, scr$vrb4$r, scr$vrb4$w, scr$vrb4$len);
            init$vrb_set (0.002, scr$vrb5$r, scr$vrb5$w, scr$vrb5$len);
          }
          else {
            if (eel2_eq (sl_fbtype, 4.)) {
              init$vrb_set (1.000, scl$vrb1$r, scl$vrb1$w, scl$vrb1$len);
              init$vrb_set (0.125, scl$vrb2$r, scl$vrb2$w, scl$vrb2$len);
              init$vrb_set (
                0.125 * 0.125, scl$vrb3$r, scl$vrb3$w, scl$vrb3$len);
              init$vrb_set (0.007, scl$vrb4$r, scl$vrb4$w, scl$vrb4$len);
              init$vrb_set (0.003, scl$vrb5$r, scl$vrb5$w, scl$vrb5$len);
              init$vrb_set (0.750, scr$vrb1$r, scr$vrb1$w, scr$vrb1$len);
              init$vrb_set (0.125, scr$vrb2$r, scr$vrb2$w, scr$vrb2$len);
              init$vrb_set (
                0.125 * 0.125, scr$vrb3$r, scr$vrb3$w, scr$vrb3$len);
              init$vrb_set (0.006, scr$vrb4$r, scr$vrb4$w, scr$vrb4$len);
              init$vrb_set (0.005, scr$vrb5$r, scr$vrb5$w, scr$vrb5$len);
            }
          }
        }
      }
    };
  }
  //----------------------------------------------------------------------------
public:
  template <class T>
  void process (crange<T*> outs, crange<T const*> ins, uint samples)
  {
    assert (outs.size() >= (n_outputs * (uint) bus_type));
    assert (ins.size() >= (n_inputs * (uint) bus_type));
    double c = 0.;
    double m = 0.;

    for (int $$i = 0; $$i < samples; ++$$i) {
      auto& spl0 = outs[0][$$i];
      auto& spl1 = outs[1][$$i];
      spl0       = ins[0][$$i];
      spl1       = ins[1][$$i];
      m          = std::max<T> (
        std::max (std::abs (spl0), std::abs (spl1)),
        std::max (std::abs (y0), std::abs (y1)));
      if (m >= e) {
        e = m;
      }
      else {
        e *= 0.99;
      }
      if (e > 0.0001) {
        c  = std::min (1., 1000. * (e - 0.0001));
        y0 = init$sc_chorus (
          spl0,
          scl$k,
          scl$lfoa1$y,
          scl$lfob1$y,
          scl$lfoa2$y,
          scl$lfob2$y,
          scl$lfoa3$y,
          scl$lfob3$y,
          scl$lfof$y,
          scl$dm1,
          scl$m1,
          scl$dm2,
          scl$m2,
          scl$dm3,
          scl$m3,
          scl$dc,
          scl$c,
          scl$fg0,
          scl$fg1,
          scl$fg2,
          scl$fg3,
          scl$dcout,
          scl$out,
          scl$fout,
          scl$lpfb,
          scl$lfoa1$p,
          scl$lfoa1$dp,
          scl$lfoa1$t,
          scl$lfob1$p,
          scl$lfob1$dp,
          scl$lfob1$t,
          scl$lfoa2$p,
          scl$lfoa2$dp,
          scl$lfoa2$t,
          scl$lfob2$p,
          scl$lfob2$dp,
          scl$lfob2$t,
          scl$lfoa3$p,
          scl$lfoa3$dp,
          scl$lfoa3$t,
          scl$lfob3$p,
          scl$lfob3$dp,
          scl$lfob3$t,
          scl$lfof$p,
          scl$lfof$dp,
          scl$lfof$t,
          scl$vrb1$u,
          scl$vrb1$g,
          scl$vrb1$v,
          scl$vrb1$y,
          scl$vrb1$t,
          scl$vrb1$r,
          scl$vrb1$w,
          scl$vrb1$len,
          scl$vrb2$u,
          scl$vrb2$g,
          scl$vrb2$v,
          scl$vrb2$y,
          scl$vrb2$t,
          scl$vrb2$r,
          scl$vrb2$w,
          scl$vrb2$len,
          scl$vrb3$u,
          scl$vrb3$g,
          scl$vrb3$v,
          scl$vrb3$y,
          scl$vrb3$t,
          scl$vrb3$r,
          scl$vrb3$w,
          scl$vrb3$len,
          scl$vrb4$u,
          scl$vrb4$g,
          scl$vrb4$v,
          scl$vrb4$y,
          scl$vrb4$t,
          scl$vrb4$r,
          scl$vrb4$w,
          scl$vrb4$len,
          scl$vrb5$u,
          scl$vrb5$g,
          scl$vrb5$v,
          scl$vrb5$y,
          scl$vrb5$t,
          scl$vrb5$r,
          scl$vrb5$w,
          scl$vrb5$len,
          scl$v0,
          scl$w0,
          scl$y0,
          scl$y,
          scl$v1,
          scl$w1,
          scl$y1,
          scl$v2,
          scl$w2,
          scl$y2,
          scl$v3,
          scl$w3,
          scl$y3,
          scl$v4,
          scl$w4,
          scl$y4,
          scl$v5,
          scl$w5,
          scl$y5,
          scl$v6,
          scl$w6,
          scl$y6,
          scl$v7,
          scl$w7,
          scl$y7,
          scl$v8,
          scl$w8,
          scl$y8,
          scl$v9,
          scl$w9,
          scl$y9,
          scl$v10,
          scl$w10,
          scl$y10,
          scl$v11,
          scl$w11,
          scl$y11,
          scl$v12,
          scl$w12,
          scl$y12,
          scl$v13,
          scl$w13,
          scl$y13,
          scl$v14,
          scl$w14,
          scl$y14,
          scl$v15,
          scl$w15,
          scl$y15,
          scl$v16,
          scl$w16,
          scl$y16,
          scl$v17,
          scl$w17,
          scl$y17,
          scl$v18,
          scl$w18,
          scl$y18,
          scl$v19,
          scl$w19,
          scl$y19);
        y1 = init$sc_chorus (
          spl1,
          scr$k,
          scr$lfoa1$y,
          scr$lfob1$y,
          scr$lfoa2$y,
          scr$lfob2$y,
          scr$lfoa3$y,
          scr$lfob3$y,
          scr$lfof$y,
          scr$dm1,
          scr$m1,
          scr$dm2,
          scr$m2,
          scr$dm3,
          scr$m3,
          scr$dc,
          scr$c,
          scr$fg0,
          scr$fg1,
          scr$fg2,
          scr$fg3,
          scr$dcout,
          scr$out,
          scr$fout,
          scr$lpfb,
          scr$lfoa1$p,
          scr$lfoa1$dp,
          scr$lfoa1$t,
          scr$lfob1$p,
          scr$lfob1$dp,
          scr$lfob1$t,
          scr$lfoa2$p,
          scr$lfoa2$dp,
          scr$lfoa2$t,
          scr$lfob2$p,
          scr$lfob2$dp,
          scr$lfob2$t,
          scr$lfoa3$p,
          scr$lfoa3$dp,
          scr$lfoa3$t,
          scr$lfob3$p,
          scr$lfob3$dp,
          scr$lfob3$t,
          scr$lfof$p,
          scr$lfof$dp,
          scr$lfof$t,
          scr$vrb1$u,
          scr$vrb1$g,
          scr$vrb1$v,
          scr$vrb1$y,
          scr$vrb1$t,
          scr$vrb1$r,
          scr$vrb1$w,
          scr$vrb1$len,
          scr$vrb2$u,
          scr$vrb2$g,
          scr$vrb2$v,
          scr$vrb2$y,
          scr$vrb2$t,
          scr$vrb2$r,
          scr$vrb2$w,
          scr$vrb2$len,
          scr$vrb3$u,
          scr$vrb3$g,
          scr$vrb3$v,
          scr$vrb3$y,
          scr$vrb3$t,
          scr$vrb3$r,
          scr$vrb3$w,
          scr$vrb3$len,
          scr$vrb4$u,
          scr$vrb4$g,
          scr$vrb4$v,
          scr$vrb4$y,
          scr$vrb4$t,
          scr$vrb4$r,
          scr$vrb4$w,
          scr$vrb4$len,
          scr$vrb5$u,
          scr$vrb5$g,
          scr$vrb5$v,
          scr$vrb5$y,
          scr$vrb5$t,
          scr$vrb5$r,
          scr$vrb5$w,
          scr$vrb5$len,
          scr$v0,
          scr$w0,
          scr$y0,
          scr$y,
          scr$v1,
          scr$w1,
          scr$y1,
          scr$v2,
          scr$w2,
          scr$y2,
          scr$v3,
          scr$w3,
          scr$y3,
          scr$v4,
          scr$w4,
          scr$y4,
          scr$v5,
          scr$w5,
          scr$y5,
          scr$v6,
          scr$w6,
          scr$y6,
          scr$v7,
          scr$w7,
          scr$y7,
          scr$v8,
          scr$w8,
          scr$y8,
          scr$v9,
          scr$w9,
          scr$y9,
          scr$v10,
          scr$w10,
          scr$y10,
          scr$v11,
          scr$w11,
          scr$y11,
          scr$v12,
          scr$w12,
          scr$y12,
          scr$v13,
          scr$w13,
          scr$y13,
          scr$v14,
          scr$w14,
          scr$y14,
          scr$v15,
          scr$w15,
          scr$y15,
          scr$v16,
          scr$w16,
          scr$y16,
          scr$v17,
          scr$w17,
          scr$y17,
          scr$v18,
          scr$w18,
          scr$y18,
          scr$v19,
          scr$w19,
          scr$y19);
        spl0 = c * y0;
        spl1 = c * y1;
      }
      else {
        e  = 0.;
        y0 = y1 = e;
      };
    }
  }
  // functions for section "init"
private:
  //----------------------------------------------------------------------------
  double init$lfo_proc (double& $p, double& $dp, double& $t, double& $y)
  {
    $p += $dp;
    $p -= 2. * ($p >= 2.);
    $t = $p + ($p > 1.) * (2. - 2. * $p);
    $y = $t * $t * (3. - 2. * $t);
    return $y;
  }
  //----------------------------------------------------------------------------
  double init$sc_chorus (
    double  x,
    double& $k,
    double& $lfoa1$y,
    double& $lfob1$y,
    double& $lfoa2$y,
    double& $lfob2$y,
    double& $lfoa3$y,
    double& $lfob3$y,
    double& $lfof$y,
    double& $dm1,
    double& $m1,
    double& $dm2,
    double& $m2,
    double& $dm3,
    double& $m3,
    double& $dc,
    double& $c,
    double& $fg0,
    double& $fg1,
    double& $fg2,
    double& $fg3,
    double& $dcout,
    double& $out,
    double& $fout,
    double& $lpfb,
    double& $lfoa1$p,
    double& $lfoa1$dp,
    double& $lfoa1$t,
    double& $lfob1$p,
    double& $lfob1$dp,
    double& $lfob1$t,
    double& $lfoa2$p,
    double& $lfoa2$dp,
    double& $lfoa2$t,
    double& $lfob2$p,
    double& $lfob2$dp,
    double& $lfob2$t,
    double& $lfoa3$p,
    double& $lfoa3$dp,
    double& $lfoa3$t,
    double& $lfob3$p,
    double& $lfob3$dp,
    double& $lfob3$t,
    double& $lfof$p,
    double& $lfof$dp,
    double& $lfof$t,
    double& $vrb1$u,
    double& $vrb1$g,
    double& $vrb1$v,
    double& $vrb1$y,
    double& $vrb1$t,
    double& $vrb1$r,
    double& $vrb1$w,
    double& $vrb1$len,
    double& $vrb2$u,
    double& $vrb2$g,
    double& $vrb2$v,
    double& $vrb2$y,
    double& $vrb2$t,
    double& $vrb2$r,
    double& $vrb2$w,
    double& $vrb2$len,
    double& $vrb3$u,
    double& $vrb3$g,
    double& $vrb3$v,
    double& $vrb3$y,
    double& $vrb3$t,
    double& $vrb3$r,
    double& $vrb3$w,
    double& $vrb3$len,
    double& $vrb4$u,
    double& $vrb4$g,
    double& $vrb4$v,
    double& $vrb4$y,
    double& $vrb4$t,
    double& $vrb4$r,
    double& $vrb4$w,
    double& $vrb4$len,
    double& $vrb5$u,
    double& $vrb5$g,
    double& $vrb5$v,
    double& $vrb5$y,
    double& $vrb5$t,
    double& $vrb5$r,
    double& $vrb5$w,
    double& $vrb5$len,
    double& $v0,
    double& $w0,
    double& $y0,
    double& $y,
    double& $v1,
    double& $w1,
    double& $y1,
    double& $v2,
    double& $w2,
    double& $y2,
    double& $v3,
    double& $w3,
    double& $y3,
    double& $v4,
    double& $w4,
    double& $y4,
    double& $v5,
    double& $w5,
    double& $y5,
    double& $v6,
    double& $w6,
    double& $y6,
    double& $v7,
    double& $w7,
    double& $y7,
    double& $v8,
    double& $w8,
    double& $y8,
    double& $v9,
    double& $w9,
    double& $y9,
    double& $v10,
    double& $w10,
    double& $y10,
    double& $v11,
    double& $w11,
    double& $y11,
    double& $v12,
    double& $w12,
    double& $y12,
    double& $v13,
    double& $w13,
    double& $y13,
    double& $v14,
    double& $w14,
    double& $y14,
    double& $v15,
    double& $w15,
    double& $y15,
    double& $v16,
    double& $w16,
    double& $y16,
    double& $v17,
    double& $w17,
    double& $y17,
    double& $v18,
    double& $w18,
    double& $y18,
    double& $v19,
    double& $w19,
    double& $y19)
  {
    double nc  = 0.;
    double nm1 = 0.;
    double nm3 = 0.;
    double spm = 0.;
    double nm2 = 0.;
    double fb  = 0.;
    if ($k <= 0.) {
      $k = 8.;
      init$lfo_proc ($lfoa1$p, $lfoa1$dp, $lfoa1$t, $lfoa1$y);
      init$lfo_proc ($lfob1$p, $lfob1$dp, $lfob1$t, $lfob1$y);
      nm1 = $lfoa1$y + sl_lfom * ($lfob1$y - $lfoa1$y);
      init$lfo_proc ($lfoa2$p, $lfoa2$dp, $lfoa2$t, $lfoa2$y);
      init$lfo_proc ($lfob2$p, $lfob2$dp, $lfob2$t, $lfob2$y);
      nm2 = $lfoa2$y + sl_lfom * ($lfob2$y - $lfoa2$y);
      init$lfo_proc ($lfoa3$p, $lfoa3$dp, $lfoa3$t, $lfoa3$y);
      init$lfo_proc ($lfob3$p, $lfob3$dp, $lfob3$t, $lfob3$y);
      nm3 = $lfoa3$y + sl_lfom * ($lfob3$y - $lfoa3$y) - 0.5;
      init$lfo_proc ($lfof$p, $lfof$dp, $lfof$t, $lfof$y);
      nc = fcoef * (sl_f0 + $lfof$y * (sl_f1 - sl_f0));
      nc *= nc;
      nc = -2.
        + nc
          * (1. + nc * ((-1. / 12.) + nc * ((1. / 360.) + nc * (-1. / 20160.))));
      nc *= sl_r;
      nm1  = 2.9 + sl_depth * nm1;
      nm2  = 19.001 - sl_depth * nm2;
      nm3  = 9.501 + sl_depth * nm3;
      $dm1 = 0.125 * (nm1 - $m1);
      $dm2 = 0.125 * (nm2 - $m2);
      $dm3 = 0.125 * (nm3 - $m3);
      $dc  = 0.125 * (nc - $c);
    }
    $k -= 1.;
    $c += $dc;
    $m1 += $dm1;
    $m2 += $dm2;
    $m3 += $dm3;
    $fg0 += 0.0625 * (g0 - $fg0);
    $fg1 += 0.0625 * (g1 - $fg1);
    $fg2 += 0.0625 * (g2 - $fg2);
    $fg3 += 0.0625 * (g3 - $fg3);
    spm = 9. + 8. * std::min (1., std::max (-1., x));
    $dcout += dccoef * ($out - $dcout);
    $fout += $lpfb * ($out - $dcout - $fout);
    x = _sl_fb * x
      + sl_fb
        * init$vrb_proc (
          init$vrb_proc (
            init$vrb_proc (
              init$vrb_proc (
                init$vrb_proc (
                  $fout,
                  $vrb5$u,
                  $vrb5$g,
                  $vrb5$v,
                  $vrb5$y,
                  $vrb5$t,
                  $vrb5$r,
                  $vrb5$w,
                  $vrb5$len),
                $vrb4$u,
                $vrb4$g,
                $vrb4$v,
                $vrb4$y,
                $vrb4$t,
                $vrb4$r,
                $vrb4$w,
                $vrb4$len),
              $vrb3$u,
              $vrb3$g,
              $vrb3$v,
              $vrb3$y,
              $vrb3$t,
              $vrb3$r,
              $vrb3$w,
              $vrb3$len),
            $vrb2$u,
            $vrb2$g,
            $vrb2$v,
            $vrb2$y,
            $vrb2$t,
            $vrb2$r,
            $vrb2$w,
            $vrb2$len),
          $vrb1$u,
          $vrb1$g,
          $vrb1$v,
          $vrb1$y,
          $vrb1$t,
          $vrb1$r,
          $vrb1$w,
          $vrb1$len);
    init$sc_proc (
      x,
      $c,
      r2,
      $v0,
      $w0,
      $y0,
      $y,
      $v1,
      $w1,
      $y1,
      $v2,
      $w2,
      $y2,
      $v3,
      $w3,
      $y3,
      $v4,
      $w4,
      $y4,
      $v5,
      $w5,
      $y5,
      $v6,
      $w6,
      $y6,
      $v7,
      $w7,
      $y7,
      $v8,
      $w8,
      $y8,
      $v9,
      $w9,
      $y9,
      $v10,
      $w10,
      $y10,
      $v11,
      $w11,
      $y11,
      $v12,
      $w12,
      $y12,
      $v13,
      $w13,
      $y13,
      $v14,
      $w14,
      $y14,
      $v15,
      $w15,
      $y15,
      $v16,
      $w16,
      $y16,
      $v17,
      $w17,
      $y17,
      $v18,
      $w18,
      $y18,
      $v19,
      $w19,
      $y19);
    $out = $fg0 * x + $fg1 * init$sc_read ($m1 + sl_selfpm * (spm - $m1), $y)
      + $fg2 * init$sc_read ($m2 + sl_selfpm * (spm - $m2), $y)
      + $fg3 * init$sc_read ($m3 + sl_selfpm * (spm - $m3), $y);
    return $out;
  }
  //----------------------------------------------------------------------------
  double init$sc_init (
    double& $y,
    double& $vrb1$t,
    double& $vrb1$len,
    double& $vrb1$g,
    double& $vrb1$w,
    double& $vrb1$r,
    double& $vrb1$y,
    double& $vrb1$dcy,
    double& $vrb2$t,
    double& $vrb2$len,
    double& $vrb2$g,
    double& $vrb2$w,
    double& $vrb2$r,
    double& $vrb2$y,
    double& $vrb2$dcy,
    double& $vrb3$t,
    double& $vrb3$len,
    double& $vrb3$g,
    double& $vrb3$w,
    double& $vrb3$r,
    double& $vrb3$y,
    double& $vrb3$dcy,
    double& $vrb4$t,
    double& $vrb4$len,
    double& $vrb4$g,
    double& $vrb4$w,
    double& $vrb4$r,
    double& $vrb4$y,
    double& $vrb4$dcy,
    double& $vrb5$t,
    double& $vrb5$len,
    double& $vrb5$g,
    double& $vrb5$w,
    double& $vrb5$r,
    double& $vrb5$y,
    double& $vrb5$dcy)
  {
    $y = init$table (21.);
    init$vrb_init (
      2. * jsfx_specialvar_get_srate(),
      $vrb1$t,
      $vrb1$len,
      $vrb1$g,
      $vrb1$w,
      $vrb1$r,
      $vrb1$y,
      $vrb1$dcy);
    init$vrb_init (
      2. * jsfx_specialvar_get_srate(),
      $vrb2$t,
      $vrb2$len,
      $vrb2$g,
      $vrb2$w,
      $vrb2$r,
      $vrb2$y,
      $vrb2$dcy);
    init$vrb_init (
      2. * jsfx_specialvar_get_srate(),
      $vrb3$t,
      $vrb3$len,
      $vrb3$g,
      $vrb3$w,
      $vrb3$r,
      $vrb3$y,
      $vrb3$dcy);
    init$vrb_init (
      2. * jsfx_specialvar_get_srate(),
      $vrb4$t,
      $vrb4$len,
      $vrb4$g,
      $vrb4$w,
      $vrb4$r,
      $vrb4$y,
      $vrb4$dcy);
    return init$vrb_init (
      2. * jsfx_specialvar_get_srate(),
      $vrb5$t,
      $vrb5$len,
      $vrb5$g,
      $vrb5$w,
      $vrb5$r,
      $vrb5$y,
      $vrb5$dcy);
  }
  //----------------------------------------------------------------------------
  double init$sc_proc (
    double  x,
    double  a1,
    double  a2,
    double& $v0,
    double& $w0,
    double& $y0,
    double& $y,
    double& $v1,
    double& $w1,
    double& $y1,
    double& $v2,
    double& $w2,
    double& $y2,
    double& $v3,
    double& $w3,
    double& $y3,
    double& $v4,
    double& $w4,
    double& $y4,
    double& $v5,
    double& $w5,
    double& $y5,
    double& $v6,
    double& $w6,
    double& $y6,
    double& $v7,
    double& $w7,
    double& $y7,
    double& $v8,
    double& $w8,
    double& $y8,
    double& $v9,
    double& $w9,
    double& $y9,
    double& $v10,
    double& $w10,
    double& $y10,
    double& $v11,
    double& $w11,
    double& $y11,
    double& $v12,
    double& $w12,
    double& $y12,
    double& $v13,
    double& $w13,
    double& $y13,
    double& $v14,
    double& $w14,
    double& $y14,
    double& $v15,
    double& $w15,
    double& $y15,
    double& $v16,
    double& $w16,
    double& $y16,
    double& $v17,
    double& $w17,
    double& $y17,
    double& $v18,
    double& $w18,
    double& $y18,
    double& $v19,
    double& $w19,
    double& $y19)
  {
    double tmp      = 0.;
    tmp             = a1 * $v0 + a2 * (x + $w0);
    $y0             = $w0 + tmp;
    heap ($y)       = $y0;
    $w0             = $v0;
    $v0             = x - tmp;
    tmp             = a1 * $v1 + a2 * ($y0 + $w1);
    $y1             = $w1 + tmp;
    heap ($y + 1.)  = $y1;
    $w1             = $v1;
    $v1             = $y0 - tmp;
    tmp             = a1 * $v2 + a2 * ($y1 + $w2);
    $y2             = $w2 + tmp;
    heap ($y + 2.)  = $y2;
    $w2             = $v2;
    $v2             = $y1 - tmp;
    tmp             = a1 * $v3 + a2 * ($y2 + $w3);
    $y3             = $w3 + tmp;
    heap ($y + 3.)  = $y3;
    $w3             = $v3;
    $v3             = $y2 - tmp;
    tmp             = a1 * $v4 + a2 * ($y3 + $w4);
    $y4             = $w4 + tmp;
    heap ($y + 4.)  = $y4;
    $w4             = $v4;
    $v4             = $y3 - tmp;
    tmp             = a1 * $v5 + a2 * ($y4 + $w5);
    $y5             = $w5 + tmp;
    heap ($y + 5.)  = $y5;
    $w5             = $v5;
    $v5             = $y4 - tmp;
    tmp             = a1 * $v6 + a2 * ($y5 + $w6);
    $y6             = $w6 + tmp;
    heap ($y + 6.)  = $y6;
    $w6             = $v6;
    $v6             = $y5 - tmp;
    tmp             = a1 * $v7 + a2 * ($y6 + $w7);
    $y7             = $w7 + tmp;
    heap ($y + 7.)  = $y7;
    $w7             = $v7;
    $v7             = $y6 - tmp;
    tmp             = a1 * $v8 + a2 * ($y7 + $w8);
    $y8             = $w8 + tmp;
    heap ($y + 8.)  = $y8;
    $w8             = $v8;
    $v8             = $y7 - tmp;
    tmp             = a1 * $v9 + a2 * ($y8 + $w9);
    $y9             = $w9 + tmp;
    heap ($y + 9.)  = $y9;
    $w9             = $v9;
    $v9             = $y8 - tmp;
    tmp             = a1 * $v10 + a2 * ($y9 + $w10);
    $y10            = $w10 + tmp;
    heap ($y + 10.) = $y10;
    $w10            = $v10;
    $v10            = $y9 - tmp;
    tmp             = a1 * $v11 + a2 * ($y10 + $w11);
    $y11            = $w11 + tmp;
    heap ($y + 11.) = $y11;
    $w11            = $v11;
    $v11            = $y10 - tmp;
    tmp             = a1 * $v12 + a2 * ($y11 + $w12);
    $y12            = $w12 + tmp;
    heap ($y + 12.) = $y12;
    $w12            = $v12;
    $v12            = $y11 - tmp;
    tmp             = a1 * $v13 + a2 * ($y12 + $w13);
    $y13            = $w13 + tmp;
    heap ($y + 13.) = $y13;
    $w13            = $v13;
    $v13            = $y12 - tmp;
    tmp             = a1 * $v14 + a2 * ($y13 + $w14);
    $y14            = $w14 + tmp;
    heap ($y + 14.) = $y14;
    $w14            = $v14;
    $v14            = $y13 - tmp;
    tmp             = a1 * $v15 + a2 * ($y14 + $w15);
    $y15            = $w15 + tmp;
    heap ($y + 15.) = $y15;
    $w15            = $v15;
    $v15            = $y14 - tmp;
    tmp             = a1 * $v16 + a2 * ($y15 + $w16);
    $y16            = $w16 + tmp;
    heap ($y + 16.) = $y16;
    $w16            = $v16;
    $v16            = $y15 - tmp;
    tmp             = a1 * $v17 + a2 * ($y16 + $w17);
    $y17            = $w17 + tmp;
    heap ($y + 17.) = $y17;
    $w17            = $v17;
    $v17            = $y16 - tmp;
    tmp             = a1 * $v18 + a2 * ($y17 + $w18);
    $y18            = $w18 + tmp;
    heap ($y + 18.) = $y18;
    $w18            = $v18;
    $v18            = $y17 - tmp;
    tmp             = a1 * $v19 + a2 * ($y18 + $w19);
    $y19            = $w19 + tmp;
    heap ($y + 19.) = $y19;
    $w19            = $v19;
    $v19            = $y18 - tmp;
    heap ($y + 20.) = heap ($y + 19.);
    return heap ($y + 20.);
  }
  //----------------------------------------------------------------------------
  double init$sc_read (double x, double& $y)
  {
    double x0 = 0.;
    x0        = eel2_or (x, 0.);
    return heap ($y + x0) + (x - x0) * (heap ($y + (x0 + 1.)) - heap ($y + x0));
  }
  //----------------------------------------------------------------------------
  double init$table (double m)
  {
    double tmp = 0.;
    tmp        = ad;
    ad += m;
    return tmp;
  }
  //----------------------------------------------------------------------------
  double init$vrb_init (
    double  len,
    double& $t,
    double& $len,
    double& $g,
    double& $w,
    double& $r,
    double& $y,
    double& $dcy)
  {
    $t   = init$table (len);
    $len = eel2_or (len, 0.);
    jsfx_memset ($t, 0., $len);
    $g   = 0.7;
    $w   = eel2_or (0., 0.);
    $r   = $w;
    $y   = 0.;
    $dcy = $y;
    return $dcy;
  }
  //----------------------------------------------------------------------------
  double init$vrb_proc (
    double  x,
    double& $u,
    double& $g,
    double& $v,
    double& $y,
    double& $t,
    double& $r,
    double& $w,
    double& $len)
  {
    $u             = $g * (x - $v);
    $y             = $u + $v;
    $v             = heap ($t + $r);
    heap ($t + $w) = $u + x;
    $r += 1.;
    $w += 1.;
    $r -= $len * ($r >= $len);
    $w -= $len * ($w >= $len);
    return $y;
  }
  //----------------------------------------------------------------------------
  double init$vrb_set (double d, double& $r, double& $w, double& $len)
  {
    d  = eel2_or ((d * jsfx_specialvar_get_srate()), 0.);
    $r = ((u64) ($w - d + 4. * $len)) % (u64) $len;
    return $r;
  }
}; /* jsfx_process */
}} // namespace artv::smashed_transistors
